
IEEE2016.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000216a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00802000  0000216a  000021fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011a  00802042  00802042  00002240  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000298  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000059ba  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012f0  00000000  00000000  00007ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019d1  00000000  00000000  000091b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a00  00000000  00000000  0000ab84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001d92  00000000  00000000  0000b584  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002b59  00000000  00000000  0000d316  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000260  00000000  00000000  0000fe6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fe c0       	rjmp	.+508    	; 0x1fe <__ctors_end>
       2:	00 00       	nop
       4:	31 c1       	rjmp	.+610    	; 0x268 <__bad_interrupt>
       6:	00 00       	nop
       8:	2f c1       	rjmp	.+606    	; 0x268 <__bad_interrupt>
       a:	00 00       	nop
       c:	2d c1       	rjmp	.+602    	; 0x268 <__bad_interrupt>
       e:	00 00       	nop
      10:	2b c1       	rjmp	.+598    	; 0x268 <__bad_interrupt>
      12:	00 00       	nop
      14:	29 c1       	rjmp	.+594    	; 0x268 <__bad_interrupt>
      16:	00 00       	nop
      18:	27 c1       	rjmp	.+590    	; 0x268 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	25 c1       	rjmp	.+586    	; 0x268 <__bad_interrupt>
      1e:	00 00       	nop
      20:	23 c1       	rjmp	.+582    	; 0x268 <__bad_interrupt>
      22:	00 00       	nop
      24:	21 c1       	rjmp	.+578    	; 0x268 <__bad_interrupt>
      26:	00 00       	nop
      28:	1f c1       	rjmp	.+574    	; 0x268 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	1d c1       	rjmp	.+570    	; 0x268 <__bad_interrupt>
      2e:	00 00       	nop
      30:	1b c1       	rjmp	.+566    	; 0x268 <__bad_interrupt>
      32:	00 00       	nop
      34:	19 c1       	rjmp	.+562    	; 0x268 <__bad_interrupt>
      36:	00 00       	nop
      38:	7c c5       	rjmp	.+2808   	; 0xb32 <__vector_14>
      3a:	00 00       	nop
      3c:	15 c1       	rjmp	.+554    	; 0x268 <__bad_interrupt>
      3e:	00 00       	nop
      40:	13 c1       	rjmp	.+550    	; 0x268 <__bad_interrupt>
      42:	00 00       	nop
      44:	11 c1       	rjmp	.+546    	; 0x268 <__bad_interrupt>
      46:	00 00       	nop
      48:	0f c1       	rjmp	.+542    	; 0x268 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0d c1       	rjmp	.+538    	; 0x268 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0b c1       	rjmp	.+534    	; 0x268 <__bad_interrupt>
      52:	00 00       	nop
      54:	09 c1       	rjmp	.+530    	; 0x268 <__bad_interrupt>
      56:	00 00       	nop
      58:	07 c1       	rjmp	.+526    	; 0x268 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	05 c1       	rjmp	.+522    	; 0x268 <__bad_interrupt>
      5e:	00 00       	nop
      60:	03 c1       	rjmp	.+518    	; 0x268 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <__vector_25>
      68:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__vector_26>
      6c:	fd c0       	rjmp	.+506    	; 0x268 <__bad_interrupt>
      6e:	00 00       	nop
      70:	fb c0       	rjmp	.+502    	; 0x268 <__bad_interrupt>
      72:	00 00       	nop
      74:	f9 c0       	rjmp	.+498    	; 0x268 <__bad_interrupt>
      76:	00 00       	nop
      78:	f7 c0       	rjmp	.+494    	; 0x268 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f5 c0       	rjmp	.+490    	; 0x268 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f3 c0       	rjmp	.+486    	; 0x268 <__bad_interrupt>
      82:	00 00       	nop
      84:	f1 c0       	rjmp	.+482    	; 0x268 <__bad_interrupt>
      86:	00 00       	nop
      88:	9f c6       	rjmp	.+3390   	; 0xdc8 <__vector_34>
      8a:	00 00       	nop
      8c:	01 c7       	rjmp	.+3586   	; 0xe90 <__vector_35>
      8e:	00 00       	nop
      90:	eb c0       	rjmp	.+470    	; 0x268 <__bad_interrupt>
      92:	00 00       	nop
      94:	e9 c0       	rjmp	.+466    	; 0x268 <__bad_interrupt>
      96:	00 00       	nop
      98:	e7 c0       	rjmp	.+462    	; 0x268 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e5 c0       	rjmp	.+458    	; 0x268 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e3 c0       	rjmp	.+454    	; 0x268 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e1 c0       	rjmp	.+450    	; 0x268 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	df c0       	rjmp	.+446    	; 0x268 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	dd c0       	rjmp	.+442    	; 0x268 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	db c0       	rjmp	.+438    	; 0x268 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d9 c0       	rjmp	.+434    	; 0x268 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d7 c0       	rjmp	.+430    	; 0x268 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d5 c0       	rjmp	.+426    	; 0x268 <__bad_interrupt>
      be:	00 00       	nop
      c0:	d3 c0       	rjmp	.+422    	; 0x268 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d1 c0       	rjmp	.+418    	; 0x268 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	cf c0       	rjmp	.+414    	; 0x268 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	cd c0       	rjmp	.+410    	; 0x268 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	cb c0       	rjmp	.+406    	; 0x268 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c9 c0       	rjmp	.+402    	; 0x268 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c7 c0       	rjmp	.+398    	; 0x268 <__bad_interrupt>
      da:	00 00       	nop
      dc:	c5 c0       	rjmp	.+394    	; 0x268 <__bad_interrupt>
      de:	00 00       	nop
      e0:	c3 c0       	rjmp	.+390    	; 0x268 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c1 c0       	rjmp	.+386    	; 0x268 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	bf c0       	rjmp	.+382    	; 0x268 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	bd c0       	rjmp	.+378    	; 0x268 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	bb c0       	rjmp	.+374    	; 0x268 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b9 c0       	rjmp	.+370    	; 0x268 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b7 c0       	rjmp	.+366    	; 0x268 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b5 c0       	rjmp	.+362    	; 0x268 <__bad_interrupt>
      fe:	00 00       	nop
     100:	b3 c0       	rjmp	.+358    	; 0x268 <__bad_interrupt>
     102:	00 00       	nop
     104:	b1 c0       	rjmp	.+354    	; 0x268 <__bad_interrupt>
     106:	00 00       	nop
     108:	8f c5       	rjmp	.+2846   	; 0xc28 <__vector_66>
     10a:	00 00       	nop
     10c:	f6 c5       	rjmp	.+3052   	; 0xcfa <__vector_67>
     10e:	00 00       	nop
     110:	ab c0       	rjmp	.+342    	; 0x268 <__bad_interrupt>
     112:	00 00       	nop
     114:	a9 c0       	rjmp	.+338    	; 0x268 <__bad_interrupt>
     116:	00 00       	nop
     118:	a7 c0       	rjmp	.+334    	; 0x268 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a5 c0       	rjmp	.+330    	; 0x268 <__bad_interrupt>
     11e:	00 00       	nop
     120:	a3 c0       	rjmp	.+326    	; 0x268 <__bad_interrupt>
     122:	00 00       	nop
     124:	a1 c0       	rjmp	.+322    	; 0x268 <__bad_interrupt>
     126:	00 00       	nop
     128:	9f c0       	rjmp	.+318    	; 0x268 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	9d c0       	rjmp	.+314    	; 0x268 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <__vector_76>
     134:	99 c0       	rjmp	.+306    	; 0x268 <__bad_interrupt>
     136:	00 00       	nop
     138:	97 c0       	rjmp	.+302    	; 0x268 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	95 c0       	rjmp	.+298    	; 0x268 <__bad_interrupt>
     13e:	00 00       	nop
     140:	93 c0       	rjmp	.+294    	; 0x268 <__bad_interrupt>
     142:	00 00       	nop
     144:	91 c0       	rjmp	.+290    	; 0x268 <__bad_interrupt>
     146:	00 00       	nop
     148:	8f c0       	rjmp	.+286    	; 0x268 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	8d c0       	rjmp	.+282    	; 0x268 <__bad_interrupt>
     14e:	00 00       	nop
     150:	8b c0       	rjmp	.+278    	; 0x268 <__bad_interrupt>
     152:	00 00       	nop
     154:	89 c0       	rjmp	.+274    	; 0x268 <__bad_interrupt>
     156:	00 00       	nop
     158:	87 c0       	rjmp	.+270    	; 0x268 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	85 c0       	rjmp	.+266    	; 0x268 <__bad_interrupt>
     15e:	00 00       	nop
     160:	83 c0       	rjmp	.+262    	; 0x268 <__bad_interrupt>
     162:	00 00       	nop
     164:	81 c0       	rjmp	.+258    	; 0x268 <__bad_interrupt>
     166:	00 00       	nop
     168:	7f c0       	rjmp	.+254    	; 0x268 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	7d c0       	rjmp	.+250    	; 0x268 <__bad_interrupt>
     16e:	00 00       	nop
     170:	7b c0       	rjmp	.+246    	; 0x268 <__bad_interrupt>
     172:	00 00       	nop
     174:	79 c0       	rjmp	.+242    	; 0x268 <__bad_interrupt>
     176:	00 00       	nop
     178:	77 c0       	rjmp	.+238    	; 0x268 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	75 c0       	rjmp	.+234    	; 0x268 <__bad_interrupt>
     17e:	00 00       	nop
     180:	73 c0       	rjmp	.+230    	; 0x268 <__bad_interrupt>
     182:	00 00       	nop
     184:	71 c0       	rjmp	.+226    	; 0x268 <__bad_interrupt>
     186:	00 00       	nop
     188:	6f c0       	rjmp	.+222    	; 0x268 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	6d c0       	rjmp	.+218    	; 0x268 <__bad_interrupt>
     18e:	00 00       	nop
     190:	6b c0       	rjmp	.+214    	; 0x268 <__bad_interrupt>
     192:	00 00       	nop
     194:	69 c0       	rjmp	.+210    	; 0x268 <__bad_interrupt>
     196:	00 00       	nop
     198:	67 c0       	rjmp	.+206    	; 0x268 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	65 c0       	rjmp	.+202    	; 0x268 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	63 c0       	rjmp	.+198    	; 0x268 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	61 c0       	rjmp	.+194    	; 0x268 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	5f c0       	rjmp	.+190    	; 0x268 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	5d c0       	rjmp	.+186    	; 0x268 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	5b c0       	rjmp	.+182    	; 0x268 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	59 c0       	rjmp	.+178    	; 0x268 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	57 c0       	rjmp	.+174    	; 0x268 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	55 c0       	rjmp	.+170    	; 0x268 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	53 c0       	rjmp	.+166    	; 0x268 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	51 c0       	rjmp	.+162    	; 0x268 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	4f c0       	rjmp	.+158    	; 0x268 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	4d c0       	rjmp	.+154    	; 0x268 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	4b c0       	rjmp	.+150    	; 0x268 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	49 c0       	rjmp	.+146    	; 0x268 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	47 c0       	rjmp	.+142    	; 0x268 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	45 c0       	rjmp	.+138    	; 0x268 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	43 c0       	rjmp	.+134    	; 0x268 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	41 c0       	rjmp	.+130    	; 0x268 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	3f c0       	rjmp	.+126    	; 0x268 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	3d c0       	rjmp	.+122    	; 0x268 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	3b c0       	rjmp	.+118    	; 0x268 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	39 c0       	rjmp	.+114    	; 0x268 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	37 c0       	rjmp	.+110    	; 0x268 <__bad_interrupt>
	...

000001fc <__ctors_start>:
     1fc:	af 07       	cpc	r26, r31

000001fe <__ctors_end>:
     1fe:	11 24       	eor	r1, r1
     200:	1f be       	out	0x3f, r1	; 63
     202:	cf ef       	ldi	r28, 0xFF	; 255
     204:	cd bf       	out	0x3d, r28	; 61
     206:	df e3       	ldi	r29, 0x3F	; 63
     208:	de bf       	out	0x3e, r29	; 62
     20a:	00 e0       	ldi	r16, 0x00	; 0
     20c:	0c bf       	out	0x3c, r16	; 60
     20e:	18 be       	out	0x38, r1	; 56
     210:	19 be       	out	0x39, r1	; 57
     212:	1a be       	out	0x3a, r1	; 58
     214:	1b be       	out	0x3b, r1	; 59

00000216 <__do_copy_data>:
     216:	10 e2       	ldi	r17, 0x20	; 32
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b0 e2       	ldi	r27, 0x20	; 32
     21c:	ea e6       	ldi	r30, 0x6A	; 106
     21e:	f1 e2       	ldi	r31, 0x21	; 33
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	0b bf       	out	0x3b, r16	; 59
     224:	02 c0       	rjmp	.+4      	; 0x22a <__do_copy_data+0x14>
     226:	07 90       	elpm	r0, Z+
     228:	0d 92       	st	X+, r0
     22a:	a2 34       	cpi	r26, 0x42	; 66
     22c:	b1 07       	cpc	r27, r17
     22e:	d9 f7       	brne	.-10     	; 0x226 <__do_copy_data+0x10>
     230:	1b be       	out	0x3b, r1	; 59

00000232 <__do_clear_bss>:
     232:	21 e2       	ldi	r18, 0x21	; 33
     234:	a2 e4       	ldi	r26, 0x42	; 66
     236:	b0 e2       	ldi	r27, 0x20	; 32
     238:	01 c0       	rjmp	.+2      	; 0x23c <.do_clear_bss_start>

0000023a <.do_clear_bss_loop>:
     23a:	1d 92       	st	X+, r1

0000023c <.do_clear_bss_start>:
     23c:	ac 35       	cpi	r26, 0x5C	; 92
     23e:	b2 07       	cpc	r27, r18
     240:	e1 f7       	brne	.-8      	; 0x23a <.do_clear_bss_loop>

00000242 <__do_global_ctors>:
     242:	11 e0       	ldi	r17, 0x01	; 1
     244:	ce ef       	ldi	r28, 0xFE	; 254
     246:	d1 e0       	ldi	r29, 0x01	; 1
     248:	00 e0       	ldi	r16, 0x00	; 0
     24a:	06 c0       	rjmp	.+12     	; 0x258 <__do_global_ctors+0x16>
     24c:	22 97       	sbiw	r28, 0x02	; 2
     24e:	01 09       	sbc	r16, r1
     250:	fe 01       	movw	r30, r28
     252:	0b bf       	out	0x3b, r16	; 59
     254:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__tablejump_elpm__>
     258:	cc 3f       	cpi	r28, 0xFC	; 252
     25a:	d1 07       	cpc	r29, r17
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	08 07       	cpc	r16, r24
     260:	a9 f7       	brne	.-22     	; 0x24c <__do_global_ctors+0xa>
     262:	85 d0       	rcall	.+266    	; 0x36e <main>
     264:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <_exit>

00000268 <__bad_interrupt>:
     268:	cb ce       	rjmp	.-618    	; 0x0 <__vectors>

0000026a <_Z11init_clocksv>:
 */ 
#include "clock.h"
#include <avr/io.h>

void init_clocks() {
	OSC.CTRL = OSC_RC32MEN_bm | OSC_RC2MEN_bm; // enable 32 Mhz clock (while leaving the current 2 Mhz clock enabled)
     26a:	83 e0       	ldi	r24, 0x03	; 3
     26c:	80 93 50 00 	sts	0x0050, r24
	while (!(OSC.STATUS & OSC_RC32MRDY_bm)) { } // wait for it to stabilize
     270:	e0 e5       	ldi	r30, 0x50	; 80
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	81 81       	ldd	r24, Z+1	; 0x01
     276:	81 ff       	sbrs	r24, 1
     278:	fd cf       	rjmp	.-6      	; 0x274 <_Z11init_clocksv+0xa>
	CPU_CCP = CCP_IOREG_gc; // enable access to protected registers
     27a:	88 ed       	ldi	r24, 0xD8	; 216
     27c:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; // switch to the 32 Mhz clock
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	80 93 40 00 	sts	0x0040, r24
     284:	08 95       	ret

00000286 <_Z8imu_initv>:

static inline void imu_setMeasurementBias(uint8_t bias) {
	twi_write_bits(HMC5883L_DEFAULT_ADDRESS, HMC5883L_RA_CONFIG_A, HMC5883L_CRA_BIAS_BIT, HMC5883L_CRA_BIAS_LENGTH, bias);
}

void imu_init(){
     286:	0f 93       	push	r16
	// write CONFIG_A register
	twi_write_byte(HMC5883L_DEFAULT_ADDRESS, HMC5883L_RA_CONFIG_A,
	(HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
	(HMC5883L_RATE_15 << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
	(HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1)));
     288:	40 e7       	ldi	r20, 0x70	; 112
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	8e e1       	ldi	r24, 0x1E	; 30
     28e:	0e 94 1a 0a 	call	0x1434	; 0x1434 <_Z14twi_write_bytehhh>

static inline void imu_setGain(uint8_t gain) {
	// use this method to guarantee that bits 4-0 are set to zero, which is a
	// requirement specified in the datasheet; it's actually more efficient than
	// using the I2Cdev.writeBits method
	twi_write_byte(HMC5883L_DEFAULT_ADDRESS, HMC5883L_RA_CONFIG_B, gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1));
     292:	40 e8       	ldi	r20, 0x80	; 128
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	8e e1       	ldi	r24, 0x1E	; 30
     298:	0e 94 1a 0a 	call	0x1434	; 0x1434 <_Z14twi_write_bytehhh>

static inline void imu_setMode(uint8_t newMode) {
	// use this method to guarantee that bits 7-2 are set to zero, which is a
	// requirement specified in the datasheet; it's actually more efficient than
	// using the I2Cdev.writeBits method
	twi_write_byte(HMC5883L_DEFAULT_ADDRESS, HMC5883L_RA_MODE, newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
     29c:	41 e0       	ldi	r20, 0x01	; 1
     29e:	62 e0       	ldi	r22, 0x02	; 2
     2a0:	8e e1       	ldi	r24, 0x1E	; 30
     2a2:	0e 94 1a 0a 	call	0x1434	; 0x1434 <_Z14twi_write_bytehhh>
	mode = newMode; // track to tell if we have to clear bit 7 after a read
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	80 93 06 20 	sts	0x2006, r24
}

static inline void imu_setSampleAveraging(uint8_t averaging) {
	twi_write_bits(HMC5883L_DEFAULT_ADDRESS, HMC5883L_RA_CONFIG_A, HMC5883L_CRA_AVERAGE_BIT, HMC5883L_CRA_AVERAGE_LENGTH, averaging);
     2ac:	03 e0       	ldi	r16, 0x03	; 3
     2ae:	22 e0       	ldi	r18, 0x02	; 2
     2b0:	46 e0       	ldi	r20, 0x06	; 6
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	8e e1       	ldi	r24, 0x1E	; 30
     2b6:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <_Z14twi_write_bitshhhhh>
}

static inline void imu_setDataRate(uint8_t rate) {
	twi_write_bits(HMC5883L_DEFAULT_ADDRESS, HMC5883L_RA_CONFIG_A, HMC5883L_CRA_RATE_BIT, HMC5883L_CRA_RATE_LENGTH, rate);
     2ba:	06 e0       	ldi	r16, 0x06	; 6
     2bc:	23 e0       	ldi	r18, 0x03	; 3
     2be:	44 e0       	ldi	r20, 0x04	; 4
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	8e e1       	ldi	r24, 0x1E	; 30
     2c4:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <_Z14twi_write_bitshhhhh>
}

static inline void imu_setMeasurementBias(uint8_t bias) {
	twi_write_bits(HMC5883L_DEFAULT_ADDRESS, HMC5883L_RA_CONFIG_A, HMC5883L_CRA_BIAS_BIT, HMC5883L_CRA_BIAS_LENGTH, bias);
     2c8:	00 e0       	ldi	r16, 0x00	; 0
     2ca:	22 e0       	ldi	r18, 0x02	; 2
     2cc:	41 e0       	ldi	r20, 0x01	; 1
     2ce:	60 e0       	ldi	r22, 0x00	; 0
     2d0:	8e e1       	ldi	r24, 0x1E	; 30
     2d2:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <_Z14twi_write_bitshhhhh>
	imu_setSampleAveraging(HMC5883L_AVERAGING_8);
	
	imu_setDataRate(HMC5883L_RATE_75);
	
	imu_setMeasurementBias(HMC5883L_BIAS_NORMAL);
}
     2d6:	0f 91       	pop	r16
     2d8:	08 95       	ret

000002da <_Z14imu_getHeadingRA6_c>:

//Each value ranges from -2048 to 2047
void imu_getHeading(char (&buffer)[6]) {
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	ec 01       	movw	r28, r24
     2e2:	13 e0       	ldi	r17, 0x03	; 3
	for (uint8_t i = 0; i < 7; i++)
		buffer[i] = twi_read_byte(HMC5883L_DEFAULT_ADDRESS, HMC5883L_RA_DATAX_H + i);
     2e4:	61 2f       	mov	r22, r17
     2e6:	8e e1       	ldi	r24, 0x1E	; 30
     2e8:	0e 94 3a 0a 	call	0x1474	; 0x1474 <_Z13twi_read_bytehh>
     2ec:	89 93       	st	Y+, r24
     2ee:	1f 5f       	subi	r17, 0xFF	; 255
	imu_setMeasurementBias(HMC5883L_BIAS_NORMAL);
}

//Each value ranges from -2048 to 2047
void imu_getHeading(char (&buffer)[6]) {
	for (uint8_t i = 0; i < 7; i++)
     2f0:	1a 30       	cpi	r17, 0x0A	; 10
     2f2:	c1 f7       	brne	.-16     	; 0x2e4 <_Z14imu_getHeadingRA6_c+0xa>
		buffer[i] = twi_read_byte(HMC5883L_DEFAULT_ADDRESS, HMC5883L_RA_DATAX_H + i);
	if (mode == HMC5883L_MODE_SINGLE) 
     2f4:	80 91 06 20 	lds	r24, 0x2006
     2f8:	81 30       	cpi	r24, 0x01	; 1
     2fa:	29 f4       	brne	.+10     	; 0x306 <_Z14imu_getHeadingRA6_c+0x2c>
		twi_write_byte(HMC5883L_DEFAULT_ADDRESS, HMC5883L_RA_MODE, HMC5883L_MODE_SINGLE << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
     2fc:	41 e0       	ldi	r20, 0x01	; 1
     2fe:	62 e0       	ldi	r22, 0x02	; 2
     300:	8e e1       	ldi	r24, 0x1E	; 30
     302:	0e 94 1a 0a 	call	0x1434	; 0x1434 <_Z14twi_write_bytehhh>
}
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	08 95       	ret

0000030e <_Z23imu_get_heading_handlerPch>:

void imu_get_heading_handler(char* message, uint8_t len){
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	00 d0       	rcall	.+0      	; 0x318 <_Z23imu_get_heading_handlerPch+0xa>
     318:	00 d0       	rcall	.+0      	; 0x31a <_Z23imu_get_heading_handlerPch+0xc>
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
	char buffer[6] = {0};
     31e:	8e 01       	movw	r16, r28
     320:	0f 5f       	subi	r16, 0xFF	; 255
     322:	1f 4f       	sbci	r17, 0xFF	; 255
     324:	86 e0       	ldi	r24, 0x06	; 6
     326:	f8 01       	movw	r30, r16
     328:	11 92       	st	Z+, r1
     32a:	8a 95       	dec	r24
     32c:	e9 f7       	brne	.-6      	; 0x328 <_Z23imu_get_heading_handlerPch+0x1a>
	imu_getHeading(buffer);
     32e:	c8 01       	movw	r24, r16
     330:	d4 df       	rcall	.-88     	; 0x2da <_Z14imu_getHeadingRA6_c>
	uart_send_msg_block(IMUgetHeading, buffer, 7);
     332:	47 e0       	ldi	r20, 0x07	; 7
     334:	b8 01       	movw	r22, r16
     336:	8a e0       	ldi	r24, 0x0A	; 10
     338:	0e 94 c2 0b 	call	0x1784	; 0x1784 <_Z19uart_send_msg_blockhPch>
     33c:	26 96       	adiw	r28, 0x06	; 6
     33e:	cd bf       	out	0x3d, r28	; 61
     340:	de bf       	out	0x3e, r29	; 62
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	1f 91       	pop	r17
     348:	0f 91       	pop	r16
     34a:	08 95       	ret

0000034c <_Z15init_interruptsv>:
		*/
	
}

void init_interrupts() {
	PMIC.CTRL = PMIC_RREN_bm | PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
     34c:	87 e8       	ldi	r24, 0x87	; 135
     34e:	e0 ea       	ldi	r30, 0xA0	; 160
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	82 83       	std	Z+2, r24	; 0x02
	sei();
     354:	78 94       	sei
     356:	08 95       	ret

00000358 <_Z12init_modulesv>:
}

// All initialization functions for peripherals should be placed here.
void init_modules() {
	uart_init();
     358:	0e 94 76 0b 	call	0x16ec	; 0x16ec <_Z9uart_initv>
	pid_init();
     35c:	2e d1       	rcall	.+604    	; 0x5ba <_Z8pid_initv>
	twi_init_master();
     35e:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <_Z15twi_init_masterv>
     362:	08 95       	ret

00000364 <_Z4initv>:
#include "clock.h"
#include "twi.h"
#include "hmc5883l.h"

void init() {
	init_clocks();
     364:	82 df       	rcall	.-252    	; 0x26a <_Z11init_clocksv>
	init_modules();
     366:	f8 df       	rcall	.-16     	; 0x358 <_Z12init_modulesv>
	init_interrupts();
     368:	f1 df       	rcall	.-30     	; 0x34c <_Z15init_interruptsv>
	//mpu_init();
	imu_init();
     36a:	8d cf       	rjmp	.-230    	; 0x286 <_Z8imu_initv>
     36c:	08 95       	ret

0000036e <main>:
#include "uart_handler_pointers.h"
#include "twi.h"


int main() {
	init();
     36e:	fa df       	rcall	.-12     	; 0x364 <_Z4initv>

	while(1) {
		asm("nop");
     370:	00 00       	nop
		if(uart_get_msg_status()) {
     372:	0e 94 cd 0b 	call	0x179a	; 0x179a <_Z19uart_get_msg_statusv>
     376:	88 23       	and	r24, r24
     378:	a1 f0       	breq	.+40     	; 0x3a2 <main+0x34>
			uart_set_msg_status(false);
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <_Z19uart_set_msg_statusb>
			char* message = uart_get_msg();
     380:	0e 94 ca 0b 	call	0x1794	; 0x1794 <_Z12uart_get_msgv>
			// message[0] is the length, message[1] is the type, and message[2] is the first part of the message.
			HandlerPointers[(uint8_t)message[1]]((char*)&message[2], message[0]);
     384:	dc 01       	movw	r26, r24
     386:	11 96       	adiw	r26, 0x01	; 1
     388:	ec 91       	ld	r30, X
     38a:	11 97       	sbiw	r26, 0x01	; 1
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	ee 0f       	add	r30, r30
     390:	ff 1f       	adc	r31, r31
     392:	e9 5f       	subi	r30, 0xF9	; 249
     394:	ff 4d       	sbci	r31, 0xDF	; 223
     396:	01 90       	ld	r0, Z+
     398:	f0 81       	ld	r31, Z
     39a:	e0 2d       	mov	r30, r0
     39c:	6c 91       	ld	r22, X
     39e:	02 96       	adiw	r24, 0x02	; 2
     3a0:	19 95       	eicall
		}
	asm("nop");
     3a2:	00 00       	nop
	}
     3a4:	e5 cf       	rjmp	.-54     	; 0x370 <main+0x2>

000003a6 <_ZL11pid_compute8wheelNum>:
	return data.AVG_speed;
}

void pid_setSpeed(float speed, wheelNum num) {
	pid_wheel_data &data = wheelData[num];
	data.setpoint = speed;
     3a6:	4f 92       	push	r4
     3a8:	5f 92       	push	r5
     3aa:	6f 92       	push	r6
     3ac:	7f 92       	push	r7
     3ae:	8f 92       	push	r8
     3b0:	9f 92       	push	r9
     3b2:	af 92       	push	r10
     3b4:	bf 92       	push	r11
     3b6:	cf 92       	push	r12
     3b8:	df 92       	push	r13
     3ba:	ef 92       	push	r14
     3bc:	ff 92       	push	r15
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	00 d0       	rcall	.+0      	; 0x3c8 <_ZL11pid_compute8wheelNum+0x22>
     3c8:	1f 92       	push	r1
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
     3ce:	20 e3       	ldi	r18, 0x30	; 48
     3d0:	82 9f       	mul	r24, r18
     3d2:	c0 01       	movw	r24, r0
     3d4:	11 24       	eor	r1, r1
     3d6:	8c 01       	movw	r16, r24
     3d8:	0a 5b       	subi	r16, 0xBA	; 186
     3da:	1f 4d       	sbci	r17, 0xDF	; 223
     3dc:	f8 01       	movw	r30, r16
     3de:	20 81       	ld	r18, Z
     3e0:	31 81       	ldd	r19, Z+1	; 0x01
     3e2:	42 81       	ldd	r20, Z+2	; 0x02
     3e4:	53 81       	ldd	r21, Z+3	; 0x03
     3e6:	60 89       	ldd	r22, Z+16	; 0x10
     3e8:	71 89       	ldd	r23, Z+17	; 0x11
     3ea:	82 89       	ldd	r24, Z+18	; 0x12
     3ec:	93 89       	ldd	r25, Z+19	; 0x13
     3ee:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__subsf3>
     3f2:	6b 01       	movw	r12, r22
     3f4:	7c 01       	movw	r14, r24
     3f6:	f8 01       	movw	r30, r16
     3f8:	24 89       	ldd	r18, Z+20	; 0x14
     3fa:	35 89       	ldd	r19, Z+21	; 0x15
     3fc:	46 89       	ldd	r20, Z+22	; 0x16
     3fe:	57 89       	ldd	r21, Z+23	; 0x17
     400:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__addsf3>
     404:	4b 01       	movw	r8, r22
     406:	5c 01       	movw	r10, r24
     408:	f8 01       	movw	r30, r16
     40a:	64 8b       	std	Z+20, r22	; 0x14
     40c:	75 8b       	std	Z+21, r23	; 0x15
     40e:	86 8b       	std	Z+22, r24	; 0x16
     410:	97 8b       	std	Z+23, r25	; 0x17
     412:	20 8d       	ldd	r18, Z+24	; 0x18
     414:	31 8d       	ldd	r19, Z+25	; 0x19
     416:	42 8d       	ldd	r20, Z+26	; 0x1a
     418:	53 8d       	ldd	r21, Z+27	; 0x1b
     41a:	c7 01       	movw	r24, r14
     41c:	b6 01       	movw	r22, r12
     41e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__subsf3>
     422:	69 83       	std	Y+1, r22	; 0x01
     424:	7a 83       	std	Y+2, r23	; 0x02
     426:	8b 83       	std	Y+3, r24	; 0x03
     428:	9c 83       	std	Y+4, r25	; 0x04
     42a:	f8 01       	movw	r30, r16
     42c:	40 a0       	ldd	r4, Z+32	; 0x20
     42e:	51 a0       	ldd	r5, Z+33	; 0x21
     430:	62 a0       	ldd	r6, Z+34	; 0x22
     432:	73 a0       	ldd	r7, Z+35	; 0x23
     434:	a3 01       	movw	r20, r6
     436:	92 01       	movw	r18, r4
     438:	c5 01       	movw	r24, r10
     43a:	b4 01       	movw	r22, r8
     43c:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__mulsf3>
     440:	4b 01       	movw	r8, r22
     442:	5c 01       	movw	r10, r24
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	40 e8       	ldi	r20, 0x80	; 128
     44a:	54 e4       	ldi	r21, 0x44	; 68
     44c:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__gesf2>
     450:	88 23       	and	r24, r24
     452:	74 f0       	brlt	.+28     	; 0x470 <_ZL11pid_compute8wheelNum+0xca>
     454:	a3 01       	movw	r20, r6
     456:	92 01       	movw	r18, r4
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	80 e8       	ldi	r24, 0x80	; 128
     45e:	94 e4       	ldi	r25, 0x44	; 68
     460:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <__divsf3>
     464:	f8 01       	movw	r30, r16
     466:	64 8b       	std	Z+20, r22	; 0x14
     468:	75 8b       	std	Z+21, r23	; 0x15
     46a:	86 8b       	std	Z+22, r24	; 0x16
     46c:	97 8b       	std	Z+23, r25	; 0x17
     46e:	17 c0       	rjmp	.+46     	; 0x49e <_ZL11pid_compute8wheelNum+0xf8>
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	40 e8       	ldi	r20, 0x80	; 128
     476:	54 ec       	ldi	r21, 0xC4	; 196
     478:	c5 01       	movw	r24, r10
     47a:	b4 01       	movw	r22, r8
     47c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__cmpsf2>
     480:	18 16       	cp	r1, r24
     482:	6c f0       	brlt	.+26     	; 0x49e <_ZL11pid_compute8wheelNum+0xf8>
     484:	a3 01       	movw	r20, r6
     486:	92 01       	movw	r18, r4
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	80 e8       	ldi	r24, 0x80	; 128
     48e:	94 ec       	ldi	r25, 0xC4	; 196
     490:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <__divsf3>
     494:	f8 01       	movw	r30, r16
     496:	64 8b       	std	Z+20, r22	; 0x14
     498:	75 8b       	std	Z+21, r23	; 0x15
     49a:	86 8b       	std	Z+22, r24	; 0x16
     49c:	97 8b       	std	Z+23, r25	; 0x17
     49e:	f8 01       	movw	r30, r16
     4a0:	24 8d       	ldd	r18, Z+28	; 0x1c
     4a2:	35 8d       	ldd	r19, Z+29	; 0x1d
     4a4:	46 8d       	ldd	r20, Z+30	; 0x1e
     4a6:	57 8d       	ldd	r21, Z+31	; 0x1f
     4a8:	c7 01       	movw	r24, r14
     4aa:	b6 01       	movw	r22, r12
     4ac:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__mulsf3>
     4b0:	4b 01       	movw	r8, r22
     4b2:	5c 01       	movw	r10, r24
     4b4:	f8 01       	movw	r30, r16
     4b6:	24 89       	ldd	r18, Z+20	; 0x14
     4b8:	35 89       	ldd	r19, Z+21	; 0x15
     4ba:	46 89       	ldd	r20, Z+22	; 0x16
     4bc:	57 89       	ldd	r21, Z+23	; 0x17
     4be:	c3 01       	movw	r24, r6
     4c0:	b2 01       	movw	r22, r4
     4c2:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__mulsf3>
     4c6:	9b 01       	movw	r18, r22
     4c8:	ac 01       	movw	r20, r24
     4ca:	c5 01       	movw	r24, r10
     4cc:	b4 01       	movw	r22, r8
     4ce:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__addsf3>
     4d2:	4b 01       	movw	r8, r22
     4d4:	5c 01       	movw	r10, r24
     4d6:	f8 01       	movw	r30, r16
     4d8:	24 a1       	ldd	r18, Z+36	; 0x24
     4da:	35 a1       	ldd	r19, Z+37	; 0x25
     4dc:	46 a1       	ldd	r20, Z+38	; 0x26
     4de:	57 a1       	ldd	r21, Z+39	; 0x27
     4e0:	69 81       	ldd	r22, Y+1	; 0x01
     4e2:	7a 81       	ldd	r23, Y+2	; 0x02
     4e4:	8b 81       	ldd	r24, Y+3	; 0x03
     4e6:	9c 81       	ldd	r25, Y+4	; 0x04
     4e8:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__mulsf3>
     4ec:	9b 01       	movw	r18, r22
     4ee:	ac 01       	movw	r20, r24
     4f0:	c5 01       	movw	r24, r10
     4f2:	b4 01       	movw	r22, r8
     4f4:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__addsf3>
     4f8:	f8 01       	movw	r30, r16
     4fa:	64 87       	std	Z+12, r22	; 0x0c
     4fc:	75 87       	std	Z+13, r23	; 0x0d
     4fe:	86 87       	std	Z+14, r24	; 0x0e
     500:	97 87       	std	Z+15, r25	; 0x0f
     502:	c0 8e       	std	Z+24, r12	; 0x18
     504:	d1 8e       	std	Z+25, r13	; 0x19
     506:	e2 8e       	std	Z+26, r14	; 0x1a
     508:	f3 8e       	std	Z+27, r15	; 0x1b
     50a:	24 96       	adiw	r28, 0x04	; 4
     50c:	cd bf       	out	0x3d, r28	; 61
     50e:	de bf       	out	0x3e, r29	; 62
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	1f 91       	pop	r17
     516:	0f 91       	pop	r16
     518:	ff 90       	pop	r15
     51a:	ef 90       	pop	r14
     51c:	df 90       	pop	r13
     51e:	cf 90       	pop	r12
     520:	bf 90       	pop	r11
     522:	af 90       	pop	r10
     524:	9f 90       	pop	r9
     526:	8f 90       	pop	r8
     528:	7f 90       	pop	r7
     52a:	6f 90       	pop	r6
     52c:	5f 90       	pop	r5
     52e:	4f 90       	pop	r4
     530:	08 95       	ret

00000532 <_ZL16pid_measureSpeed8wheelNum>:
     532:	cf 92       	push	r12
     534:	df 92       	push	r13
     536:	ef 92       	push	r14
     538:	ff 92       	push	r15
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	00 e3       	ldi	r16, 0x30	; 48
     544:	80 9f       	mul	r24, r16
     546:	c0 01       	movw	r24, r0
     548:	11 24       	eor	r1, r1
     54a:	ec 01       	movw	r28, r24
     54c:	ca 5b       	subi	r28, 0xBA	; 186
     54e:	df 4d       	sbci	r29, 0xDF	; 223
     550:	f8 94       	cli
     552:	cc 80       	ldd	r12, Y+4	; 0x04
     554:	dd 80       	ldd	r13, Y+5	; 0x05
     556:	ee 80       	ldd	r14, Y+6	; 0x06
     558:	ff 80       	ldd	r15, Y+7	; 0x07
     55a:	78 94       	sei
     55c:	48 a5       	ldd	r20, Y+40	; 0x28
     55e:	59 a5       	ldd	r21, Y+41	; 0x29
     560:	6a a5       	ldd	r22, Y+42	; 0x2a
     562:	7b a5       	ldd	r23, Y+43	; 0x2b
     564:	97 01       	movw	r18, r14
     566:	86 01       	movw	r16, r12
     568:	04 1b       	sub	r16, r20
     56a:	15 0b       	sbc	r17, r21
     56c:	26 0b       	sbc	r18, r22
     56e:	37 0b       	sbc	r19, r23
     570:	c9 01       	movw	r24, r18
     572:	b8 01       	movw	r22, r16
     574:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__floatsisf>
     578:	20 91 35 20 	lds	r18, 0x2035
     57c:	30 91 36 20 	lds	r19, 0x2036
     580:	40 91 37 20 	lds	r20, 0x2037
     584:	50 91 38 20 	lds	r21, 0x2038
     588:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__mulsf3>
     58c:	2a e0       	ldi	r18, 0x0A	; 10
     58e:	37 ed       	ldi	r19, 0xD7	; 215
     590:	43 e2       	ldi	r20, 0x23	; 35
     592:	5c e3       	ldi	r21, 0x3C	; 60
     594:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <__divsf3>
     598:	68 83       	st	Y, r22
     59a:	79 83       	std	Y+1, r23	; 0x01
     59c:	8a 83       	std	Y+2, r24	; 0x02
     59e:	9b 83       	std	Y+3, r25	; 0x03
     5a0:	c8 a6       	std	Y+40, r12	; 0x28
     5a2:	d9 a6       	std	Y+41, r13	; 0x29
     5a4:	ea a6       	std	Y+42, r14	; 0x2a
     5a6:	fb a6       	std	Y+43, r15	; 0x2b
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	ff 90       	pop	r15
     5b2:	ef 90       	pop	r14
     5b4:	df 90       	pop	r13
     5b6:	cf 90       	pop	r12
     5b8:	08 95       	ret

000005ba <_Z8pid_initv>:
     5ba:	4f 92       	push	r4
     5bc:	5f 92       	push	r5
     5be:	6f 92       	push	r6
     5c0:	7f 92       	push	r7
     5c2:	8f 92       	push	r8
     5c4:	9f 92       	push	r9
     5c6:	af 92       	push	r10
     5c8:	bf 92       	push	r11
     5ca:	cf 92       	push	r12
     5cc:	df 92       	push	r13
     5ce:	ef 92       	push	r14
     5d0:	ff 92       	push	r15
     5d2:	81 e3       	ldi	r24, 0x31	; 49
     5d4:	90 e2       	ldi	r25, 0x20	; 32
     5d6:	af d5       	rcall	.+2910   	; 0x1136 <_Z10pololuInitP12pololu_low_t>
     5d8:	8d e2       	ldi	r24, 0x2D	; 45
     5da:	90 e2       	ldi	r25, 0x20	; 32
     5dc:	26 d5       	rcall	.+2636   	; 0x102a <_Z10pololuInitP13pololu_high_t>
     5de:	89 e2       	ldi	r24, 0x29	; 41
     5e0:	90 e2       	ldi	r25, 0x20	; 32
     5e2:	a9 d5       	rcall	.+2898   	; 0x1136 <_Z10pololuInitP12pololu_low_t>
     5e4:	85 e2       	ldi	r24, 0x25	; 37
     5e6:	90 e2       	ldi	r25, 0x20	; 32
     5e8:	20 d5       	rcall	.+2624   	; 0x102a <_Z10pololuInitP13pololu_high_t>
     5ea:	e0 e0       	ldi	r30, 0x00	; 0
     5ec:	f6 e0       	ldi	r31, 0x06	; 6
     5ee:	86 e0       	ldi	r24, 0x06	; 6
     5f0:	82 83       	std	Z+2, r24	; 0x02
     5f2:	12 8a       	std	Z+18, r1	; 0x12
     5f4:	84 e1       	ldi	r24, 0x14	; 20
     5f6:	82 87       	std	Z+10, r24	; 0x0a
     5f8:	85 e0       	ldi	r24, 0x05	; 5
     5fa:	81 87       	std	Z+9, r24	; 0x09
     5fc:	11 8a       	std	Z+17, r1	; 0x11
     5fe:	9a e0       	ldi	r25, 0x0A	; 10
     600:	93 87       	std	Z+11, r25	; 0x0b
     602:	e0 e2       	ldi	r30, 0x20	; 32
     604:	f6 e0       	ldi	r31, 0x06	; 6
     606:	23 e0       	ldi	r18, 0x03	; 3
     608:	22 83       	std	Z+2, r18	; 0x02
     60a:	10 8a       	std	Z+16, r1	; 0x10
     60c:	82 87       	std	Z+10, r24	; 0x0a
     60e:	81 87       	std	Z+9, r24	; 0x09
     610:	11 8a       	std	Z+17, r1	; 0x11
     612:	93 87       	std	Z+11, r25	; 0x0b
     614:	e0 e0       	ldi	r30, 0x00	; 0
     616:	f8 e0       	ldi	r31, 0x08	; 8
     618:	80 83       	st	Z, r24
     61a:	11 82       	std	Z+1, r1	; 0x01
     61c:	12 82       	std	Z+2, r1	; 0x02
     61e:	13 82       	std	Z+3, r1	; 0x03
     620:	14 82       	std	Z+4, r1	; 0x04
     622:	88 e8       	ldi	r24, 0x88	; 136
     624:	93 e1       	ldi	r25, 0x13	; 19
     626:	86 a3       	std	Z+38, r24	; 0x26
     628:	97 a3       	std	Z+39, r25	; 0x27
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	86 83       	std	Z+6, r24	; 0x06
     62e:	40 90 39 20 	lds	r4, 0x2039
     632:	50 90 3a 20 	lds	r5, 0x203A
     636:	60 90 3b 20 	lds	r6, 0x203B
     63a:	70 90 3c 20 	lds	r7, 0x203C
     63e:	60 91 3d 20 	lds	r22, 0x203D
     642:	70 91 3e 20 	lds	r23, 0x203E
     646:	88 27       	eor	r24, r24
     648:	77 fd       	sbrc	r23, 7
     64a:	80 95       	com	r24
     64c:	98 2f       	mov	r25, r24
     64e:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__floatsisf>
     652:	6b 01       	movw	r12, r22
     654:	7c 01       	movw	r14, r24
     656:	60 91 3f 20 	lds	r22, 0x203F
     65a:	70 91 40 20 	lds	r23, 0x2040
     65e:	88 27       	eor	r24, r24
     660:	77 fd       	sbrc	r23, 7
     662:	80 95       	com	r24
     664:	98 2f       	mov	r25, r24
     666:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__floatsisf>
     66a:	4b 01       	movw	r8, r22
     66c:	5c 01       	movw	r10, r24
     66e:	60 93 c2 20 	sts	0x20C2, r22
     672:	70 93 c3 20 	sts	0x20C3, r23
     676:	80 93 c4 20 	sts	0x20C4, r24
     67a:	90 93 c5 20 	sts	0x20C5, r25
     67e:	2a e0       	ldi	r18, 0x0A	; 10
     680:	37 ed       	ldi	r19, 0xD7	; 215
     682:	43 e2       	ldi	r20, 0x23	; 35
     684:	5c e3       	ldi	r21, 0x3C	; 60
     686:	c7 01       	movw	r24, r14
     688:	b6 01       	movw	r22, r12
     68a:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__mulsf3>
     68e:	6b 01       	movw	r12, r22
     690:	7c 01       	movw	r14, r24
     692:	60 93 c6 20 	sts	0x20C6, r22
     696:	70 93 c7 20 	sts	0x20C7, r23
     69a:	80 93 c8 20 	sts	0x20C8, r24
     69e:	90 93 c9 20 	sts	0x20C9, r25
     6a2:	2a e0       	ldi	r18, 0x0A	; 10
     6a4:	37 ed       	ldi	r19, 0xD7	; 215
     6a6:	43 e2       	ldi	r20, 0x23	; 35
     6a8:	5c e3       	ldi	r21, 0x3C	; 60
     6aa:	c3 01       	movw	r24, r6
     6ac:	b2 01       	movw	r22, r4
     6ae:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <__divsf3>
     6b2:	60 93 ca 20 	sts	0x20CA, r22
     6b6:	70 93 cb 20 	sts	0x20CB, r23
     6ba:	80 93 cc 20 	sts	0x20CC, r24
     6be:	90 93 cd 20 	sts	0x20CD, r25
     6c2:	80 92 f2 20 	sts	0x20F2, r8
     6c6:	90 92 f3 20 	sts	0x20F3, r9
     6ca:	a0 92 f4 20 	sts	0x20F4, r10
     6ce:	b0 92 f5 20 	sts	0x20F5, r11
     6d2:	c0 92 f6 20 	sts	0x20F6, r12
     6d6:	d0 92 f7 20 	sts	0x20F7, r13
     6da:	e0 92 f8 20 	sts	0x20F8, r14
     6de:	f0 92 f9 20 	sts	0x20F9, r15
     6e2:	60 93 fa 20 	sts	0x20FA, r22
     6e6:	70 93 fb 20 	sts	0x20FB, r23
     6ea:	80 93 fc 20 	sts	0x20FC, r24
     6ee:	90 93 fd 20 	sts	0x20FD, r25
     6f2:	80 92 62 20 	sts	0x2062, r8
     6f6:	90 92 63 20 	sts	0x2063, r9
     6fa:	a0 92 64 20 	sts	0x2064, r10
     6fe:	b0 92 65 20 	sts	0x2065, r11
     702:	c0 92 66 20 	sts	0x2066, r12
     706:	d0 92 67 20 	sts	0x2067, r13
     70a:	e0 92 68 20 	sts	0x2068, r14
     70e:	f0 92 69 20 	sts	0x2069, r15
     712:	60 93 6a 20 	sts	0x206A, r22
     716:	70 93 6b 20 	sts	0x206B, r23
     71a:	80 93 6c 20 	sts	0x206C, r24
     71e:	90 93 6d 20 	sts	0x206D, r25
     722:	80 92 92 20 	sts	0x2092, r8
     726:	90 92 93 20 	sts	0x2093, r9
     72a:	a0 92 94 20 	sts	0x2094, r10
     72e:	b0 92 95 20 	sts	0x2095, r11
     732:	c0 92 96 20 	sts	0x2096, r12
     736:	d0 92 97 20 	sts	0x2097, r13
     73a:	e0 92 98 20 	sts	0x2098, r14
     73e:	f0 92 99 20 	sts	0x2099, r15
     742:	60 93 9a 20 	sts	0x209A, r22
     746:	70 93 9b 20 	sts	0x209B, r23
     74a:	80 93 9c 20 	sts	0x209C, r24
     74e:	90 93 9d 20 	sts	0x209D, r25
     752:	ff 90       	pop	r15
     754:	ef 90       	pop	r14
     756:	df 90       	pop	r13
     758:	cf 90       	pop	r12
     75a:	bf 90       	pop	r11
     75c:	af 90       	pop	r10
     75e:	9f 90       	pop	r9
     760:	8f 90       	pop	r8
     762:	7f 90       	pop	r7
     764:	6f 90       	pop	r6
     766:	5f 90       	pop	r5
     768:	4f 90       	pop	r4
     76a:	08 95       	ret

0000076c <_Z21pid_set_speed_handlerPch>:
// Arguments:
//	message := [Wheel1B0, Wheel1B1, Wheel1B2, Wheel1B3, ... ,  Wheel4B0, Wheel4B1, Wheel4B2, Wheel4B3]
//		16 bytes, little endian 32bit numbers that represent the desired wheel speed
//		multiplied by 1000.  Pass a pointer to the low byte of
//	len := the length of the message.  E.g. the number of bytes in the array
void pid_set_speed_handler(char* message, uint8_t len) {
     76c:	ff 92       	push	r15
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
	cli();
     776:	f8 94       	cli
     778:	08 2f       	mov	r16, r24
     77a:	19 2f       	mov	r17, r25

	for(int i = 0; i < 4; i++) pid_setSpeed(uart_int32_to_float(&message[4*i]), (wheelNum)i);
     77c:	c0 e0       	ldi	r28, 0x00	; 0
     77e:	d0 e0       	ldi	r29, 0x00	; 0
	pid_wheel_data &data = wheelData[num];
	return data.AVG_speed;
}

void pid_setSpeed(float speed, wheelNum num) {
	pid_wheel_data &data = wheelData[num];
     780:	0f 2e       	mov	r0, r31
     782:	f0 e3       	ldi	r31, 0x30	; 48
     784:	ff 2e       	mov	r15, r31
     786:	f0 2d       	mov	r31, r0
//		multiplied by 1000.  Pass a pointer to the low byte of
//	len := the length of the message.  E.g. the number of bytes in the array
void pid_set_speed_handler(char* message, uint8_t len) {
	cli();

	for(int i = 0; i < 4; i++) pid_setSpeed(uart_int32_to_float(&message[4*i]), (wheelNum)i);
     788:	c8 01       	movw	r24, r16
     78a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <_Z19uart_int32_to_floatPc>
	pid_wheel_data &data = wheelData[num];
	return data.AVG_speed;
}

void pid_setSpeed(float speed, wheelNum num) {
	pid_wheel_data &data = wheelData[num];
     78e:	cf 9d       	mul	r28, r15
     790:	f0 01       	movw	r30, r0
     792:	11 24       	eor	r1, r1
	data.setpoint = speed;
     794:	ea 5b       	subi	r30, 0xBA	; 186
     796:	ff 4d       	sbci	r31, 0xDF	; 223
     798:	60 8b       	std	Z+16, r22	; 0x10
     79a:	71 8b       	std	Z+17, r23	; 0x11
     79c:	82 8b       	std	Z+18, r24	; 0x12
     79e:	93 8b       	std	Z+19, r25	; 0x13
//		multiplied by 1000.  Pass a pointer to the low byte of
//	len := the length of the message.  E.g. the number of bytes in the array
void pid_set_speed_handler(char* message, uint8_t len) {
	cli();

	for(int i = 0; i < 4; i++) pid_setSpeed(uart_int32_to_float(&message[4*i]), (wheelNum)i);
     7a0:	21 96       	adiw	r28, 0x01	; 1
     7a2:	0c 5f       	subi	r16, 0xFC	; 252
     7a4:	1f 4f       	sbci	r17, 0xFF	; 255
     7a6:	c4 30       	cpi	r28, 0x04	; 4
     7a8:	d1 05       	cpc	r29, r1
     7aa:	71 f7       	brne	.-36     	; 0x788 <_Z21pid_set_speed_handlerPch+0x1c>
	
	sei();
     7ac:	78 94       	sei
}
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	1f 91       	pop	r17
     7b4:	0f 91       	pop	r16
     7b6:	ff 90       	pop	r15
     7b8:	08 95       	ret

000007ba <_Z21pid_get_speed_handlerPch>:

void pid_get_speed_handler(char* message, uint8_t len) {
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
     7c2:	60 97       	sbiw	r28, 0x10	; 16
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	de bf       	out	0x3e, r29	; 62
	data.pid_last_ticks = ticks;
}

float pid_getSpeed(wheelNum num) {
	pid_wheel_data &data = wheelData[num];
	return data.AVG_speed;
     7c8:	40 91 a6 20 	lds	r20, 0x20A6
     7cc:	50 91 a7 20 	lds	r21, 0x20A7
     7d0:	60 91 a8 20 	lds	r22, 0x20A8
     7d4:	70 91 a9 20 	lds	r23, 0x20A9
	sei();
}

void pid_get_speed_handler(char* message, uint8_t len) {
	char wheelSpeeds[16];
	uart_float_to_char32((char*)&wheelSpeeds[8], pid_getSpeed(WHEEL_RF));
     7d8:	ce 01       	movw	r24, r28
     7da:	09 96       	adiw	r24, 0x09	; 9
     7dc:	0e 94 22 0c 	call	0x1844	; 0x1844 <_Z20uart_float_to_char32Pcf>
	data.pid_last_ticks = ticks;
}

float pid_getSpeed(wheelNum num) {
	pid_wheel_data &data = wheelData[num];
	return data.AVG_speed;
     7e0:	40 91 d6 20 	lds	r20, 0x20D6
     7e4:	50 91 d7 20 	lds	r21, 0x20D7
     7e8:	60 91 d8 20 	lds	r22, 0x20D8
     7ec:	70 91 d9 20 	lds	r23, 0x20D9
}

void pid_get_speed_handler(char* message, uint8_t len) {
	char wheelSpeeds[16];
	uart_float_to_char32((char*)&wheelSpeeds[8], pid_getSpeed(WHEEL_RF));
	uart_float_to_char32((char*)&wheelSpeeds[12], pid_getSpeed(WHEEL_RR));	
     7f0:	ce 01       	movw	r24, r28
     7f2:	0d 96       	adiw	r24, 0x0d	; 13
     7f4:	0e 94 22 0c 	call	0x1844	; 0x1844 <_Z20uart_float_to_char32Pcf>
	data.pid_last_ticks = ticks;
}

float pid_getSpeed(wheelNum num) {
	pid_wheel_data &data = wheelData[num];
	return data.AVG_speed;
     7f8:	40 91 46 20 	lds	r20, 0x2046
     7fc:	50 91 47 20 	lds	r21, 0x2047
     800:	60 91 48 20 	lds	r22, 0x2048
     804:	70 91 49 20 	lds	r23, 0x2049

void pid_get_speed_handler(char* message, uint8_t len) {
	char wheelSpeeds[16];
	uart_float_to_char32((char*)&wheelSpeeds[8], pid_getSpeed(WHEEL_RF));
	uart_float_to_char32((char*)&wheelSpeeds[12], pid_getSpeed(WHEEL_RR));	
	uart_float_to_char32((char*)&wheelSpeeds[0], pid_getSpeed(WHEEL_LF));
     808:	ce 01       	movw	r24, r28
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	0e 94 22 0c 	call	0x1844	; 0x1844 <_Z20uart_float_to_char32Pcf>
	data.pid_last_ticks = ticks;
}

float pid_getSpeed(wheelNum num) {
	pid_wheel_data &data = wheelData[num];
	return data.AVG_speed;
     810:	40 91 76 20 	lds	r20, 0x2076
     814:	50 91 77 20 	lds	r21, 0x2077
     818:	60 91 78 20 	lds	r22, 0x2078
     81c:	70 91 79 20 	lds	r23, 0x2079
void pid_get_speed_handler(char* message, uint8_t len) {
	char wheelSpeeds[16];
	uart_float_to_char32((char*)&wheelSpeeds[8], pid_getSpeed(WHEEL_RF));
	uart_float_to_char32((char*)&wheelSpeeds[12], pid_getSpeed(WHEEL_RR));	
	uart_float_to_char32((char*)&wheelSpeeds[0], pid_getSpeed(WHEEL_LF));
	uart_float_to_char32((char*)&wheelSpeeds[4], pid_getSpeed(WHEEL_LR));
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	0e 94 22 0c 	call	0x1844	; 0x1844 <_Z20uart_float_to_char32Pcf>

	
	uart_send_msg_block(PIDgetSpeed, wheelSpeeds, 17);
     828:	41 e1       	ldi	r20, 0x11	; 17
     82a:	be 01       	movw	r22, r28
     82c:	6f 5f       	subi	r22, 0xFF	; 255
     82e:	7f 4f       	sbci	r23, 0xFF	; 255
     830:	88 e0       	ldi	r24, 0x08	; 8
     832:	a8 d7       	rcall	.+3920   	; 0x1784 <_Z19uart_send_msg_blockhPch>
}
     834:	60 96       	adiw	r28, 0x10	; 16
     836:	cd bf       	out	0x3d, r28	; 61
     838:	de bf       	out	0x3e, r29	; 62
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	08 95       	ret

00000840 <_Z22pid_set_tuning_handlerPch>:

void pid_set_tuning_handler(char* message, uint8_t len){
     840:	4f 92       	push	r4
     842:	5f 92       	push	r5
     844:	6f 92       	push	r6
     846:	7f 92       	push	r7
     848:	8f 92       	push	r8
     84a:	9f 92       	push	r9
     84c:	af 92       	push	r10
     84e:	bf 92       	push	r11
     850:	cf 92       	push	r12
     852:	df 92       	push	r13
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	ec 01       	movw	r28, r24
	constP = (int)(message[0]);
     85e:	88 81       	ld	r24, Y
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	80 93 3f 20 	sts	0x203F, r24
     866:	90 93 40 20 	sts	0x2040, r25
	constI = uart_int32_to_float(&message[8])/10000;
     86a:	ce 01       	movw	r24, r28
     86c:	08 96       	adiw	r24, 0x08	; 8
     86e:	c0 d7       	rcall	.+3968   	; 0x17f0 <_Z19uart_int32_to_floatPc>
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e4       	ldi	r19, 0x40	; 64
     874:	4c e1       	ldi	r20, 0x1C	; 28
     876:	56 e4       	ldi	r21, 0x46	; 70
     878:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <__divsf3>
     87c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <__fixsfsi>
     880:	6b 01       	movw	r12, r22
     882:	7c 01       	movw	r14, r24
     884:	60 93 3d 20 	sts	0x203D, r22
     888:	70 93 3e 20 	sts	0x203E, r23
	constD = (int)(message[4]);
     88c:	6c 81       	ldd	r22, Y+4	; 0x04
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__floatsisf>
     898:	2b 01       	movw	r4, r22
     89a:	3c 01       	movw	r6, r24
     89c:	60 93 39 20 	sts	0x2039, r22
     8a0:	70 93 3a 20 	sts	0x203A, r23
     8a4:	80 93 3b 20 	sts	0x203B, r24
     8a8:	90 93 3c 20 	sts	0x203C, r25
	pid_setTunings(constP, constI, constD, WHEEL_RF);
     8ac:	60 91 3f 20 	lds	r22, 0x203F
     8b0:	70 91 40 20 	lds	r23, 0x2040
     8b4:	88 27       	eor	r24, r24
     8b6:	77 fd       	sbrc	r23, 7
     8b8:	80 95       	com	r24
     8ba:	98 2f       	mov	r25, r24
     8bc:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__floatsisf>
     8c0:	4b 01       	movw	r8, r22
     8c2:	5c 01       	movw	r10, r24
	data.lastErr = error;
}

void pid_setTunings(float Kp, float Ki, float Kd, wheelNum num) {
	pid_wheel_data &data = wheelData[num];
	data.kp = Kp;
     8c4:	60 93 c2 20 	sts	0x20C2, r22
     8c8:	70 93 c3 20 	sts	0x20C3, r23
     8cc:	80 93 c4 20 	sts	0x20C4, r24
     8d0:	90 93 c5 20 	sts	0x20C5, r25

void pid_set_tuning_handler(char* message, uint8_t len){
	constP = (int)(message[0]);
	constI = uart_int32_to_float(&message[8])/10000;
	constD = (int)(message[4]);
	pid_setTunings(constP, constI, constD, WHEEL_RF);
     8d4:	b6 01       	movw	r22, r12
     8d6:	88 27       	eor	r24, r24
     8d8:	77 fd       	sbrc	r23, 7
     8da:	80 95       	com	r24
     8dc:	98 2f       	mov	r25, r24
     8de:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__floatsisf>
}

void pid_setTunings(float Kp, float Ki, float Kd, wheelNum num) {
	pid_wheel_data &data = wheelData[num];
	data.kp = Kp;
	data.ki = Ki*sampleTime;
     8e2:	2a e0       	ldi	r18, 0x0A	; 10
     8e4:	37 ed       	ldi	r19, 0xD7	; 215
     8e6:	43 e2       	ldi	r20, 0x23	; 35
     8e8:	5c e3       	ldi	r21, 0x3C	; 60
     8ea:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__mulsf3>
     8ee:	6b 01       	movw	r12, r22
     8f0:	7c 01       	movw	r14, r24
     8f2:	60 93 c6 20 	sts	0x20C6, r22
     8f6:	70 93 c7 20 	sts	0x20C7, r23
     8fa:	80 93 c8 20 	sts	0x20C8, r24
     8fe:	90 93 c9 20 	sts	0x20C9, r25
	data.kd = Kd/sampleTime;
     902:	2a e0       	ldi	r18, 0x0A	; 10
     904:	37 ed       	ldi	r19, 0xD7	; 215
     906:	43 e2       	ldi	r20, 0x23	; 35
     908:	5c e3       	ldi	r21, 0x3C	; 60
     90a:	c3 01       	movw	r24, r6
     90c:	b2 01       	movw	r22, r4
     90e:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <__divsf3>
     912:	60 93 ca 20 	sts	0x20CA, r22
     916:	70 93 cb 20 	sts	0x20CB, r23
     91a:	80 93 cc 20 	sts	0x20CC, r24
     91e:	90 93 cd 20 	sts	0x20CD, r25
	data.lastErr = error;
}

void pid_setTunings(float Kp, float Ki, float Kd, wheelNum num) {
	pid_wheel_data &data = wheelData[num];
	data.kp = Kp;
     922:	80 92 f2 20 	sts	0x20F2, r8
     926:	90 92 f3 20 	sts	0x20F3, r9
     92a:	a0 92 f4 20 	sts	0x20F4, r10
     92e:	b0 92 f5 20 	sts	0x20F5, r11
	data.ki = Ki*sampleTime;
     932:	c0 92 f6 20 	sts	0x20F6, r12
     936:	d0 92 f7 20 	sts	0x20F7, r13
     93a:	e0 92 f8 20 	sts	0x20F8, r14
     93e:	f0 92 f9 20 	sts	0x20F9, r15
	data.kd = Kd/sampleTime;
     942:	60 93 fa 20 	sts	0x20FA, r22
     946:	70 93 fb 20 	sts	0x20FB, r23
     94a:	80 93 fc 20 	sts	0x20FC, r24
     94e:	90 93 fd 20 	sts	0x20FD, r25
	data.lastErr = error;
}

void pid_setTunings(float Kp, float Ki, float Kd, wheelNum num) {
	pid_wheel_data &data = wheelData[num];
	data.kp = Kp;
     952:	80 92 62 20 	sts	0x2062, r8
     956:	90 92 63 20 	sts	0x2063, r9
     95a:	a0 92 64 20 	sts	0x2064, r10
     95e:	b0 92 65 20 	sts	0x2065, r11
	data.ki = Ki*sampleTime;
     962:	c0 92 66 20 	sts	0x2066, r12
     966:	d0 92 67 20 	sts	0x2067, r13
     96a:	e0 92 68 20 	sts	0x2068, r14
     96e:	f0 92 69 20 	sts	0x2069, r15
	data.kd = Kd/sampleTime;
     972:	60 93 6a 20 	sts	0x206A, r22
     976:	70 93 6b 20 	sts	0x206B, r23
     97a:	80 93 6c 20 	sts	0x206C, r24
     97e:	90 93 6d 20 	sts	0x206D, r25
	data.lastErr = error;
}

void pid_setTunings(float Kp, float Ki, float Kd, wheelNum num) {
	pid_wheel_data &data = wheelData[num];
	data.kp = Kp;
     982:	80 92 92 20 	sts	0x2092, r8
     986:	90 92 93 20 	sts	0x2093, r9
     98a:	a0 92 94 20 	sts	0x2094, r10
     98e:	b0 92 95 20 	sts	0x2095, r11
	data.ki = Ki*sampleTime;
     992:	c0 92 96 20 	sts	0x2096, r12
     996:	d0 92 97 20 	sts	0x2097, r13
     99a:	e0 92 98 20 	sts	0x2098, r14
     99e:	f0 92 99 20 	sts	0x2099, r15
	data.kd = Kd/sampleTime;
     9a2:	60 93 9a 20 	sts	0x209A, r22
     9a6:	70 93 9b 20 	sts	0x209B, r23
     9aa:	80 93 9c 20 	sts	0x209C, r24
     9ae:	90 93 9d 20 	sts	0x209D, r25
	pid_setTunings(constP, constI, constD, WHEEL_RF);
	pid_setTunings(constP, constI, constD, WHEEL_RR);	
	pid_setTunings(constP, constI, constD, WHEEL_LF);
	pid_setTunings(constP, constI, constD, WHEEL_LR);

}
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	9f 90       	pop	r9
     9c4:	8f 90       	pop	r8
     9c6:	7f 90       	pop	r7
     9c8:	6f 90       	pop	r6
     9ca:	5f 90       	pop	r5
     9cc:	4f 90       	pop	r4
     9ce:	08 95       	ret

000009d0 <_Z24pid_get_odometry_handlerPch>:
		
		data.odometry_last_ticks = ticks;
	}
}

void pid_get_odometry_handler(char* message, uint8_t len) {
     9d0:	8f 92       	push	r8
     9d2:	9f 92       	push	r9
     9d4:	af 92       	push	r10
     9d6:	bf 92       	push	r11
     9d8:	cf 92       	push	r12
     9da:	df 92       	push	r13
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	cd b7       	in	r28, 0x3d	; 61
     9ea:	de b7       	in	r29, 0x3e	; 62
     9ec:	a8 97       	sbiw	r28, 0x28	; 40
     9ee:	cd bf       	out	0x3d, r28	; 61
     9f0:	de bf       	out	0x3e, r29	; 62
     9f2:	06 e4       	ldi	r16, 0x46	; 70
     9f4:	10 e2       	ldi	r17, 0x20	; 32
     9f6:	0f 2e       	mov	r0, r31
     9f8:	f6 e0       	ldi	r31, 0x06	; 6
     9fa:	8f 2e       	mov	r8, r31
     9fc:	f1 e2       	ldi	r31, 0x21	; 33
     9fe:	9f 2e       	mov	r9, r31
     a00:	f0 2d       	mov	r31, r0
     a02:	9e 01       	movw	r18, r28
     a04:	2f 5f       	subi	r18, 0xFF	; 255
     a06:	3f 4f       	sbci	r19, 0xFF	; 255
     a08:	59 01       	movw	r10, r18

static void pid_get_odometry(float* returnData) {
	for(int i = 0; i < 4; i++) {
		pid_wheel_data &data = wheelData[i];
		
		cli();
     a0a:	f8 94       	cli
		int32_t ticks = data.ticks;
     a0c:	f8 01       	movw	r30, r16
     a0e:	c4 80       	ldd	r12, Z+4	; 0x04
     a10:	d5 80       	ldd	r13, Z+5	; 0x05
     a12:	e6 80       	ldd	r14, Z+6	; 0x06
     a14:	f7 80       	ldd	r15, Z+7	; 0x07
		sei();
     a16:	78 94       	sei
		
		volatile int32_t tmp = ticks - data.odometry_last_ticks;
     a18:	f8 01       	movw	r30, r16
     a1a:	84 a5       	ldd	r24, Z+44	; 0x2c
     a1c:	95 a5       	ldd	r25, Z+45	; 0x2d
     a1e:	a6 a5       	ldd	r26, Z+46	; 0x2e
     a20:	b7 a5       	ldd	r27, Z+47	; 0x2f
     a22:	a7 01       	movw	r20, r14
     a24:	96 01       	movw	r18, r12
     a26:	28 1b       	sub	r18, r24
     a28:	39 0b       	sbc	r19, r25
     a2a:	4a 0b       	sbc	r20, r26
     a2c:	5b 0b       	sbc	r21, r27
     a2e:	2d a3       	std	Y+37, r18	; 0x25
     a30:	3e a3       	std	Y+38, r19	; 0x26
     a32:	4f a3       	std	Y+39, r20	; 0x27
     a34:	58 a7       	std	Y+40, r21	; 0x28
		volatile float tmp2 = tmp * radPerTick;
     a36:	6d a1       	ldd	r22, Y+37	; 0x25
     a38:	7e a1       	ldd	r23, Y+38	; 0x26
     a3a:	8f a1       	ldd	r24, Y+39	; 0x27
     a3c:	98 a5       	ldd	r25, Y+40	; 0x28
     a3e:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__floatsisf>
     a42:	20 91 35 20 	lds	r18, 0x2035
     a46:	30 91 36 20 	lds	r19, 0x2036
     a4a:	40 91 37 20 	lds	r20, 0x2037
     a4e:	50 91 38 20 	lds	r21, 0x2038
     a52:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__mulsf3>
     a56:	69 a3       	std	Y+33, r22	; 0x21
     a58:	7a a3       	std	Y+34, r23	; 0x22
     a5a:	8b a3       	std	Y+35, r24	; 0x23
     a5c:	9c a3       	std	Y+36, r25	; 0x24
		
		returnData[i] = tmp2;
     a5e:	89 a1       	ldd	r24, Y+33	; 0x21
     a60:	9a a1       	ldd	r25, Y+34	; 0x22
     a62:	ab a1       	ldd	r26, Y+35	; 0x23
     a64:	bc a1       	ldd	r27, Y+36	; 0x24
     a66:	f5 01       	movw	r30, r10
     a68:	81 93       	st	Z+, r24
     a6a:	91 93       	st	Z+, r25
     a6c:	a1 93       	st	Z+, r26
     a6e:	b1 93       	st	Z+, r27
     a70:	5f 01       	movw	r10, r30
		
		data.odometry_last_ticks = ticks;
     a72:	f8 01       	movw	r30, r16
     a74:	c4 a6       	std	Z+44, r12	; 0x2c
     a76:	d5 a6       	std	Z+45, r13	; 0x2d
     a78:	e6 a6       	std	Z+46, r14	; 0x2e
     a7a:	f7 a6       	std	Z+47, r15	; 0x2f
     a7c:	00 5d       	subi	r16, 0xD0	; 208
     a7e:	1f 4f       	sbci	r17, 0xFF	; 255

}


static void pid_get_odometry(float* returnData) {
	for(int i = 0; i < 4; i++) {
     a80:	08 15       	cp	r16, r8
     a82:	19 05       	cpc	r17, r9
     a84:	09 f0       	breq	.+2      	; 0xa88 <_Z24pid_get_odometry_handlerPch+0xb8>
     a86:	c1 cf       	rjmp	.-126    	; 0xa0a <_Z24pid_get_odometry_handlerPch+0x3a>
     a88:	8e 01       	movw	r16, r28
     a8a:	0f 5f       	subi	r16, 0xFF	; 255
     a8c:	1f 4f       	sbci	r17, 0xFF	; 255
     a8e:	6e 01       	movw	r12, r28
     a90:	f1 e1       	ldi	r31, 0x11	; 17
     a92:	cf 0e       	add	r12, r31
     a94:	d1 1c       	adc	r13, r1
     a96:	78 01       	movw	r14, r16
     a98:	20 e1       	ldi	r18, 0x10	; 16
     a9a:	e2 0e       	add	r14, r18
     a9c:	f1 1c       	adc	r15, r1
	char odometry[16];
	float wheelOdometry[4];
	pid_get_odometry(wheelOdometry);
	
	for(int i = 0; i < 4; i++) {
		uart_float_to_char32(odometry+i*4, wheelOdometry[i]);
     a9e:	f8 01       	movw	r30, r16
     aa0:	41 91       	ld	r20, Z+
     aa2:	51 91       	ld	r21, Z+
     aa4:	61 91       	ld	r22, Z+
     aa6:	71 91       	ld	r23, Z+
     aa8:	8f 01       	movw	r16, r30
     aaa:	c6 01       	movw	r24, r12
     aac:	cb d6       	rcall	.+3478   	; 0x1844 <_Z20uart_float_to_char32Pcf>
     aae:	f4 e0       	ldi	r31, 0x04	; 4
     ab0:	cf 0e       	add	r12, r31
     ab2:	d1 1c       	adc	r13, r1

	char odometry[16];
	float wheelOdometry[4];
	pid_get_odometry(wheelOdometry);
	
	for(int i = 0; i < 4; i++) {
     ab4:	0e 15       	cp	r16, r14
     ab6:	1f 05       	cpc	r17, r15
     ab8:	91 f7       	brne	.-28     	; 0xa9e <_Z24pid_get_odometry_handlerPch+0xce>
		uart_float_to_char32(odometry+i*4, wheelOdometry[i]);
	}

	uart_send_msg_block(PIDgetOdometry, odometry, 17);
     aba:	41 e1       	ldi	r20, 0x11	; 17
     abc:	be 01       	movw	r22, r28
     abe:	6f 5e       	subi	r22, 0xEF	; 239
     ac0:	7f 4f       	sbci	r23, 0xFF	; 255
     ac2:	85 e0       	ldi	r24, 0x05	; 5
     ac4:	5f d6       	rcall	.+3262   	; 0x1784 <_Z19uart_send_msg_blockhPch>

}
     ac6:	a8 96       	adiw	r28, 0x28	; 40
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	df 90       	pop	r13
     ada:	cf 90       	pop	r12
     adc:	bf 90       	pop	r11
     ade:	af 90       	pop	r10
     ae0:	9f 90       	pop	r9
     ae2:	8f 90       	pop	r8
     ae4:	08 95       	ret

00000ae6 <_Z32pid_get_speed_multiplier_handlerPch>:
	return radPerTick;
}

// Because the multiplier is a floating point value, we'll multiply it by 1000 first, and then send it.
// Or, if we're receiving it, we'll divide it by 1000.
void pid_get_speed_multiplier_handler(char* message, uint8_t len) {
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	1f 92       	push	r1
     aec:	1f 92       	push	r1
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
	char multiplier[2];
	uart_float_to_char16(multiplier, pid_get_speed_multiplier());
     af2:	40 91 35 20 	lds	r20, 0x2035
     af6:	50 91 36 20 	lds	r21, 0x2036
     afa:	60 91 37 20 	lds	r22, 0x2037
     afe:	70 91 38 20 	lds	r23, 0x2038
     b02:	ce 01       	movw	r24, r28
     b04:	01 96       	adiw	r24, 0x01	; 1
     b06:	b1 d6       	rcall	.+3426   	; 0x186a <_Z20uart_float_to_char16Pcf>
	uart_send_msg_block(PIDgetMultiplier, multiplier, 3);
     b08:	43 e0       	ldi	r20, 0x03	; 3
     b0a:	be 01       	movw	r22, r28
     b0c:	6f 5f       	subi	r22, 0xFF	; 255
     b0e:	7f 4f       	sbci	r23, 0xFF	; 255
     b10:	87 e0       	ldi	r24, 0x07	; 7
     b12:	38 d6       	rcall	.+3184   	; 0x1784 <_Z19uart_send_msg_blockhPch>
}
     b14:	0f 90       	pop	r0
     b16:	0f 90       	pop	r0
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	08 95       	ret

00000b1e <_Z32pid_set_speed_multiplier_handlerPch>:

void pid_set_speed_multiplier_handler(char* message, uint8_t len) {
	pid_set_speed_multiplier(uart_int16_to_float(message));
     b1e:	80 d6       	rcall	.+3328   	; 0x1820 <_Z19uart_int16_to_floatPc>
	uart_send_msg_block(PIDgetOdometry, odometry, 17);

}

static inline void pid_set_speed_multiplier(float val) {
	radPerTick = val;
     b20:	60 93 35 20 	sts	0x2035, r22
     b24:	70 93 36 20 	sts	0x2036, r23
     b28:	80 93 37 20 	sts	0x2037, r24
     b2c:	90 93 38 20 	sts	0x2038, r25
     b30:	08 95       	ret

00000b32 <__vector_14>:
void pid_set_speed_multiplier_handler(char* message, uint8_t len) {
	pid_set_speed_multiplier(uart_int16_to_float(message));
}

int count = 0;
ISR(PID_TICK_OVF) {
     b32:	1f 92       	push	r1
     b34:	0f 92       	push	r0
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	0f 92       	push	r0
     b3a:	11 24       	eor	r1, r1
     b3c:	08 b6       	in	r0, 0x38	; 56
     b3e:	0f 92       	push	r0
     b40:	18 be       	out	0x38, r1	; 56
     b42:	09 b6       	in	r0, 0x39	; 57
     b44:	0f 92       	push	r0
     b46:	19 be       	out	0x39, r1	; 57
     b48:	0b b6       	in	r0, 0x3b	; 59
     b4a:	0f 92       	push	r0
     b4c:	1b be       	out	0x3b, r1	; 59
     b4e:	2f 93       	push	r18
     b50:	3f 93       	push	r19
     b52:	4f 93       	push	r20
     b54:	5f 93       	push	r21
     b56:	6f 93       	push	r22
     b58:	7f 93       	push	r23
     b5a:	8f 93       	push	r24
     b5c:	9f 93       	push	r25
     b5e:	af 93       	push	r26
     b60:	bf 93       	push	r27
     b62:	ef 93       	push	r30
     b64:	ff 93       	push	r31
	pid_measureSpeed(WHEEL_RF);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	e4 dc       	rcall	.-1592   	; 0x532 <_ZL16pid_measureSpeed8wheelNum>
	pid_measureSpeed(WHEEL_RR);
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	e2 dc       	rcall	.-1596   	; 0x532 <_ZL16pid_measureSpeed8wheelNum>
	pid_measureSpeed(WHEEL_LF);
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	e0 dc       	rcall	.-1600   	; 0x532 <_ZL16pid_measureSpeed8wheelNum>
	pid_measureSpeed(WHEEL_LR);
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	de dc       	rcall	.-1604   	; 0x532 <_ZL16pid_measureSpeed8wheelNum>

	pid_compute(WHEEL_RF);
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	16 dc       	rcall	.-2004   	; 0x3a6 <_ZL11pid_compute8wheelNum>
	pid_compute(WHEEL_RR);
     b7a:	83 e0       	ldi	r24, 0x03	; 3
     b7c:	14 dc       	rcall	.-2008   	; 0x3a6 <_ZL11pid_compute8wheelNum>
	pid_compute(WHEEL_LF);
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	12 dc       	rcall	.-2012   	; 0x3a6 <_ZL11pid_compute8wheelNum>
	pid_compute(WHEEL_LR);
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	10 dc       	rcall	.-2016   	; 0x3a6 <_ZL11pid_compute8wheelNum>
	pololu_set_velocity(&pololu_RF, wheelData[WHEEL_RF].output);
     b86:	40 91 b2 20 	lds	r20, 0x20B2
     b8a:	50 91 b3 20 	lds	r21, 0x20B3
     b8e:	60 91 b4 20 	lds	r22, 0x20B4
     b92:	70 91 b5 20 	lds	r23, 0x20B5
     b96:	89 e2       	ldi	r24, 0x29	; 41
     b98:	90 e2       	ldi	r25, 0x20	; 32
     b9a:	88 d3       	rcall	.+1808   	; 0x12ac <_Z19pololu_set_velocityP12pololu_low_tf>
	pololu_set_velocity(&pololu_RR, wheelData[WHEEL_RR].output);
     b9c:	40 91 e2 20 	lds	r20, 0x20E2
     ba0:	50 91 e3 20 	lds	r21, 0x20E3
     ba4:	60 91 e4 20 	lds	r22, 0x20E4
     ba8:	70 91 e5 20 	lds	r23, 0x20E5
     bac:	85 e2       	ldi	r24, 0x25	; 37
     bae:	90 e2       	ldi	r25, 0x20	; 32
     bb0:	26 d3       	rcall	.+1612   	; 0x11fe <_Z19pololu_set_velocityP13pololu_high_tf>
	pololu_set_velocity(&pololu_LF, wheelData[WHEEL_LF].output);
     bb2:	40 91 52 20 	lds	r20, 0x2052
     bb6:	50 91 53 20 	lds	r21, 0x2053
     bba:	60 91 54 20 	lds	r22, 0x2054
     bbe:	70 91 55 20 	lds	r23, 0x2055
     bc2:	81 e3       	ldi	r24, 0x31	; 49
     bc4:	90 e2       	ldi	r25, 0x20	; 32
     bc6:	72 d3       	rcall	.+1764   	; 0x12ac <_Z19pololu_set_velocityP12pololu_low_tf>
	pololu_set_velocity(&pololu_LR, wheelData[WHEEL_LR].output);
     bc8:	40 91 82 20 	lds	r20, 0x2082
     bcc:	50 91 83 20 	lds	r21, 0x2083
     bd0:	60 91 84 20 	lds	r22, 0x2084
     bd4:	70 91 85 20 	lds	r23, 0x2085
     bd8:	8d e2       	ldi	r24, 0x2D	; 45
     bda:	90 e2       	ldi	r25, 0x20	; 32
     bdc:	10 d3       	rcall	.+1568   	; 0x11fe <_Z19pololu_set_velocityP13pololu_high_tf>

}
     bde:	ff 91       	pop	r31
     be0:	ef 91       	pop	r30
     be2:	bf 91       	pop	r27
     be4:	af 91       	pop	r26
     be6:	9f 91       	pop	r25
     be8:	8f 91       	pop	r24
     bea:	7f 91       	pop	r23
     bec:	6f 91       	pop	r22
     bee:	5f 91       	pop	r21
     bf0:	4f 91       	pop	r20
     bf2:	3f 91       	pop	r19
     bf4:	2f 91       	pop	r18
     bf6:	0f 90       	pop	r0
     bf8:	0b be       	out	0x3b, r0	; 59
     bfa:	0f 90       	pop	r0
     bfc:	09 be       	out	0x39, r0	; 57
     bfe:	0f 90       	pop	r0
     c00:	08 be       	out	0x38, r0	; 56
     c02:	0f 90       	pop	r0
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	0f 90       	pop	r0
     c08:	1f 90       	pop	r1
     c0a:	18 95       	reti

00000c0c <_Z12grayToBinaryj>:

unsigned int grayToBinary(unsigned int num)
{
	unsigned int mask;
	for (mask = num >> 1; mask != 0; mask = mask >> 1)
     c0c:	9c 01       	movw	r18, r24
     c0e:	36 95       	lsr	r19
     c10:	27 95       	ror	r18
     c12:	21 15       	cp	r18, r1
     c14:	31 05       	cpc	r19, r1
     c16:	39 f0       	breq	.+14     	; 0xc26 <_Z12grayToBinaryj+0x1a>
	{
		num = num ^ mask;
     c18:	82 27       	eor	r24, r18
     c1a:	93 27       	eor	r25, r19
}

unsigned int grayToBinary(unsigned int num)
{
	unsigned int mask;
	for (mask = num >> 1; mask != 0; mask = mask >> 1)
     c1c:	36 95       	lsr	r19
     c1e:	27 95       	ror	r18
     c20:	21 15       	cp	r18, r1
     c22:	31 05       	cpc	r19, r1
     c24:	c9 f7       	brne	.-14     	; 0xc18 <_Z12grayToBinaryj+0xc>
	{
		num = num ^ mask;
	}
	return num;
}
     c26:	08 95       	ret

00000c28 <__vector_66>:


//Left Front
ISR(PORTA_INT0_vect){
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
     c32:	08 b6       	in	r0, 0x38	; 56
     c34:	0f 92       	push	r0
     c36:	18 be       	out	0x38, r1	; 56
     c38:	09 b6       	in	r0, 0x39	; 57
     c3a:	0f 92       	push	r0
     c3c:	19 be       	out	0x39, r1	; 57
     c3e:	0b b6       	in	r0, 0x3b	; 59
     c40:	0f 92       	push	r0
     c42:	1b be       	out	0x3b, r1	; 59
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	2f 93       	push	r18
     c4a:	3f 93       	push	r19
     c4c:	4f 93       	push	r20
     c4e:	5f 93       	push	r21
     c50:	6f 93       	push	r22
     c52:	7f 93       	push	r23
     c54:	8f 93       	push	r24
     c56:	9f 93       	push	r25
     c58:	af 93       	push	r26
     c5a:	bf 93       	push	r27
     c5c:	ef 93       	push	r30
     c5e:	ff 93       	push	r31
	// pins 2 and 4
	static int8_t old_value = 0;
	//int8_t new_value = grayToBinary(((wheelPort2.IN & 4) >> 1) | (wheelPort2.IN & 1));
	int8_t new_value = grayToBinary(((wheelPort1.IN & 0x10) >> 3) | (wheelPort1.IN & 0x04) >> 2);
     c60:	e0 e0       	ldi	r30, 0x00	; 0
     c62:	f6 e0       	ldi	r31, 0x06	; 6
     c64:	80 85       	ldd	r24, Z+8	; 0x08
     c66:	90 85       	ldd	r25, Z+8	; 0x08
     c68:	92 fb       	bst	r25, 2
     c6a:	22 27       	eor	r18, r18
     c6c:	20 f9       	bld	r18, 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	80 71       	andi	r24, 0x10	; 16
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	95 95       	asr	r25
     c76:	87 95       	ror	r24
     c78:	95 95       	asr	r25
     c7a:	87 95       	ror	r24
     c7c:	95 95       	asr	r25
     c7e:	87 95       	ror	r24
     c80:	82 2b       	or	r24, r18
     c82:	93 2b       	or	r25, r19
     c84:	c3 df       	rcall	.-122    	; 0xc0c <_Z12grayToBinaryj>
	int8_t difference = new_value - old_value;
     c86:	90 91 45 20 	lds	r25, 0x2045
     c8a:	28 2f       	mov	r18, r24
     c8c:	29 1b       	sub	r18, r25
     c8e:	42 2f       	mov	r20, r18
	if(difference > 2) difference -= 4;
     c90:	23 30       	cpi	r18, 0x03	; 3
     c92:	14 f0       	brlt	.+4      	; 0xc98 <__vector_66+0x70>
     c94:	4c ef       	ldi	r20, 0xFC	; 252
     c96:	42 0f       	add	r20, r18
	if(difference < -2) difference += 4;
     c98:	4e 3f       	cpi	r20, 0xFE	; 254
     c9a:	0c f4       	brge	.+2      	; 0xc9e <__vector_66+0x76>
     c9c:	4c 5f       	subi	r20, 0xFC	; 252
	
	wheelData[WHEEL_LF].ticks += difference;
     c9e:	ea e4       	ldi	r30, 0x4A	; 74
     ca0:	f0 e2       	ldi	r31, 0x20	; 32
     ca2:	00 81       	ld	r16, Z
     ca4:	11 81       	ldd	r17, Z+1	; 0x01
     ca6:	22 81       	ldd	r18, Z+2	; 0x02
     ca8:	33 81       	ldd	r19, Z+3	; 0x03
     caa:	55 27       	eor	r21, r21
     cac:	47 fd       	sbrc	r20, 7
     cae:	50 95       	com	r21
     cb0:	65 2f       	mov	r22, r21
     cb2:	75 2f       	mov	r23, r21
     cb4:	40 0f       	add	r20, r16
     cb6:	51 1f       	adc	r21, r17
     cb8:	62 1f       	adc	r22, r18
     cba:	73 1f       	adc	r23, r19
     cbc:	40 83       	st	Z, r20
     cbe:	51 83       	std	Z+1, r21	; 0x01
     cc0:	62 83       	std	Z+2, r22	; 0x02
     cc2:	73 83       	std	Z+3, r23	; 0x03
	
	old_value = new_value;
     cc4:	80 93 45 20 	sts	0x2045, r24
	
}
     cc8:	ff 91       	pop	r31
     cca:	ef 91       	pop	r30
     ccc:	bf 91       	pop	r27
     cce:	af 91       	pop	r26
     cd0:	9f 91       	pop	r25
     cd2:	8f 91       	pop	r24
     cd4:	7f 91       	pop	r23
     cd6:	6f 91       	pop	r22
     cd8:	5f 91       	pop	r21
     cda:	4f 91       	pop	r20
     cdc:	3f 91       	pop	r19
     cde:	2f 91       	pop	r18
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	0f 90       	pop	r0
     ce6:	0b be       	out	0x3b, r0	; 59
     ce8:	0f 90       	pop	r0
     cea:	09 be       	out	0x39, r0	; 57
     cec:	0f 90       	pop	r0
     cee:	08 be       	out	0x38, r0	; 56
     cf0:	0f 90       	pop	r0
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	0f 90       	pop	r0
     cf6:	1f 90       	pop	r1
     cf8:	18 95       	reti

00000cfa <__vector_67>:

//Left Rear
ISR(PORTA_INT1_vect){
     cfa:	1f 92       	push	r1
     cfc:	0f 92       	push	r0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	0f 92       	push	r0
     d02:	11 24       	eor	r1, r1
     d04:	08 b6       	in	r0, 0x38	; 56
     d06:	0f 92       	push	r0
     d08:	18 be       	out	0x38, r1	; 56
     d0a:	09 b6       	in	r0, 0x39	; 57
     d0c:	0f 92       	push	r0
     d0e:	19 be       	out	0x39, r1	; 57
     d10:	0b b6       	in	r0, 0x3b	; 59
     d12:	0f 92       	push	r0
     d14:	1b be       	out	0x3b, r1	; 59
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	2f 93       	push	r18
     d1c:	3f 93       	push	r19
     d1e:	4f 93       	push	r20
     d20:	5f 93       	push	r21
     d22:	6f 93       	push	r22
     d24:	7f 93       	push	r23
     d26:	8f 93       	push	r24
     d28:	9f 93       	push	r25
     d2a:	af 93       	push	r26
     d2c:	bf 93       	push	r27
     d2e:	ef 93       	push	r30
     d30:	ff 93       	push	r31
	
	// pins 1 and 3
	static int8_t old_value = 0;
	int8_t new_value = grayToBinary(((wheelPort1.IN & 8) >> 2) | (wheelPort1.IN & 2) >> 1);
     d32:	e0 e0       	ldi	r30, 0x00	; 0
     d34:	f6 e0       	ldi	r31, 0x06	; 6
     d36:	80 85       	ldd	r24, Z+8	; 0x08
     d38:	90 85       	ldd	r25, Z+8	; 0x08
     d3a:	91 fb       	bst	r25, 1
     d3c:	22 27       	eor	r18, r18
     d3e:	20 f9       	bld	r18, 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	88 70       	andi	r24, 0x08	; 8
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	95 95       	asr	r25
     d48:	87 95       	ror	r24
     d4a:	95 95       	asr	r25
     d4c:	87 95       	ror	r24
     d4e:	82 2b       	or	r24, r18
     d50:	93 2b       	or	r25, r19
     d52:	5c df       	rcall	.-328    	; 0xc0c <_Z12grayToBinaryj>
	//int8_t new_value = grayToBinary(((wheelPort1.IN & 8) >> 1) | (wheelPort1.IN & 2));
	int8_t difference = new_value - old_value;
     d54:	90 91 44 20 	lds	r25, 0x2044
     d58:	28 2f       	mov	r18, r24
     d5a:	29 1b       	sub	r18, r25
     d5c:	42 2f       	mov	r20, r18
	if(difference > 2) difference -= 4;
     d5e:	23 30       	cpi	r18, 0x03	; 3
     d60:	14 f0       	brlt	.+4      	; 0xd66 <__vector_67+0x6c>
     d62:	4c ef       	ldi	r20, 0xFC	; 252
     d64:	42 0f       	add	r20, r18
	if(difference < -2) difference += 4;
     d66:	4e 3f       	cpi	r20, 0xFE	; 254
     d68:	0c f4       	brge	.+2      	; 0xd6c <__vector_67+0x72>
     d6a:	4c 5f       	subi	r20, 0xFC	; 252
	
	wheelData[WHEEL_LR].ticks += difference;
     d6c:	ea e7       	ldi	r30, 0x7A	; 122
     d6e:	f0 e2       	ldi	r31, 0x20	; 32
     d70:	00 81       	ld	r16, Z
     d72:	11 81       	ldd	r17, Z+1	; 0x01
     d74:	22 81       	ldd	r18, Z+2	; 0x02
     d76:	33 81       	ldd	r19, Z+3	; 0x03
     d78:	55 27       	eor	r21, r21
     d7a:	47 fd       	sbrc	r20, 7
     d7c:	50 95       	com	r21
     d7e:	65 2f       	mov	r22, r21
     d80:	75 2f       	mov	r23, r21
     d82:	40 0f       	add	r20, r16
     d84:	51 1f       	adc	r21, r17
     d86:	62 1f       	adc	r22, r18
     d88:	73 1f       	adc	r23, r19
     d8a:	40 83       	st	Z, r20
     d8c:	51 83       	std	Z+1, r21	; 0x01
     d8e:	62 83       	std	Z+2, r22	; 0x02
     d90:	73 83       	std	Z+3, r23	; 0x03
	
	old_value = new_value;
     d92:	80 93 44 20 	sts	0x2044, r24
}
     d96:	ff 91       	pop	r31
     d98:	ef 91       	pop	r30
     d9a:	bf 91       	pop	r27
     d9c:	af 91       	pop	r26
     d9e:	9f 91       	pop	r25
     da0:	8f 91       	pop	r24
     da2:	7f 91       	pop	r23
     da4:	6f 91       	pop	r22
     da6:	5f 91       	pop	r21
     da8:	4f 91       	pop	r20
     daa:	3f 91       	pop	r19
     dac:	2f 91       	pop	r18
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	0f 90       	pop	r0
     db4:	0b be       	out	0x3b, r0	; 59
     db6:	0f 90       	pop	r0
     db8:	09 be       	out	0x39, r0	; 57
     dba:	0f 90       	pop	r0
     dbc:	08 be       	out	0x38, r0	; 56
     dbe:	0f 90       	pop	r0
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	0f 90       	pop	r0
     dc4:	1f 90       	pop	r1
     dc6:	18 95       	reti

00000dc8 <__vector_34>:

//Right Front
ISR(PORTB_INT0_vect){
     dc8:	1f 92       	push	r1
     dca:	0f 92       	push	r0
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	0f 92       	push	r0
     dd0:	11 24       	eor	r1, r1
     dd2:	08 b6       	in	r0, 0x38	; 56
     dd4:	0f 92       	push	r0
     dd6:	18 be       	out	0x38, r1	; 56
     dd8:	09 b6       	in	r0, 0x39	; 57
     dda:	0f 92       	push	r0
     ddc:	19 be       	out	0x39, r1	; 57
     dde:	0b b6       	in	r0, 0x3b	; 59
     de0:	0f 92       	push	r0
     de2:	1b be       	out	0x3b, r1	; 59
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	2f 93       	push	r18
     dea:	3f 93       	push	r19
     dec:	4f 93       	push	r20
     dee:	5f 93       	push	r21
     df0:	6f 93       	push	r22
     df2:	7f 93       	push	r23
     df4:	8f 93       	push	r24
     df6:	9f 93       	push	r25
     df8:	af 93       	push	r26
     dfa:	bf 93       	push	r27
     dfc:	ef 93       	push	r30
     dfe:	ff 93       	push	r31
	// pins 0 and 2
	static int8_t old_value = 0;
	//int8_t new_value = grayToBinary(((wheelPort2.IN & 4) >> 1) | (wheelPort2.IN & 1));
	int8_t new_value = grayToBinary(((wheelPort2.IN & 4) >> 1) | (wheelPort2.IN & 1));
     e00:	e0 e2       	ldi	r30, 0x20	; 32
     e02:	f6 e0       	ldi	r31, 0x06	; 6
     e04:	80 85       	ldd	r24, Z+8	; 0x08
     e06:	40 85       	ldd	r20, Z+8	; 0x08
     e08:	84 70       	andi	r24, 0x04	; 4
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	95 95       	asr	r25
     e0e:	87 95       	ror	r24
     e10:	24 2f       	mov	r18, r20
     e12:	21 70       	andi	r18, 0x01	; 1
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	82 2b       	or	r24, r18
     e18:	93 2b       	or	r25, r19
     e1a:	f8 de       	rcall	.-528    	; 0xc0c <_Z12grayToBinaryj>
	int8_t difference = new_value - old_value;
     e1c:	90 91 43 20 	lds	r25, 0x2043
     e20:	28 2f       	mov	r18, r24
     e22:	29 1b       	sub	r18, r25
     e24:	42 2f       	mov	r20, r18
	if(difference > 2) difference -= 4;
     e26:	23 30       	cpi	r18, 0x03	; 3
     e28:	14 f0       	brlt	.+4      	; 0xe2e <__vector_34+0x66>
     e2a:	4c ef       	ldi	r20, 0xFC	; 252
     e2c:	42 0f       	add	r20, r18
	if(difference < -2) difference += 4;
     e2e:	4e 3f       	cpi	r20, 0xFE	; 254
     e30:	0c f4       	brge	.+2      	; 0xe34 <__vector_34+0x6c>
     e32:	4c 5f       	subi	r20, 0xFC	; 252
	
	wheelData[WHEEL_RF].ticks += difference;
     e34:	ea ea       	ldi	r30, 0xAA	; 170
     e36:	f0 e2       	ldi	r31, 0x20	; 32
     e38:	00 81       	ld	r16, Z
     e3a:	11 81       	ldd	r17, Z+1	; 0x01
     e3c:	22 81       	ldd	r18, Z+2	; 0x02
     e3e:	33 81       	ldd	r19, Z+3	; 0x03
     e40:	55 27       	eor	r21, r21
     e42:	47 fd       	sbrc	r20, 7
     e44:	50 95       	com	r21
     e46:	65 2f       	mov	r22, r21
     e48:	75 2f       	mov	r23, r21
     e4a:	40 0f       	add	r20, r16
     e4c:	51 1f       	adc	r21, r17
     e4e:	62 1f       	adc	r22, r18
     e50:	73 1f       	adc	r23, r19
     e52:	40 83       	st	Z, r20
     e54:	51 83       	std	Z+1, r21	; 0x01
     e56:	62 83       	std	Z+2, r22	; 0x02
     e58:	73 83       	std	Z+3, r23	; 0x03
	
	old_value = new_value;
     e5a:	80 93 43 20 	sts	0x2043, r24
}
     e5e:	ff 91       	pop	r31
     e60:	ef 91       	pop	r30
     e62:	bf 91       	pop	r27
     e64:	af 91       	pop	r26
     e66:	9f 91       	pop	r25
     e68:	8f 91       	pop	r24
     e6a:	7f 91       	pop	r23
     e6c:	6f 91       	pop	r22
     e6e:	5f 91       	pop	r21
     e70:	4f 91       	pop	r20
     e72:	3f 91       	pop	r19
     e74:	2f 91       	pop	r18
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	0f 90       	pop	r0
     e7c:	0b be       	out	0x3b, r0	; 59
     e7e:	0f 90       	pop	r0
     e80:	09 be       	out	0x39, r0	; 57
     e82:	0f 90       	pop	r0
     e84:	08 be       	out	0x38, r0	; 56
     e86:	0f 90       	pop	r0
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	0f 90       	pop	r0
     e8c:	1f 90       	pop	r1
     e8e:	18 95       	reti

00000e90 <__vector_35>:

//Right Rear
ISR(PORTB_INT1_vect){
     e90:	1f 92       	push	r1
     e92:	0f 92       	push	r0
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	0f 92       	push	r0
     e98:	11 24       	eor	r1, r1
     e9a:	08 b6       	in	r0, 0x38	; 56
     e9c:	0f 92       	push	r0
     e9e:	18 be       	out	0x38, r1	; 56
     ea0:	09 b6       	in	r0, 0x39	; 57
     ea2:	0f 92       	push	r0
     ea4:	19 be       	out	0x39, r1	; 57
     ea6:	0b b6       	in	r0, 0x3b	; 59
     ea8:	0f 92       	push	r0
     eaa:	1b be       	out	0x3b, r1	; 59
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	2f 93       	push	r18
     eb2:	3f 93       	push	r19
     eb4:	4f 93       	push	r20
     eb6:	5f 93       	push	r21
     eb8:	6f 93       	push	r22
     eba:	7f 93       	push	r23
     ebc:	8f 93       	push	r24
     ebe:	9f 93       	push	r25
     ec0:	af 93       	push	r26
     ec2:	bf 93       	push	r27
     ec4:	ef 93       	push	r30
     ec6:	ff 93       	push	r31
	// pins 1 and 3
	static int8_t old_value = 0;
	int8_t new_value = grayToBinary(((wheelPort2.IN & 8) >> 2) | (wheelPort2.IN & 2) >> 1);
     ec8:	e0 e2       	ldi	r30, 0x20	; 32
     eca:	f6 e0       	ldi	r31, 0x06	; 6
     ecc:	80 85       	ldd	r24, Z+8	; 0x08
     ece:	90 85       	ldd	r25, Z+8	; 0x08
     ed0:	91 fb       	bst	r25, 1
     ed2:	22 27       	eor	r18, r18
     ed4:	20 f9       	bld	r18, 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	88 70       	andi	r24, 0x08	; 8
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	95 95       	asr	r25
     ede:	87 95       	ror	r24
     ee0:	95 95       	asr	r25
     ee2:	87 95       	ror	r24
     ee4:	82 2b       	or	r24, r18
     ee6:	93 2b       	or	r25, r19
     ee8:	91 de       	rcall	.-734    	; 0xc0c <_Z12grayToBinaryj>
	//int8_t new_value = grayToBinary(((wheelPort2.IN & 8) >> 1) | (wheelPort2.IN & 2));
	int8_t difference = new_value - old_value;
     eea:	90 91 42 20 	lds	r25, 0x2042
     eee:	28 2f       	mov	r18, r24
     ef0:	29 1b       	sub	r18, r25
     ef2:	42 2f       	mov	r20, r18
	if(difference > 2) difference -= 4;
     ef4:	23 30       	cpi	r18, 0x03	; 3
     ef6:	14 f0       	brlt	.+4      	; 0xefc <__vector_35+0x6c>
     ef8:	4c ef       	ldi	r20, 0xFC	; 252
     efa:	42 0f       	add	r20, r18
	if(difference < -2) difference += 4;
     efc:	4e 3f       	cpi	r20, 0xFE	; 254
     efe:	0c f4       	brge	.+2      	; 0xf02 <__vector_35+0x72>
     f00:	4c 5f       	subi	r20, 0xFC	; 252
	
	wheelData[WHEEL_RR].ticks += difference;
     f02:	ea ed       	ldi	r30, 0xDA	; 218
     f04:	f0 e2       	ldi	r31, 0x20	; 32
     f06:	00 81       	ld	r16, Z
     f08:	11 81       	ldd	r17, Z+1	; 0x01
     f0a:	22 81       	ldd	r18, Z+2	; 0x02
     f0c:	33 81       	ldd	r19, Z+3	; 0x03
     f0e:	55 27       	eor	r21, r21
     f10:	47 fd       	sbrc	r20, 7
     f12:	50 95       	com	r21
     f14:	65 2f       	mov	r22, r21
     f16:	75 2f       	mov	r23, r21
     f18:	40 0f       	add	r20, r16
     f1a:	51 1f       	adc	r21, r17
     f1c:	62 1f       	adc	r22, r18
     f1e:	73 1f       	adc	r23, r19
     f20:	40 83       	st	Z, r20
     f22:	51 83       	std	Z+1, r21	; 0x01
     f24:	62 83       	std	Z+2, r22	; 0x02
     f26:	73 83       	std	Z+3, r23	; 0x03
	
	old_value = new_value;
     f28:	80 93 42 20 	sts	0x2042, r24
}
     f2c:	ff 91       	pop	r31
     f2e:	ef 91       	pop	r30
     f30:	bf 91       	pop	r27
     f32:	af 91       	pop	r26
     f34:	9f 91       	pop	r25
     f36:	8f 91       	pop	r24
     f38:	7f 91       	pop	r23
     f3a:	6f 91       	pop	r22
     f3c:	5f 91       	pop	r21
     f3e:	4f 91       	pop	r20
     f40:	3f 91       	pop	r19
     f42:	2f 91       	pop	r18
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	0f 90       	pop	r0
     f4a:	0b be       	out	0x3b, r0	; 59
     f4c:	0f 90       	pop	r0
     f4e:	09 be       	out	0x39, r0	; 57
     f50:	0f 90       	pop	r0
     f52:	08 be       	out	0x38, r0	; 56
     f54:	0f 90       	pop	r0
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	0f 90       	pop	r0
     f5a:	1f 90       	pop	r1
     f5c:	18 95       	reti

00000f5e <_GLOBAL__sub_I__Z8pid_initv>:
     f5e:	e6 e4       	ldi	r30, 0x46	; 70
     f60:	f0 e2       	ldi	r31, 0x20	; 32
     f62:	a6 e5       	ldi	r26, 0x56	; 86
     f64:	b0 e2       	ldi	r27, 0x20	; 32
     f66:	86 e0       	ldi	r24, 0x06	; 6
     f68:	91 e2       	ldi	r25, 0x21	; 33
	.TC = &TCE1,
};


// File-Scope Variables and Structures
struct pid_wheel_data {
     f6a:	10 82       	st	Z, r1
     f6c:	11 82       	std	Z+1, r1	; 0x01
     f6e:	12 82       	std	Z+2, r1	; 0x02
     f70:	13 82       	std	Z+3, r1	; 0x03
     f72:	14 82       	std	Z+4, r1	; 0x04
     f74:	15 82       	std	Z+5, r1	; 0x05
     f76:	16 82       	std	Z+6, r1	; 0x06
     f78:	17 82       	std	Z+7, r1	; 0x07
     f7a:	10 86       	std	Z+8, r1	; 0x08
     f7c:	11 86       	std	Z+9, r1	; 0x09
     f7e:	12 86       	std	Z+10, r1	; 0x0a
     f80:	13 86       	std	Z+11, r1	; 0x0b
     f82:	14 86       	std	Z+12, r1	; 0x0c
     f84:	15 86       	std	Z+13, r1	; 0x0d
     f86:	16 86       	std	Z+14, r1	; 0x0e
     f88:	17 86       	std	Z+15, r1	; 0x0f
     f8a:	1d 92       	st	X+, r1
     f8c:	1d 92       	st	X+, r1
     f8e:	1d 92       	st	X+, r1
     f90:	1c 92       	st	X, r1
     f92:	13 97       	sbiw	r26, 0x03	; 3
     f94:	14 8a       	std	Z+20, r1	; 0x14
     f96:	15 8a       	std	Z+21, r1	; 0x15
     f98:	16 8a       	std	Z+22, r1	; 0x16
     f9a:	17 8a       	std	Z+23, r1	; 0x17
     f9c:	10 8e       	std	Z+24, r1	; 0x18
     f9e:	11 8e       	std	Z+25, r1	; 0x19
     fa0:	12 8e       	std	Z+26, r1	; 0x1a
     fa2:	13 8e       	std	Z+27, r1	; 0x1b
     fa4:	14 8e       	std	Z+28, r1	; 0x1c
     fa6:	15 8e       	std	Z+29, r1	; 0x1d
     fa8:	16 8e       	std	Z+30, r1	; 0x1e
     faa:	17 8e       	std	Z+31, r1	; 0x1f
     fac:	50 96       	adiw	r26, 0x10	; 16
     fae:	1d 92       	st	X+, r1
     fb0:	1d 92       	st	X+, r1
     fb2:	1d 92       	st	X+, r1
     fb4:	1c 92       	st	X, r1
     fb6:	53 97       	sbiw	r26, 0x13	; 19
     fb8:	54 96       	adiw	r26, 0x14	; 20
     fba:	1d 92       	st	X+, r1
     fbc:	1d 92       	st	X+, r1
     fbe:	1d 92       	st	X+, r1
     fc0:	1c 92       	st	X, r1
     fc2:	57 97       	sbiw	r26, 0x17	; 23
     fc4:	58 96       	adiw	r26, 0x18	; 24
     fc6:	1d 92       	st	X+, r1
     fc8:	1d 92       	st	X+, r1
     fca:	1d 92       	st	X+, r1
     fcc:	1c 92       	st	X, r1
     fce:	5b 97       	sbiw	r26, 0x1b	; 27
     fd0:	5c 96       	adiw	r26, 0x1c	; 28
     fd2:	1d 92       	st	X+, r1
     fd4:	1d 92       	st	X+, r1
     fd6:	1d 92       	st	X+, r1
     fd8:	1c 92       	st	X, r1
     fda:	5f 97       	sbiw	r26, 0x1f	; 31
     fdc:	f0 96       	adiw	r30, 0x30	; 48
     fde:	d0 96       	adiw	r26, 0x30	; 48

	int32_t pid_last_ticks = 0;
	int32_t odometry_last_ticks = 0;
} ;

static pid_wheel_data wheelData[4];
     fe0:	e8 17       	cp	r30, r24
     fe2:	f9 07       	cpc	r31, r25
     fe4:	11 f6       	brne	.-124    	; 0xf6a <_GLOBAL__sub_I__Z8pid_initv+0xc>
	if(difference < -2) difference += 4;
	
	wheelData[WHEEL_RR].ticks += difference;
	
	old_value = new_value;
}
     fe6:	08 95       	ret

00000fe8 <_Z17pololu_set_effortP13pololu_high_tf>:
	low->TC->CCD = 0;
	pololu_set_velocity(low,0);
}

//1024 max value preserved for compatibility.
void pololu_set_effort(pololu_high_t *high, float new_effort){
     fe8:	cf 92       	push	r12
     fea:	df 92       	push	r13
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	6a 01       	movw	r12, r20
     ff6:	7b 01       	movw	r14, r22
	high->TC->CCA = (PERIOD * (new_effort/1024.0));
     ff8:	fc 01       	movw	r30, r24
     ffa:	c2 81       	ldd	r28, Z+2	; 0x02
     ffc:	d3 81       	ldd	r29, Z+3	; 0x03
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e8       	ldi	r20, 0x80	; 128
    1004:	5a e3       	ldi	r21, 0x3A	; 58
    1006:	c7 01       	movw	r24, r14
    1008:	b6 01       	movw	r22, r12
    100a:	ab d6       	rcall	.+3414   	; 0x1d62 <__mulsf3>
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 ed       	ldi	r20, 0xD0	; 208
    1012:	54 e4       	ldi	r21, 0x44	; 68
    1014:	a6 d6       	rcall	.+3404   	; 0x1d62 <__mulsf3>
    1016:	c3 d5       	rcall	.+2950   	; 0x1b9e <__fixunssfsi>
    1018:	68 a7       	std	Y+40, r22	; 0x28
    101a:	79 a7       	std	Y+41, r23	; 0x29
}
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	ff 90       	pop	r15
    1022:	ef 90       	pop	r14
    1024:	df 90       	pop	r13
    1026:	cf 90       	pop	r12
    1028:	08 95       	ret

0000102a <_Z10pololuInitP13pololu_high_t>:
#include <math.h>
#include "pololu.h"

#define PERIOD  1664

void pololuInit(pololu_high_t *high){
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	00 d0       	rcall	.+0      	; 0x1034 <_Z10pololuInitP13pololu_high_t+0xa>
    1034:	1f 92       	push	r1
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	8c 01       	movw	r16, r24
	high->PORT->DIRSET = 0xF0; //Repeat for motor on high pins of port
    103c:	dc 01       	movw	r26, r24
    103e:	ed 91       	ld	r30, X+
    1040:	fc 91       	ld	r31, X
    1042:	11 97       	sbiw	r26, 0x01	; 1
    1044:	80 ef       	ldi	r24, 0xF0	; 240
    1046:	81 83       	std	Z+1, r24	; 0x01
	high->PORT->OUTCLR = 0xF0; //Inputs are mirrored
    1048:	ed 91       	ld	r30, X+
    104a:	fc 91       	ld	r31, X
    104c:	11 97       	sbiw	r26, 0x01	; 1
    104e:	86 83       	std	Z+6, r24	; 0x06
	high->PORT->PIN7CTRL = 0x18; //Sets pin to have a pull up
    1050:	ed 91       	ld	r30, X+
    1052:	fc 91       	ld	r31, X
    1054:	11 97       	sbiw	r26, 0x01	; 1
    1056:	88 e1       	ldi	r24, 0x18	; 24
    1058:	87 8b       	std	Z+23, r24	; 0x17
	high->PORT->OUTSET = 0x80;
    105a:	ed 91       	ld	r30, X+
    105c:	fc 91       	ld	r31, X
    105e:	11 97       	sbiw	r26, 0x01	; 1
    1060:	80 e8       	ldi	r24, 0x80	; 128
    1062:	85 83       	std	Z+5, r24	; 0x05
	
	high->TC->CTRLA = TC_CLKSEL_DIV1_gc;
    1064:	12 96       	adiw	r26, 0x02	; 2
    1066:	ed 91       	ld	r30, X+
    1068:	fc 91       	ld	r31, X
    106a:	13 97       	sbiw	r26, 0x03	; 3
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	80 83       	st	Z, r24
	high->TC->CTRLB = TC1_CCAEN_bm | TC_WGMODE_SINGLESLOPE_gc;
    1070:	12 96       	adiw	r26, 0x02	; 2
    1072:	ed 91       	ld	r30, X+
    1074:	fc 91       	ld	r31, X
    1076:	13 97       	sbiw	r26, 0x03	; 3
    1078:	83 e1       	ldi	r24, 0x13	; 19
    107a:	81 83       	std	Z+1, r24	; 0x01
	
	high->TC->PER = PERIOD;
    107c:	12 96       	adiw	r26, 0x02	; 2
    107e:	ed 91       	ld	r30, X+
    1080:	fc 91       	ld	r31, X
    1082:	13 97       	sbiw	r26, 0x03	; 3
    1084:	80 e8       	ldi	r24, 0x80	; 128
    1086:	96 e0       	ldi	r25, 0x06	; 6
    1088:	86 a3       	std	Z+38, r24	; 0x26
    108a:	97 a3       	std	Z+39, r25	; 0x27
	high->TC->CCA = 0;
    108c:	12 96       	adiw	r26, 0x02	; 2
    108e:	ed 91       	ld	r30, X+
    1090:	fc 91       	ld	r31, X
    1092:	13 97       	sbiw	r26, 0x03	; 3
    1094:	10 a6       	std	Z+40, r1	; 0x28
    1096:	11 a6       	std	Z+41, r1	; 0x29
		high->PORT->OUTCLR = 0x40; //Set INA to 0
		high->PORT->OUTSET = 0x20; //Set INB to 1
	}
	//Clockwise
	else{
		high->PORT->OUTSET = 0x40; //Set INA to 1
    1098:	ed 91       	ld	r30, X+
    109a:	fc 91       	ld	r31, X
    109c:	11 97       	sbiw	r26, 0x01	; 1
    109e:	80 e4       	ldi	r24, 0x40	; 64
    10a0:	85 83       	std	Z+5, r24	; 0x05
		high->PORT->OUTCLR = 0x20; //Set INB to 0
    10a2:	ed 91       	ld	r30, X+
    10a4:	fc 91       	ld	r31, X
    10a6:	80 e2       	ldi	r24, 0x20	; 32
    10a8:	86 83       	std	Z+6, r24	; 0x06
	}
	volatile float speed = fabs(velocity);
    10aa:	19 82       	std	Y+1, r1	; 0x01
    10ac:	1a 82       	std	Y+2, r1	; 0x02
    10ae:	1b 82       	std	Y+3, r1	; 0x03
    10b0:	1c 82       	std	Y+4, r1	; 0x04
	if(speed >= 1024) speed = 1024;
    10b2:	69 81       	ldd	r22, Y+1	; 0x01
    10b4:	7a 81       	ldd	r23, Y+2	; 0x02
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	40 e8       	ldi	r20, 0x80	; 128
    10c0:	54 e4       	ldi	r21, 0x44	; 68
    10c2:	4b d6       	rcall	.+3222   	; 0x1d5a <__gesf2>
    10c4:	88 23       	and	r24, r24
    10c6:	44 f0       	brlt	.+16     	; 0x10d8 <_Z10pololuInitP13pololu_high_t+0xae>
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	a0 e8       	ldi	r26, 0x80	; 128
    10ce:	b4 e4       	ldi	r27, 0x44	; 68
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	9a 83       	std	Y+2, r25	; 0x02
    10d4:	ab 83       	std	Y+3, r26	; 0x03
    10d6:	bc 83       	std	Y+4, r27	; 0x04
	pololu_set_effort(high, speed);
    10d8:	49 81       	ldd	r20, Y+1	; 0x01
    10da:	5a 81       	ldd	r21, Y+2	; 0x02
    10dc:	6b 81       	ldd	r22, Y+3	; 0x03
    10de:	7c 81       	ldd	r23, Y+4	; 0x04
    10e0:	c8 01       	movw	r24, r16
    10e2:	82 df       	rcall	.-252    	; 0xfe8 <_Z17pololu_set_effortP13pololu_high_tf>
	
	high->TC->PER = PERIOD;
	high->TC->CCA = 0;
	pololu_set_velocity(high,0);
	
}
    10e4:	24 96       	adiw	r28, 0x04	; 4
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	08 95       	ret

000010f4 <_Z17pololu_set_effortP12pololu_low_tf>:
//1024 max value preserved for compatibility.
void pololu_set_effort(pololu_high_t *high, float new_effort){
	high->TC->CCA = (PERIOD * (new_effort/1024.0));
}

void pololu_set_effort(pololu_low_t *low, float new_effort){
    10f4:	cf 92       	push	r12
    10f6:	df 92       	push	r13
    10f8:	ef 92       	push	r14
    10fa:	ff 92       	push	r15
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	6a 01       	movw	r12, r20
    1102:	7b 01       	movw	r14, r22
	low->TC->CCD = (PERIOD * (new_effort/1024.0));
    1104:	fc 01       	movw	r30, r24
    1106:	c2 81       	ldd	r28, Z+2	; 0x02
    1108:	d3 81       	ldd	r29, Z+3	; 0x03
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e8       	ldi	r20, 0x80	; 128
    1110:	5a e3       	ldi	r21, 0x3A	; 58
    1112:	c7 01       	movw	r24, r14
    1114:	b6 01       	movw	r22, r12
    1116:	25 d6       	rcall	.+3146   	; 0x1d62 <__mulsf3>
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 ed       	ldi	r20, 0xD0	; 208
    111e:	54 e4       	ldi	r21, 0x44	; 68
    1120:	20 d6       	rcall	.+3136   	; 0x1d62 <__mulsf3>
    1122:	3d d5       	rcall	.+2682   	; 0x1b9e <__fixunssfsi>
    1124:	6e a7       	std	Y+46, r22	; 0x2e
    1126:	7f a7       	std	Y+47, r23	; 0x2f
}
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	ff 90       	pop	r15
    112e:	ef 90       	pop	r14
    1130:	df 90       	pop	r13
    1132:	cf 90       	pop	r12
    1134:	08 95       	ret

00001136 <_Z10pololuInitP12pololu_low_t>:
	high->TC->CCA = 0;
	pololu_set_velocity(high,0);
	
}

void pololuInit(pololu_low_t *low){
    1136:	0f 93       	push	r16
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	00 d0       	rcall	.+0      	; 0x1140 <_Z10pololuInitP12pololu_low_t+0xa>
    1140:	1f 92       	push	r1
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	8c 01       	movw	r16, r24
	low->PORT->DIRSET = 0x0F; //Set MxINA, MxINB, MxPWM, and MxEN as outputs
    1148:	dc 01       	movw	r26, r24
    114a:	ed 91       	ld	r30, X+
    114c:	fc 91       	ld	r31, X
    114e:	11 97       	sbiw	r26, 0x01	; 1
    1150:	8f e0       	ldi	r24, 0x0F	; 15
    1152:	81 83       	std	Z+1, r24	; 0x01
	low->PORT->OUTCLR = 0x0F; //Set MxINA, MxINB, and MxPWM low
    1154:	ed 91       	ld	r30, X+
    1156:	fc 91       	ld	r31, X
    1158:	11 97       	sbiw	r26, 0x01	; 1
    115a:	86 83       	std	Z+6, r24	; 0x06
	low->PORT->PIN0CTRL = 0x18; //Sets pin to have a pull up
    115c:	ed 91       	ld	r30, X+
    115e:	fc 91       	ld	r31, X
    1160:	11 97       	sbiw	r26, 0x01	; 1
    1162:	88 e1       	ldi	r24, 0x18	; 24
    1164:	80 8b       	std	Z+16, r24	; 0x10
	low->PORT->OUTSET = 0x01; //Set MxEN high.
    1166:	ed 91       	ld	r30, X+
    1168:	fc 91       	ld	r31, X
    116a:	11 97       	sbiw	r26, 0x01	; 1
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	85 83       	std	Z+5, r24	; 0x05
	
	low->TC->CTRLA = TC_CLKSEL_DIV8_gc;
    1170:	12 96       	adiw	r26, 0x02	; 2
    1172:	ed 91       	ld	r30, X+
    1174:	fc 91       	ld	r31, X
    1176:	13 97       	sbiw	r26, 0x03	; 3
    1178:	24 e0       	ldi	r18, 0x04	; 4
    117a:	20 83       	st	Z, r18
	low->TC->CTRLB = TC0_CCDEN_bm | TC_WGMODE_SINGLESLOPE_gc;
    117c:	12 96       	adiw	r26, 0x02	; 2
    117e:	ed 91       	ld	r30, X+
    1180:	fc 91       	ld	r31, X
    1182:	13 97       	sbiw	r26, 0x03	; 3
    1184:	83 e8       	ldi	r24, 0x83	; 131
    1186:	81 83       	std	Z+1, r24	; 0x01

	low->TC->PER = PERIOD;
    1188:	12 96       	adiw	r26, 0x02	; 2
    118a:	ed 91       	ld	r30, X+
    118c:	fc 91       	ld	r31, X
    118e:	13 97       	sbiw	r26, 0x03	; 3
    1190:	80 e8       	ldi	r24, 0x80	; 128
    1192:	96 e0       	ldi	r25, 0x06	; 6
    1194:	86 a3       	std	Z+38, r24	; 0x26
    1196:	97 a3       	std	Z+39, r25	; 0x27
	low->TC->CCD = 0;
    1198:	12 96       	adiw	r26, 0x02	; 2
    119a:	ed 91       	ld	r30, X+
    119c:	fc 91       	ld	r31, X
    119e:	13 97       	sbiw	r26, 0x03	; 3
    11a0:	16 a6       	std	Z+46, r1	; 0x2e
    11a2:	17 a6       	std	Z+47, r1	; 0x2f
		low->PORT->OUTCLR = 0x04; //Set INA to 0
		low->PORT->OUTSET = 0x02; //Set INB to 1
	}
	//Clockwise
	else{
		low->PORT->OUTSET = 0x04; //Set INA to 1
    11a4:	ed 91       	ld	r30, X+
    11a6:	fc 91       	ld	r31, X
    11a8:	11 97       	sbiw	r26, 0x01	; 1
    11aa:	25 83       	std	Z+5, r18	; 0x05
		low->PORT->OUTCLR = 0x02; //Set INB to 0
    11ac:	ed 91       	ld	r30, X+
    11ae:	fc 91       	ld	r31, X
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	86 83       	std	Z+6, r24	; 0x06
	}
	volatile float speed = fabs(velocity);
    11b4:	19 82       	std	Y+1, r1	; 0x01
    11b6:	1a 82       	std	Y+2, r1	; 0x02
    11b8:	1b 82       	std	Y+3, r1	; 0x03
    11ba:	1c 82       	std	Y+4, r1	; 0x04
	if(speed >= 1023) speed = 1023;
    11bc:	69 81       	ldd	r22, Y+1	; 0x01
    11be:	7a 81       	ldd	r23, Y+2	; 0x02
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	9c 81       	ldd	r25, Y+4	; 0x04
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 ec       	ldi	r19, 0xC0	; 192
    11c8:	4f e7       	ldi	r20, 0x7F	; 127
    11ca:	54 e4       	ldi	r21, 0x44	; 68
    11cc:	c6 d5       	rcall	.+2956   	; 0x1d5a <__gesf2>
    11ce:	88 23       	and	r24, r24
    11d0:	44 f0       	brlt	.+16     	; 0x11e2 <_Z10pololuInitP12pololu_low_t+0xac>
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	90 ec       	ldi	r25, 0xC0	; 192
    11d6:	af e7       	ldi	r26, 0x7F	; 127
    11d8:	b4 e4       	ldi	r27, 0x44	; 68
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	9a 83       	std	Y+2, r25	; 0x02
    11de:	ab 83       	std	Y+3, r26	; 0x03
    11e0:	bc 83       	std	Y+4, r27	; 0x04
	pololu_set_effort(low, speed);
    11e2:	49 81       	ldd	r20, Y+1	; 0x01
    11e4:	5a 81       	ldd	r21, Y+2	; 0x02
    11e6:	6b 81       	ldd	r22, Y+3	; 0x03
    11e8:	7c 81       	ldd	r23, Y+4	; 0x04
    11ea:	c8 01       	movw	r24, r16
    11ec:	83 df       	rcall	.-250    	; 0x10f4 <_Z17pololu_set_effortP12pololu_low_tf>
	low->TC->CTRLB = TC0_CCDEN_bm | TC_WGMODE_SINGLESLOPE_gc;

	low->TC->PER = PERIOD;
	low->TC->CCD = 0;
	pololu_set_velocity(low,0);
}
    11ee:	24 96       	adiw	r28, 0x04	; 4
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	08 95       	ret

000011fe <_Z19pololu_set_velocityP13pololu_high_tf>:

void pololu_set_effort(pololu_low_t *low, float new_effort){
	low->TC->CCD = (PERIOD * (new_effort/1024.0));
}

void pololu_set_velocity(pololu_high_t *high, float velocity){
    11fe:	cf 92       	push	r12
    1200:	df 92       	push	r13
    1202:	ef 92       	push	r14
    1204:	ff 92       	push	r15
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	00 d0       	rcall	.+0      	; 0x1210 <_Z19pololu_set_velocityP13pololu_high_tf+0x12>
    1210:	1f 92       	push	r1
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	8c 01       	movw	r16, r24
    1218:	6a 01       	movw	r12, r20
    121a:	7b 01       	movw	r14, r22
	//Counter clockwise
	if(velocity < 0){
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	a9 01       	movw	r20, r18
    1222:	c7 01       	movw	r24, r14
    1224:	b6 01       	movw	r22, r12
    1226:	4a d4       	rcall	.+2196   	; 0x1abc <__cmpsf2>
    1228:	88 23       	and	r24, r24
    122a:	5c f4       	brge	.+22     	; 0x1242 <_Z19pololu_set_velocityP13pololu_high_tf+0x44>
		high->PORT->OUTCLR = 0x40; //Set INA to 0
    122c:	d8 01       	movw	r26, r16
    122e:	ed 91       	ld	r30, X+
    1230:	fc 91       	ld	r31, X
    1232:	11 97       	sbiw	r26, 0x01	; 1
    1234:	80 e4       	ldi	r24, 0x40	; 64
    1236:	86 83       	std	Z+6, r24	; 0x06
		high->PORT->OUTSET = 0x20; //Set INB to 1
    1238:	ed 91       	ld	r30, X+
    123a:	fc 91       	ld	r31, X
    123c:	80 e2       	ldi	r24, 0x20	; 32
    123e:	85 83       	std	Z+5, r24	; 0x05
    1240:	0a c0       	rjmp	.+20     	; 0x1256 <_Z19pololu_set_velocityP13pololu_high_tf+0x58>
	}
	//Clockwise
	else{
		high->PORT->OUTSET = 0x40; //Set INA to 1
    1242:	d8 01       	movw	r26, r16
    1244:	ed 91       	ld	r30, X+
    1246:	fc 91       	ld	r31, X
    1248:	11 97       	sbiw	r26, 0x01	; 1
    124a:	80 e4       	ldi	r24, 0x40	; 64
    124c:	85 83       	std	Z+5, r24	; 0x05
		high->PORT->OUTCLR = 0x20; //Set INB to 0
    124e:	ed 91       	ld	r30, X+
    1250:	fc 91       	ld	r31, X
    1252:	80 e2       	ldi	r24, 0x20	; 32
    1254:	86 83       	std	Z+6, r24	; 0x06
	}
	volatile float speed = fabs(velocity);
    1256:	e8 94       	clt
    1258:	f7 f8       	bld	r15, 7
    125a:	c9 82       	std	Y+1, r12	; 0x01
    125c:	da 82       	std	Y+2, r13	; 0x02
    125e:	eb 82       	std	Y+3, r14	; 0x03
    1260:	fc 82       	std	Y+4, r15	; 0x04
	if(speed >= 1024) speed = 1024;
    1262:	69 81       	ldd	r22, Y+1	; 0x01
    1264:	7a 81       	ldd	r23, Y+2	; 0x02
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e8       	ldi	r20, 0x80	; 128
    1270:	54 e4       	ldi	r21, 0x44	; 68
    1272:	73 d5       	rcall	.+2790   	; 0x1d5a <__gesf2>
    1274:	88 23       	and	r24, r24
    1276:	44 f0       	brlt	.+16     	; 0x1288 <_Z19pololu_set_velocityP13pololu_high_tf+0x8a>
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a0 e8       	ldi	r26, 0x80	; 128
    127e:	b4 e4       	ldi	r27, 0x44	; 68
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	9a 83       	std	Y+2, r25	; 0x02
    1284:	ab 83       	std	Y+3, r26	; 0x03
    1286:	bc 83       	std	Y+4, r27	; 0x04
	pololu_set_effort(high, speed);
    1288:	49 81       	ldd	r20, Y+1	; 0x01
    128a:	5a 81       	ldd	r21, Y+2	; 0x02
    128c:	6b 81       	ldd	r22, Y+3	; 0x03
    128e:	7c 81       	ldd	r23, Y+4	; 0x04
    1290:	c8 01       	movw	r24, r16
    1292:	aa de       	rcall	.-684    	; 0xfe8 <_Z17pololu_set_effortP13pololu_high_tf>
}
    1294:	24 96       	adiw	r28, 0x04	; 4
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	ff 90       	pop	r15
    12a4:	ef 90       	pop	r14
    12a6:	df 90       	pop	r13
    12a8:	cf 90       	pop	r12
    12aa:	08 95       	ret

000012ac <_Z19pololu_set_velocityP12pololu_low_tf>:

void pololu_set_velocity(pololu_low_t *low, float velocity){
    12ac:	cf 92       	push	r12
    12ae:	df 92       	push	r13
    12b0:	ef 92       	push	r14
    12b2:	ff 92       	push	r15
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	00 d0       	rcall	.+0      	; 0x12be <_Z19pololu_set_velocityP12pololu_low_tf+0x12>
    12be:	1f 92       	push	r1
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	8c 01       	movw	r16, r24
    12c6:	6a 01       	movw	r12, r20
    12c8:	7b 01       	movw	r14, r22
	//Counter clockwise
	if(velocity < 0){
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	a9 01       	movw	r20, r18
    12d0:	c7 01       	movw	r24, r14
    12d2:	b6 01       	movw	r22, r12
    12d4:	f3 d3       	rcall	.+2022   	; 0x1abc <__cmpsf2>
    12d6:	88 23       	and	r24, r24
    12d8:	5c f4       	brge	.+22     	; 0x12f0 <_Z19pololu_set_velocityP12pololu_low_tf+0x44>
		low->PORT->OUTCLR = 0x04; //Set INA to 0
    12da:	d8 01       	movw	r26, r16
    12dc:	ed 91       	ld	r30, X+
    12de:	fc 91       	ld	r31, X
    12e0:	11 97       	sbiw	r26, 0x01	; 1
    12e2:	84 e0       	ldi	r24, 0x04	; 4
    12e4:	86 83       	std	Z+6, r24	; 0x06
		low->PORT->OUTSET = 0x02; //Set INB to 1
    12e6:	ed 91       	ld	r30, X+
    12e8:	fc 91       	ld	r31, X
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	85 83       	std	Z+5, r24	; 0x05
    12ee:	0a c0       	rjmp	.+20     	; 0x1304 <_Z19pololu_set_velocityP12pololu_low_tf+0x58>
	}
	//Clockwise
	else{
		low->PORT->OUTSET = 0x04; //Set INA to 1
    12f0:	d8 01       	movw	r26, r16
    12f2:	ed 91       	ld	r30, X+
    12f4:	fc 91       	ld	r31, X
    12f6:	11 97       	sbiw	r26, 0x01	; 1
    12f8:	84 e0       	ldi	r24, 0x04	; 4
    12fa:	85 83       	std	Z+5, r24	; 0x05
		low->PORT->OUTCLR = 0x02; //Set INB to 0
    12fc:	ed 91       	ld	r30, X+
    12fe:	fc 91       	ld	r31, X
    1300:	82 e0       	ldi	r24, 0x02	; 2
    1302:	86 83       	std	Z+6, r24	; 0x06
	}
	volatile float speed = fabs(velocity);
    1304:	e8 94       	clt
    1306:	f7 f8       	bld	r15, 7
    1308:	c9 82       	std	Y+1, r12	; 0x01
    130a:	da 82       	std	Y+2, r13	; 0x02
    130c:	eb 82       	std	Y+3, r14	; 0x03
    130e:	fc 82       	std	Y+4, r15	; 0x04
	if(speed >= 1023) speed = 1023;
    1310:	69 81       	ldd	r22, Y+1	; 0x01
    1312:	7a 81       	ldd	r23, Y+2	; 0x02
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 ec       	ldi	r19, 0xC0	; 192
    131c:	4f e7       	ldi	r20, 0x7F	; 127
    131e:	54 e4       	ldi	r21, 0x44	; 68
    1320:	1c d5       	rcall	.+2616   	; 0x1d5a <__gesf2>
    1322:	88 23       	and	r24, r24
    1324:	44 f0       	brlt	.+16     	; 0x1336 <_Z19pololu_set_velocityP12pololu_low_tf+0x8a>
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 ec       	ldi	r25, 0xC0	; 192
    132a:	af e7       	ldi	r26, 0x7F	; 127
    132c:	b4 e4       	ldi	r27, 0x44	; 68
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	9a 83       	std	Y+2, r25	; 0x02
    1332:	ab 83       	std	Y+3, r26	; 0x03
    1334:	bc 83       	std	Y+4, r27	; 0x04
	pololu_set_effort(low, speed);
    1336:	49 81       	ldd	r20, Y+1	; 0x01
    1338:	5a 81       	ldd	r21, Y+2	; 0x02
    133a:	6b 81       	ldd	r22, Y+3	; 0x03
    133c:	7c 81       	ldd	r23, Y+4	; 0x04
    133e:	c8 01       	movw	r24, r16
    1340:	d9 de       	rcall	.-590    	; 0x10f4 <_Z17pololu_set_effortP12pololu_low_tf>
    1342:	24 96       	adiw	r28, 0x04	; 4
    1344:	cd bf       	out	0x3d, r28	; 61
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	ff 90       	pop	r15
    1352:	ef 90       	pop	r14
    1354:	df 90       	pop	r13
    1356:	cf 90       	pop	r12
    1358:	08 95       	ret

0000135a <_ZL19twi_master_transferPK13twi_package_tb>:
 * @return bit
 */
int8_t twi_read_bit(uint8_t chip_addr, uint8_t command_addr, uint8_t bit_num) {
	uint8_t b = twi_read_byte(chip_addr, command_addr);
	return b & (1 << bit_num);
}
    135a:	fc 01       	movw	r30, r24
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	09 f4       	brne	.+2      	; 0x1362 <_ZL19twi_master_transferPK13twi_package_tb+0x8>
    1360:	4e c0       	rjmp	.+156    	; 0x13fe <_ZL19twi_master_transferPK13twi_package_tb+0xa4>
    1362:	90 85       	ldd	r25, Z+8	; 0x08
    1364:	80 91 0f 21 	lds	r24, 0x210F
    1368:	02 c0       	rjmp	.+4      	; 0x136e <_ZL19twi_master_transferPK13twi_package_tb+0x14>
    136a:	91 11       	cpse	r25, r1
    136c:	4a c0       	rjmp	.+148    	; 0x1402 <_ZL19twi_master_transferPK13twi_package_tb+0xa8>
    136e:	81 11       	cpse	r24, r1
    1370:	fc cf       	rjmp	.-8      	; 0x136a <_ZL19twi_master_transferPK13twi_package_tb+0x10>
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	80 93 0f 21 	sts	0x210F, r24
    1378:	80 e8       	ldi	r24, 0x80	; 128
    137a:	80 93 10 21 	sts	0x2110, r24
    137e:	80 e9       	ldi	r24, 0x90	; 144
    1380:	94 e0       	ldi	r25, 0x04	; 4
    1382:	80 93 06 21 	sts	0x2106, r24
    1386:	90 93 07 21 	sts	0x2107, r25
    138a:	e0 93 08 21 	sts	0x2108, r30
    138e:	f0 93 09 21 	sts	0x2109, r31
    1392:	10 92 0a 21 	sts	0x210A, r1
    1396:	10 92 0b 21 	sts	0x210B, r1
    139a:	10 92 0c 21 	sts	0x210C, r1
    139e:	10 92 0d 21 	sts	0x210D, r1
    13a2:	60 93 0e 21 	sts	0x210E, r22
    13a6:	80 81       	ld	r24, Z
    13a8:	28 2f       	mov	r18, r24
    13aa:	22 0f       	add	r18, r18
    13ac:	82 81       	ldd	r24, Z+2	; 0x02
    13ae:	93 81       	ldd	r25, Z+3	; 0x03
    13b0:	89 2b       	or	r24, r25
    13b2:	11 f4       	brne	.+4      	; 0x13b8 <_ZL19twi_master_transferPK13twi_package_tb+0x5e>
    13b4:	61 11       	cpse	r22, r1
    13b6:	04 c0       	rjmp	.+8      	; 0x13c0 <_ZL19twi_master_transferPK13twi_package_tb+0x66>
    13b8:	e0 e9       	ldi	r30, 0x90	; 144
    13ba:	f4 e0       	ldi	r31, 0x04	; 4
    13bc:	26 83       	std	Z+6, r18	; 0x06
    13be:	04 c0       	rjmp	.+8      	; 0x13c8 <_ZL19twi_master_transferPK13twi_package_tb+0x6e>
    13c0:	21 60       	ori	r18, 0x01	; 1
    13c2:	e0 e9       	ldi	r30, 0x90	; 144
    13c4:	f4 e0       	ldi	r31, 0x04	; 4
    13c6:	26 83       	std	Z+6, r18	; 0x06
    13c8:	e0 e1       	ldi	r30, 0x10	; 16
    13ca:	f1 e2       	ldi	r31, 0x21	; 33
    13cc:	80 81       	ld	r24, Z
    13ce:	80 38       	cpi	r24, 0x80	; 128
    13d0:	e9 f3       	breq	.-6      	; 0x13cc <_ZL19twi_master_transferPK13twi_package_tb+0x72>
    13d2:	e0 91 06 21 	lds	r30, 0x2106
    13d6:	f0 91 07 21 	lds	r31, 0x2107
    13da:	84 81       	ldd	r24, Z+4	; 0x04
    13dc:	83 70       	andi	r24, 0x03	; 3
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	49 f0       	breq	.+18     	; 0x13f4 <_ZL19twi_master_transferPK13twi_package_tb+0x9a>
    13e2:	a6 e0       	ldi	r26, 0x06	; 6
    13e4:	b1 e2       	ldi	r27, 0x21	; 33
    13e6:	ed 91       	ld	r30, X+
    13e8:	fc 91       	ld	r31, X
    13ea:	11 97       	sbiw	r26, 0x01	; 1
    13ec:	84 81       	ldd	r24, Z+4	; 0x04
    13ee:	83 70       	andi	r24, 0x03	; 3
    13f0:	81 30       	cpi	r24, 0x01	; 1
    13f2:	c9 f7       	brne	.-14     	; 0x13e6 <_ZL19twi_master_transferPK13twi_package_tb+0x8c>
    13f4:	80 91 10 21 	lds	r24, 0x2110
    13f8:	10 92 0f 21 	sts	0x210F, r1
    13fc:	08 95       	ret
    13fe:	88 ef       	ldi	r24, 0xF8	; 248
    1400:	08 95       	ret
    1402:	86 ef       	ldi	r24, 0xF6	; 246
    1404:	08 95       	ret

00001406 <_Z15twi_init_masterv>:
    1406:	e0 e6       	ldi	r30, 0x60	; 96
    1408:	f6 e0       	ldi	r31, 0x06	; 6
    140a:	83 e0       	ldi	r24, 0x03	; 3
    140c:	81 83       	std	Z+1, r24	; 0x01
    140e:	80 89       	ldd	r24, Z+16	; 0x10
    1410:	88 61       	ori	r24, 0x18	; 24
    1412:	80 8b       	std	Z+16, r24	; 0x10
    1414:	81 89       	ldd	r24, Z+17	; 0x11
    1416:	88 61       	ori	r24, 0x18	; 24
    1418:	81 8b       	std	Z+17, r24	; 0x11
    141a:	e0 e9       	ldi	r30, 0x90	; 144
    141c:	f4 e0       	ldi	r31, 0x04	; 4
    141e:	8b e9       	ldi	r24, 0x9B	; 155
    1420:	85 83       	std	Z+5, r24	; 0x05
    1422:	88 e7       	ldi	r24, 0x78	; 120
    1424:	81 83       	std	Z+1, r24	; 0x01
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	84 83       	std	Z+4, r24	; 0x04
    142a:	10 92 0f 21 	sts	0x210F, r1
    142e:	10 92 10 21 	sts	0x2110, r1
    1432:	08 95       	ret

00001434 <_Z14twi_write_bytehhh>:
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	2a 97       	sbiw	r28, 0x0a	; 10
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	4a 87       	std	Y+10, r20	; 0x0a
    1444:	6a 83       	std	Y+2, r22	; 0x02
    1446:	21 e0       	ldi	r18, 0x01	; 1
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	2b 83       	std	Y+3, r18	; 0x03
    144c:	3c 83       	std	Y+4, r19	; 0x04
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	ce 01       	movw	r24, r28
    1452:	0a 96       	adiw	r24, 0x0a	; 10
    1454:	8d 83       	std	Y+5, r24	; 0x05
    1456:	9e 83       	std	Y+6, r25	; 0x06
    1458:	2f 83       	std	Y+7, r18	; 0x07
    145a:	38 87       	std	Y+8, r19	; 0x08
    145c:	60 e0       	ldi	r22, 0x00	; 0
    145e:	ce 01       	movw	r24, r28
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	7b df       	rcall	.-266    	; 0x135a <_ZL19twi_master_transferPK13twi_package_tb>
    1464:	81 11       	cpse	r24, r1
    1466:	fa cf       	rjmp	.-12     	; 0x145c <_Z14twi_write_bytehhh+0x28>
    1468:	2a 96       	adiw	r28, 0x0a	; 10
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	08 95       	ret

00001474 <_Z13twi_read_bytehh>:
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	2a 97       	sbiw	r28, 0x0a	; 10
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	1a 86       	std	Y+10, r1	; 0x0a
    1484:	6a 83       	std	Y+2, r22	; 0x02
    1486:	21 e0       	ldi	r18, 0x01	; 1
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	2b 83       	std	Y+3, r18	; 0x03
    148c:	3c 83       	std	Y+4, r19	; 0x04
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	ce 01       	movw	r24, r28
    1492:	0a 96       	adiw	r24, 0x0a	; 10
    1494:	8d 83       	std	Y+5, r24	; 0x05
    1496:	9e 83       	std	Y+6, r25	; 0x06
    1498:	2f 83       	std	Y+7, r18	; 0x07
    149a:	38 87       	std	Y+8, r19	; 0x08
    149c:	61 e0       	ldi	r22, 0x01	; 1
    149e:	ce 01       	movw	r24, r28
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	5b df       	rcall	.-330    	; 0x135a <_ZL19twi_master_transferPK13twi_package_tb>
    14a4:	81 11       	cpse	r24, r1
    14a6:	fa cf       	rjmp	.-12     	; 0x149c <_Z13twi_read_bytehh+0x28>
    14a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    14aa:	2a 96       	adiw	r28, 0x0a	; 10
    14ac:	cd bf       	out	0x3d, r28	; 61
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	08 95       	ret

000014b6 <_Z14twi_write_bitshhhhh>:
    14b6:	cf 92       	push	r12
    14b8:	df 92       	push	r13
    14ba:	ff 92       	push	r15
    14bc:	0f 93       	push	r16
    14be:	1f 93       	push	r17
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	18 2f       	mov	r17, r24
    14c6:	f6 2e       	mov	r15, r22
    14c8:	d4 2f       	mov	r29, r20
    14ca:	c2 2f       	mov	r28, r18
    14cc:	d3 df       	rcall	.-90     	; 0x1474 <_Z13twi_read_bytehh>
    14ce:	88 23       	and	r24, r24
    14d0:	a9 f1       	breq	.+106    	; 0x153c <_Z14twi_write_bitshhhhh+0x86>
    14d2:	ed 2f       	mov	r30, r29
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	2c 2f       	mov	r18, r28
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	c0 2e       	mov	r12, r16
    14dc:	d1 2c       	mov	r13, r1
    14de:	c8 e0       	ldi	r28, 0x08	; 8
    14e0:	d0 e0       	ldi	r29, 0x00	; 0
    14e2:	ae 01       	movw	r20, r28
    14e4:	42 1b       	sub	r20, r18
    14e6:	53 0b       	sbc	r21, r19
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <_Z14twi_write_bitshhhhh+0x38>
    14ea:	cc 0c       	add	r12, r12
    14ec:	dd 1c       	adc	r13, r13
    14ee:	4a 95       	dec	r20
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <_Z14twi_write_bitshhhhh+0x34>
    14f2:	dd 24       	eor	r13, r13
    14f4:	67 e0       	ldi	r22, 0x07	; 7
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	6e 1b       	sub	r22, r30
    14fa:	7f 0b       	sbc	r23, r31
    14fc:	a6 01       	movw	r20, r12
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <_Z14twi_write_bitshhhhh+0x4e>
    1500:	55 95       	asr	r21
    1502:	47 95       	ror	r20
    1504:	6a 95       	dec	r22
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <_Z14twi_write_bitshhhhh+0x4a>
    1508:	ce 1b       	sub	r28, r30
    150a:	df 0b       	sbc	r29, r31
    150c:	2c 0f       	add	r18, r28
    150e:	3d 1f       	adc	r19, r29
    1510:	21 50       	subi	r18, 0x01	; 1
    1512:	31 09       	sbc	r19, r1
    1514:	af ef       	ldi	r26, 0xFF	; 255
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	bd 01       	movw	r22, r26
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <_Z14twi_write_bitshhhhh+0x6a>
    151c:	75 95       	asr	r23
    151e:	67 95       	ror	r22
    1520:	2a 95       	dec	r18
    1522:	e2 f7       	brpl	.-8      	; 0x151c <_Z14twi_write_bitshhhhh+0x66>
    1524:	31 96       	adiw	r30, 0x01	; 1
    1526:	02 c0       	rjmp	.+4      	; 0x152c <_Z14twi_write_bitshhhhh+0x76>
    1528:	aa 0f       	add	r26, r26
    152a:	bb 1f       	adc	r27, r27
    152c:	ea 95       	dec	r30
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <_Z14twi_write_bitshhhhh+0x72>
    1530:	a6 2b       	or	r26, r22
    1532:	8a 23       	and	r24, r26
    1534:	48 2b       	or	r20, r24
    1536:	6f 2d       	mov	r22, r15
    1538:	81 2f       	mov	r24, r17
    153a:	7c df       	rcall	.-264    	; 0x1434 <_Z14twi_write_bytehhh>
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	ff 90       	pop	r15
    1546:	df 90       	pop	r13
    1548:	cf 90       	pop	r12
    154a:	08 95       	ret

0000154c <__vector_76>:
	} else {
		transfer.status = ERR_PROTOCOL;
	}
}

ISR(TWI_MASTER_VECT) {
    154c:	1f 92       	push	r1
    154e:	0f 92       	push	r0
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	0f 92       	push	r0
    1554:	11 24       	eor	r1, r1
    1556:	08 b6       	in	r0, 0x38	; 56
    1558:	0f 92       	push	r0
    155a:	18 be       	out	0x38, r1	; 56
    155c:	09 b6       	in	r0, 0x39	; 57
    155e:	0f 92       	push	r0
    1560:	19 be       	out	0x39, r1	; 57
    1562:	0a b6       	in	r0, 0x3a	; 58
    1564:	0f 92       	push	r0
    1566:	1a be       	out	0x3a, r1	; 58
    1568:	0b b6       	in	r0, 0x3b	; 59
    156a:	0f 92       	push	r0
    156c:	1b be       	out	0x3b, r1	; 59
    156e:	2f 93       	push	r18
    1570:	3f 93       	push	r19
    1572:	4f 93       	push	r20
    1574:	5f 93       	push	r21
    1576:	6f 93       	push	r22
    1578:	8f 93       	push	r24
    157a:	9f 93       	push	r25
    157c:	af 93       	push	r26
    157e:	bf 93       	push	r27
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	ef 93       	push	r30
    1586:	ff 93       	push	r31
	}
}

//! Common TWI master interrupt service routine.
static void twim_interrupt_handler(void) {
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1588:	e0 91 06 21 	lds	r30, 0x2106
    158c:	f0 91 07 21 	lds	r31, 0x2107
    1590:	84 81       	ldd	r24, Z+4	; 0x04
	
	if(master_status & TWI_MASTER_ARBLOST_bm) {
    1592:	83 ff       	sbrs	r24, 3
    1594:	08 c0       	rjmp	.+16     	; 0x15a6 <__vector_76+0x5a>
		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1596:	88 60       	ori	r24, 0x08	; 8
    1598:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    159a:	83 e0       	ldi	r24, 0x03	; 3
    159c:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    159e:	86 ef       	ldi	r24, 0xF6	; 246
    15a0:	80 93 10 21 	sts	0x2110, r24
    15a4:	89 c0       	rjmp	.+274    	; 0x16b8 <__vector_76+0x16c>
    15a6:	98 2f       	mov	r25, r24
    15a8:	94 71       	andi	r25, 0x14	; 20
	} else if((master_status & TWI_MASTER_BUSERR_bm) || (master_status & TWI_MASTER_RXACK_bm)) {
    15aa:	31 f0       	breq	.+12     	; 0x15b8 <__vector_76+0x6c>
		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    15ac:	83 e0       	ldi	r24, 0x03	; 3
    15ae:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    15b0:	8f ef       	ldi	r24, 0xFF	; 255
    15b2:	80 93 10 21 	sts	0x2110, r24
    15b6:	80 c0       	rjmp	.+256    	; 0x16b8 <__vector_76+0x16c>
	} else if(master_status & TWI_MASTER_WIF_bm) {
    15b8:	86 ff       	sbrs	r24, 6
    15ba:	45 c0       	rjmp	.+138    	; 0x1646 <__vector_76+0xfa>
}

//! TWI master write interrupt handler.
static inline void twim_write_handler(void) {
	TWI_t *const			bus = transfer.bus;
	twi_package_t *const	pkg = transfer.pkg;
    15bc:	a0 91 08 21 	lds	r26, 0x2108
    15c0:	b0 91 09 21 	lds	r27, 0x2109
	
	if(transfer.addr_count < pkg->addr_length) {
    15c4:	80 91 0a 21 	lds	r24, 0x210A
    15c8:	90 91 0b 21 	lds	r25, 0x210B
    15cc:	12 96       	adiw	r26, 0x02	; 2
    15ce:	2d 91       	ld	r18, X+
    15d0:	3c 91       	ld	r19, X
    15d2:	13 97       	sbiw	r26, 0x03	; 3
    15d4:	82 17       	cp	r24, r18
    15d6:	93 07       	cpc	r25, r19
    15d8:	6c f4       	brge	.+26     	; 0x15f4 <__vector_76+0xa8>
		//If the number of addresses dealt with so far
		//is less than the total number, then write the
		const uint8_t * const data = &((*pkg).addr); //pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    15da:	9c 01       	movw	r18, r24
    15dc:	2f 5f       	subi	r18, 0xFF	; 255
    15de:	3f 4f       	sbci	r19, 0xFF	; 255
    15e0:	20 93 0a 21 	sts	0x210A, r18
    15e4:	30 93 0b 21 	sts	0x210B, r19
    15e8:	a8 0f       	add	r26, r24
    15ea:	b9 1f       	adc	r27, r25
    15ec:	11 96       	adiw	r26, 0x01	; 1
    15ee:	8c 91       	ld	r24, X
    15f0:	87 83       	std	Z+7, r24	; 0x07
    15f2:	62 c0       	rjmp	.+196    	; 0x16b8 <__vector_76+0x16c>
		
		} else if(transfer.data_count < pkg->length) {
    15f4:	80 91 0c 21 	lds	r24, 0x210C
    15f8:	90 91 0d 21 	lds	r25, 0x210D
    15fc:	16 96       	adiw	r26, 0x06	; 6
    15fe:	2d 91       	ld	r18, X+
    1600:	3c 91       	ld	r19, X
    1602:	17 97       	sbiw	r26, 0x07	; 7
    1604:	82 17       	cp	r24, r18
    1606:	93 07       	cpc	r25, r19
    1608:	c8 f4       	brcc	.+50     	; 0x163c <__vector_76+0xf0>
		if(transfer.read) {
    160a:	20 91 0e 21 	lds	r18, 0x210E
    160e:	22 23       	and	r18, r18
    1610:	21 f0       	breq	.+8      	; 0x161a <__vector_76+0xce>
			//Send repeated START condition (Address|R/W=1)
			bus->MASTER.ADDR |= 0x01;
    1612:	86 81       	ldd	r24, Z+6	; 0x06
    1614:	81 60       	ori	r24, 0x01	; 1
    1616:	86 83       	std	Z+6, r24	; 0x06
    1618:	4f c0       	rjmp	.+158    	; 0x16b8 <__vector_76+0x16c>
			} else {
			uint8_t * const data = (uint8_t *)((*pkg).buffer); //pkg->buffer;
    161a:	14 96       	adiw	r26, 0x04	; 4
    161c:	2d 91       	ld	r18, X+
    161e:	3c 91       	ld	r19, X
    1620:	15 97       	sbiw	r26, 0x05	; 5
			bus->MASTER.DATA = data[transfer.data_count++];
    1622:	ac 01       	movw	r20, r24
    1624:	4f 5f       	subi	r20, 0xFF	; 255
    1626:	5f 4f       	sbci	r21, 0xFF	; 255
    1628:	40 93 0c 21 	sts	0x210C, r20
    162c:	50 93 0d 21 	sts	0x210D, r21
    1630:	d9 01       	movw	r26, r18
    1632:	a8 0f       	add	r26, r24
    1634:	b9 1f       	adc	r27, r25
    1636:	8c 91       	ld	r24, X
    1638:	87 83       	std	Z+7, r24	; 0x07
    163a:	3e c0       	rjmp	.+124    	; 0x16b8 <__vector_76+0x16c>
		}
		} else {
		// Send STOP condition to complete the transaction
		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    163c:	83 e0       	ldi	r24, 0x03	; 3
    163e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    1640:	10 92 10 21 	sts	0x2110, r1
    1644:	39 c0       	rjmp	.+114    	; 0x16b8 <__vector_76+0x16c>
	} else if((master_status & TWI_MASTER_BUSERR_bm) || (master_status & TWI_MASTER_RXACK_bm)) {
		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_IO_ERROR;
	} else if(master_status & TWI_MASTER_WIF_bm) {
		twim_write_handler();
	} else if(master_status & TWI_MASTER_RIF_bm) {
    1646:	88 23       	and	r24, r24
    1648:	a4 f5       	brge	.+104    	; 0x16b2 <__vector_76+0x166>
}

//! TWI master read interrupt handler.
static inline void twim_read_handler(void) {
	TWI_t * const			bus = transfer.bus;
	twi_package_t * const	pkg = transfer.pkg;
    164a:	a0 91 08 21 	lds	r26, 0x2108
    164e:	b0 91 09 21 	lds	r27, 0x2109
	
	if(transfer.data_count < pkg->length) {
    1652:	80 91 0c 21 	lds	r24, 0x210C
    1656:	90 91 0d 21 	lds	r25, 0x210D
    165a:	16 96       	adiw	r26, 0x06	; 6
    165c:	2d 91       	ld	r18, X+
    165e:	3c 91       	ld	r19, X
    1660:	17 97       	sbiw	r26, 0x07	; 7
    1662:	82 17       	cp	r24, r18
    1664:	93 07       	cpc	r25, r19
    1666:	f8 f4       	brcc	.+62     	; 0x16a6 <__vector_76+0x15a>
		uint8_t * const data = (uint8_t *)((*pkg).buffer); //pkg->buffer;
    1668:	14 96       	adiw	r26, 0x04	; 4
    166a:	4d 91       	ld	r20, X+
    166c:	5c 91       	ld	r21, X
    166e:	15 97       	sbiw	r26, 0x05	; 5
		data[transfer.data_count++] = bus->MASTER.DATA;
    1670:	9c 01       	movw	r18, r24
    1672:	2f 5f       	subi	r18, 0xFF	; 255
    1674:	3f 4f       	sbci	r19, 0xFF	; 255
    1676:	20 93 0c 21 	sts	0x210C, r18
    167a:	30 93 0d 21 	sts	0x210D, r19
    167e:	67 81       	ldd	r22, Z+7	; 0x07
    1680:	ea 01       	movw	r28, r20
    1682:	c8 0f       	add	r28, r24
    1684:	d9 1f       	adc	r29, r25
    1686:	68 83       	st	Y, r22
		
		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if(transfer.data_count < pkg->length) {
    1688:	16 96       	adiw	r26, 0x06	; 6
    168a:	8d 91       	ld	r24, X+
    168c:	9c 91       	ld	r25, X
    168e:	17 97       	sbiw	r26, 0x07	; 7
    1690:	28 17       	cp	r18, r24
    1692:	39 07       	cpc	r19, r25
    1694:	18 f4       	brcc	.+6      	; 0x169c <__vector_76+0x150>
			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1696:	82 e0       	ldi	r24, 0x02	; 2
    1698:	83 83       	std	Z+3, r24	; 0x03
    169a:	0e c0       	rjmp	.+28     	; 0x16b8 <__vector_76+0x16c>
		} else {
			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    169c:	87 e0       	ldi	r24, 0x07	; 7
    169e:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    16a0:	10 92 10 21 	sts	0x2110, r1
    16a4:	09 c0       	rjmp	.+18     	; 0x16b8 <__vector_76+0x16c>
		}
	} else {
		//Issue STOP and buffer overflow condition
		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    16a6:	83 e0       	ldi	r24, 0x03	; 3
    16a8:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    16aa:	89 ef       	ldi	r24, 0xF9	; 249
    16ac:	80 93 10 21 	sts	0x2110, r24
    16b0:	03 c0       	rjmp	.+6      	; 0x16b8 <__vector_76+0x16c>
	} else if(master_status & TWI_MASTER_WIF_bm) {
		twim_write_handler();
	} else if(master_status & TWI_MASTER_RIF_bm) {
		twim_read_handler();
	} else {
		transfer.status = ERR_PROTOCOL;
    16b2:	8b ef       	ldi	r24, 0xFB	; 251
    16b4:	80 93 10 21 	sts	0x2110, r24
	}
}

ISR(TWI_MASTER_VECT) {
	 twim_interrupt_handler(); 
    16b8:	ff 91       	pop	r31
    16ba:	ef 91       	pop	r30
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	bf 91       	pop	r27
    16c2:	af 91       	pop	r26
    16c4:	9f 91       	pop	r25
    16c6:	8f 91       	pop	r24
    16c8:	6f 91       	pop	r22
    16ca:	5f 91       	pop	r21
    16cc:	4f 91       	pop	r20
    16ce:	3f 91       	pop	r19
    16d0:	2f 91       	pop	r18
    16d2:	0f 90       	pop	r0
    16d4:	0b be       	out	0x3b, r0	; 59
    16d6:	0f 90       	pop	r0
    16d8:	0a be       	out	0x3a, r0	; 58
    16da:	0f 90       	pop	r0
    16dc:	09 be       	out	0x39, r0	; 57
    16de:	0f 90       	pop	r0
    16e0:	08 be       	out	0x38, r0	; 56
    16e2:	0f 90       	pop	r0
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	0f 90       	pop	r0
    16e8:	1f 90       	pop	r1
    16ea:	18 95       	reti

000016ec <_Z9uart_initv>:
void uart_float_to_char8(char* buffer, float data) {
	int8_t haxor8 = data*1000;
	for(int i = 0; i < 1; i++){
		buffer[i] = (char)((haxor8 >> i*8) & 0xFF);
	}
}
    16ec:	e0 e4       	ldi	r30, 0x40	; 64
    16ee:	f6 e0       	ldi	r31, 0x06	; 6
    16f0:	88 e0       	ldi	r24, 0x08	; 8
    16f2:	85 83       	std	Z+5, r24	; 0x05
    16f4:	81 83       	std	Z+1, r24	; 0x01
    16f6:	e0 ea       	ldi	r30, 0xA0	; 160
    16f8:	f8 e0       	ldi	r31, 0x08	; 8
    16fa:	80 e3       	ldi	r24, 0x30	; 48
    16fc:	83 83       	std	Z+3, r24	; 0x03
    16fe:	88 e1       	ldi	r24, 0x18	; 24
    1700:	84 83       	std	Z+4, r24	; 0x04
    1702:	83 e0       	ldi	r24, 0x03	; 3
    1704:	85 83       	std	Z+5, r24	; 0x05
    1706:	85 ee       	ldi	r24, 0xE5	; 229
    1708:	86 83       	std	Z+6, r24	; 0x06
    170a:	8c eb       	ldi	r24, 0xBC	; 188
    170c:	87 83       	std	Z+7, r24	; 0x07
    170e:	08 95       	ret

00001710 <_Z21uart_send_msg_noblockhPch>:
    1710:	94 2f       	mov	r25, r20
    1712:	24 e0       	ldi	r18, 0x04	; 4
    1714:	24 0f       	add	r18, r20
    1716:	20 93 54 21 	sts	0x2154, r18
    171a:	21 34       	cpi	r18, 0x41	; 65
    171c:	88 f5       	brcc	.+98     	; 0x1780 <_Z21uart_send_msg_noblockhPch+0x70>
    171e:	e0 ea       	ldi	r30, 0xA0	; 160
    1720:	f8 e0       	ldi	r31, 0x08	; 8
    1722:	23 81       	ldd	r18, Z+3	; 0x03
    1724:	2c 7f       	andi	r18, 0xFC	; 252
    1726:	23 83       	std	Z+3, r18	; 0x03
    1728:	2e e5       	ldi	r18, 0x5E	; 94
    172a:	3e e5       	ldi	r19, 0x5E	; 94
    172c:	4e e5       	ldi	r20, 0x5E	; 94
    172e:	20 93 11 21 	sts	0x2111, r18
    1732:	30 93 12 21 	sts	0x2112, r19
    1736:	40 93 13 21 	sts	0x2113, r20
    173a:	90 93 14 21 	sts	0x2114, r25
    173e:	80 93 15 21 	sts	0x2115, r24
    1742:	29 2f       	mov	r18, r25
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	21 50       	subi	r18, 0x01	; 1
    1748:	31 09       	sbc	r19, r1
    174a:	12 16       	cp	r1, r18
    174c:	13 06       	cpc	r1, r19
    174e:	6c f4       	brge	.+26     	; 0x176a <_Z21uart_send_msg_noblockhPch+0x5a>
    1750:	a6 2f       	mov	r26, r22
    1752:	b7 2f       	mov	r27, r23
    1754:	e6 e1       	ldi	r30, 0x16	; 22
    1756:	f1 e2       	ldi	r31, 0x21	; 33
    1758:	89 2f       	mov	r24, r25
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	8b 5e       	subi	r24, 0xEB	; 235
    175e:	9e 4d       	sbci	r25, 0xDE	; 222
    1760:	2d 91       	ld	r18, X+
    1762:	21 93       	st	Z+, r18
    1764:	e8 17       	cp	r30, r24
    1766:	f9 07       	cpc	r31, r25
    1768:	d9 f7       	brne	.-10     	; 0x1760 <_Z21uart_send_msg_noblockhPch+0x50>
    176a:	10 92 51 21 	sts	0x2151, r1
    176e:	e0 ea       	ldi	r30, 0xA0	; 160
    1770:	f8 e0       	ldi	r31, 0x08	; 8
    1772:	83 81       	ldd	r24, Z+3	; 0x03
    1774:	82 60       	ori	r24, 0x02	; 2
    1776:	83 83       	std	Z+3, r24	; 0x03
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	80 93 57 21 	sts	0x2157, r24
    177e:	08 95       	ret
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	08 95       	ret

00001784 <_Z19uart_send_msg_blockhPch>:
    1784:	c5 df       	rcall	.-118    	; 0x1710 <_Z21uart_send_msg_noblockhPch>
    1786:	88 23       	and	r24, r24
    1788:	21 f0       	breq	.+8      	; 0x1792 <_Z19uart_send_msg_blockhPch+0xe>
    178a:	90 91 57 21 	lds	r25, 0x2157
    178e:	91 11       	cpse	r25, r1
    1790:	fc cf       	rjmp	.-8      	; 0x178a <_Z19uart_send_msg_blockhPch+0x6>
    1792:	08 95       	ret

00001794 <_Z12uart_get_msgv>:
    1794:	81 e1       	ldi	r24, 0x11	; 17
    1796:	91 e2       	ldi	r25, 0x21	; 33
    1798:	08 95       	ret

0000179a <_Z19uart_get_msg_statusv>:
    179a:	80 91 52 21 	lds	r24, 0x2152
    179e:	08 95       	ret

000017a0 <_Z19uart_set_msg_statusb>:
    17a0:	80 93 52 21 	sts	0x2152, r24
    17a4:	08 95       	ret

000017a6 <_Z15uart_echo_replyPch>:
    17a6:	46 2f       	mov	r20, r22
    17a8:	bc 01       	movw	r22, r24
    17aa:	83 e0       	ldi	r24, 0x03	; 3
    17ac:	eb cf       	rjmp	.-42     	; 0x1784 <_Z19uart_send_msg_blockhPch>
    17ae:	08 95       	ret

000017b0 <_Z17uart_echo_requestPch>:
    17b0:	df 92       	push	r13
    17b2:	ef 92       	push	r14
    17b4:	ff 92       	push	r15
    17b6:	0f 93       	push	r16
    17b8:	1f 93       	push	r17
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	7c 01       	movw	r14, r24
    17c0:	d6 2e       	mov	r13, r22
    17c2:	06 2f       	mov	r16, r22
    17c4:	10 e0       	ldi	r17, 0x00	; 0
    17c6:	61 e0       	ldi	r22, 0x01	; 1
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	c8 01       	movw	r24, r16
    17cc:	7b d3       	rcall	.+1782   	; 0x1ec4 <calloc>
    17ce:	ec 01       	movw	r28, r24
    17d0:	a8 01       	movw	r20, r16
    17d2:	b7 01       	movw	r22, r14
    17d4:	b8 d4       	rcall	.+2416   	; 0x2146 <memcpy>
    17d6:	6d 2d       	mov	r22, r13
    17d8:	ce 01       	movw	r24, r28
    17da:	e5 df       	rcall	.-54     	; 0x17a6 <_Z15uart_echo_replyPch>
    17dc:	ce 01       	movw	r24, r28
    17de:	24 d4       	rcall	.+2120   	; 0x2028 <free>
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	1f 91       	pop	r17
    17e6:	0f 91       	pop	r16
    17e8:	ff 90       	pop	r15
    17ea:	ef 90       	pop	r14
    17ec:	df 90       	pop	r13
    17ee:	08 95       	ret

000017f0 <_Z19uart_int32_to_floatPc>:
    17f0:	fc 01       	movw	r30, r24
    17f2:	23 81       	ldd	r18, Z+3	; 0x03
    17f4:	62 81       	ldd	r22, Z+2	; 0x02
    17f6:	86 2f       	mov	r24, r22
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	a0 e0       	ldi	r26, 0x00	; 0
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	dc 01       	movw	r26, r24
    1800:	99 27       	eor	r25, r25
    1802:	88 27       	eor	r24, r24
    1804:	b2 2b       	or	r27, r18
    1806:	20 81       	ld	r18, Z
    1808:	82 2b       	or	r24, r18
    180a:	21 81       	ldd	r18, Z+1	; 0x01
    180c:	bc 01       	movw	r22, r24
    180e:	cd 01       	movw	r24, r26
    1810:	72 2b       	or	r23, r18
    1812:	f3 d1       	rcall	.+998    	; 0x1bfa <__floatsisf>
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	4a e7       	ldi	r20, 0x7A	; 122
    181a:	54 e4       	ldi	r21, 0x44	; 68
    181c:	53 c1       	rjmp	.+678    	; 0x1ac4 <__divsf3>
    181e:	08 95       	ret

00001820 <_Z19uart_int16_to_floatPc>:
    1820:	fc 01       	movw	r30, r24
    1822:	61 81       	ldd	r22, Z+1	; 0x01
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	76 2f       	mov	r23, r22
    1828:	66 27       	eor	r22, r22
    182a:	80 81       	ld	r24, Z
    182c:	68 2b       	or	r22, r24
    182e:	88 27       	eor	r24, r24
    1830:	77 fd       	sbrc	r23, 7
    1832:	80 95       	com	r24
    1834:	98 2f       	mov	r25, r24
    1836:	e1 d1       	rcall	.+962    	; 0x1bfa <__floatsisf>
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	4a e7       	ldi	r20, 0x7A	; 122
    183e:	54 e4       	ldi	r21, 0x44	; 68
    1840:	41 c1       	rjmp	.+642    	; 0x1ac4 <__divsf3>
    1842:	08 95       	ret

00001844 <_Z20uart_float_to_char32Pcf>:
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	ec 01       	movw	r28, r24
    184a:	cb 01       	movw	r24, r22
    184c:	ba 01       	movw	r22, r20
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	4a e7       	ldi	r20, 0x7A	; 122
    1854:	54 e4       	ldi	r21, 0x44	; 68
    1856:	85 d2       	rcall	.+1290   	; 0x1d62 <__mulsf3>
    1858:	e7 d2       	rcall	.+1486   	; 0x1e28 <round>
    185a:	9c d1       	rcall	.+824    	; 0x1b94 <__fixsfsi>
    185c:	68 83       	st	Y, r22
    185e:	79 83       	std	Y+1, r23	; 0x01
    1860:	8a 83       	std	Y+2, r24	; 0x02
    1862:	9b 83       	std	Y+3, r25	; 0x03
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	08 95       	ret

0000186a <_Z20uart_float_to_char16Pcf>:
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	ec 01       	movw	r28, r24
    1870:	cb 01       	movw	r24, r22
    1872:	ba 01       	movw	r22, r20
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	4a e7       	ldi	r20, 0x7A	; 122
    187a:	54 e4       	ldi	r21, 0x44	; 68
    187c:	72 d2       	rcall	.+1252   	; 0x1d62 <__mulsf3>
    187e:	8a d1       	rcall	.+788    	; 0x1b94 <__fixsfsi>
    1880:	68 83       	st	Y, r22
    1882:	79 83       	std	Y+1, r23	; 0x01
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	08 95       	ret

0000188a <__vector_26>:



ISR(TXVEC_USB) {
    188a:	1f 92       	push	r1
    188c:	0f 92       	push	r0
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	0f 92       	push	r0
    1892:	11 24       	eor	r1, r1
    1894:	08 b6       	in	r0, 0x38	; 56
    1896:	0f 92       	push	r0
    1898:	18 be       	out	0x38, r1	; 56
    189a:	09 b6       	in	r0, 0x39	; 57
    189c:	0f 92       	push	r0
    189e:	19 be       	out	0x39, r1	; 57
    18a0:	0b b6       	in	r0, 0x3b	; 59
    18a2:	0f 92       	push	r0
    18a4:	1b be       	out	0x3b, r1	; 59
    18a6:	8f 93       	push	r24
    18a8:	9f 93       	push	r25
    18aa:	af 93       	push	r26
    18ac:	bf 93       	push	r27
    18ae:	ef 93       	push	r30
    18b0:	ff 93       	push	r31
}

// Gets a character from the output buffer and puts it into uart to be transmitted
static void transmit() {
	// First check if there's untransmitted message data in the buffer.
	if(uart_data_usb.buf_pos < tx_message_len) {
    18b2:	90 91 51 21 	lds	r25, 0x2151
    18b6:	80 91 54 21 	lds	r24, 0x2154
    18ba:	98 17       	cp	r25, r24
    18bc:	90 f4       	brcc	.+36     	; 0x18e2 <__vector_26+0x58>
		// If there is, then send the first untransmitted character in the buffer.
		uart_usb.DATA = uart_data_usb.buffer[uart_data_usb.buf_pos];
    18be:	e1 e5       	ldi	r30, 0x51	; 81
    18c0:	f1 e2       	ldi	r31, 0x21	; 33
    18c2:	a0 81       	ld	r26, Z
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	af 5e       	subi	r26, 0xEF	; 239
    18c8:	be 4d       	sbci	r27, 0xDE	; 222
    18ca:	8c 91       	ld	r24, X
    18cc:	80 93 a0 08 	sts	0x08A0, r24
		uart_data_usb.buffer[uart_data_usb.buf_pos] = 0; // This'll clear out the buffer as the characters are transmitted, so disable if you want to keep the message.
    18d0:	a0 81       	ld	r26, Z
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	af 5e       	subi	r26, 0xEF	; 239
    18d6:	be 4d       	sbci	r27, 0xDE	; 222
    18d8:	1c 92       	st	X, r1
		uart_data_usb.buf_pos++;
    18da:	80 81       	ld	r24, Z
    18dc:	8f 5f       	subi	r24, 0xFF	; 255
    18de:	80 83       	st	Z, r24
    18e0:	07 c0       	rjmp	.+14     	; 0x18f0 <__vector_26+0x66>
		
	} else {
		//If there isn't any data in the buffer, then disable the DREIF so that it doesn't continue interrupting.
		uart_usb.CTRLA &= ~USART_DREINTLVL_gm;
    18e2:	e0 ea       	ldi	r30, 0xA0	; 160
    18e4:	f8 e0       	ldi	r31, 0x08	; 8
    18e6:	83 81       	ldd	r24, Z+3	; 0x03
    18e8:	8c 7f       	andi	r24, 0xFC	; 252
    18ea:	83 83       	std	Z+3, r24	; 0x03
		uart_data_usb.buf_pos = 0;  // This sets the buffer back to the beginning when finished transmitting, which is necessary if you've zeroed out the buffer.
    18ec:	10 92 51 21 	sts	0x2151, r1



ISR(TXVEC_USB) {
	transmit();
}
    18f0:	ff 91       	pop	r31
    18f2:	ef 91       	pop	r30
    18f4:	bf 91       	pop	r27
    18f6:	af 91       	pop	r26
    18f8:	9f 91       	pop	r25
    18fa:	8f 91       	pop	r24
    18fc:	0f 90       	pop	r0
    18fe:	0b be       	out	0x3b, r0	; 59
    1900:	0f 90       	pop	r0
    1902:	09 be       	out	0x39, r0	; 57
    1904:	0f 90       	pop	r0
    1906:	08 be       	out	0x38, r0	; 56
    1908:	0f 90       	pop	r0
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	0f 90       	pop	r0
    190e:	1f 90       	pop	r1
    1910:	18 95       	reti

00001912 <__vector_25>:

ISR(RXVEC_USB) {
    1912:	1f 92       	push	r1
    1914:	0f 92       	push	r0
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	0f 92       	push	r0
    191a:	11 24       	eor	r1, r1
    191c:	08 b6       	in	r0, 0x38	; 56
    191e:	0f 92       	push	r0
    1920:	18 be       	out	0x38, r1	; 56
    1922:	0b b6       	in	r0, 0x3b	; 59
    1924:	0f 92       	push	r0
    1926:	1b be       	out	0x3b, r1	; 59
    1928:	2f 93       	push	r18
    192a:	8f 93       	push	r24
    192c:	9f 93       	push	r25
    192e:	ef 93       	push	r30
    1930:	ff 93       	push	r31
}

// Gets a character from the data register in the uart and puts it into the input buffer.

static void receive() {
	cli();
    1932:	f8 94       	cli
	
	// First get the data from the UART.
	uint8_t byte = uart_usb.DATA;
    1934:	90 91 a0 08 	lds	r25, 0x08A0
	
	switch(rx_state){
    1938:	80 91 53 21 	lds	r24, 0x2153
    193c:	81 30       	cpi	r24, 0x01	; 1
    193e:	c9 f0       	breq	.+50     	; 0x1972 <__vector_25+0x60>
    1940:	18 f0       	brcs	.+6      	; 0x1948 <__vector_25+0x36>
    1942:	82 30       	cpi	r24, 0x02	; 2
    1944:	09 f1       	breq	.+66     	; 0x1988 <__vector_25+0x76>
    1946:	46 c0       	rjmp	.+140    	; 0x19d4 <__vector_25+0xc2>
		case WaitingForStart:
			if(message_to_be_handled == false){
    1948:	80 91 52 21 	lds	r24, 0x2152
    194c:	81 11       	cpse	r24, r1
    194e:	42 c0       	rjmp	.+132    	; 0x19d4 <__vector_25+0xc2>
				if(byte==start_char){
    1950:	9e 35       	cpi	r25, 0x5E	; 94
    1952:	29 f4       	brne	.+10     	; 0x195e <__vector_25+0x4c>
					start_char_count++;
    1954:	80 91 56 21 	lds	r24, 0x2156
    1958:	8f 5f       	subi	r24, 0xFF	; 255
    195a:	80 93 56 21 	sts	0x2156, r24
				}
			
				if(start_char_count == 3){
    195e:	80 91 56 21 	lds	r24, 0x2156
    1962:	83 30       	cpi	r24, 0x03	; 3
    1964:	b9 f5       	brne	.+110    	; 0x19d4 <__vector_25+0xc2>
					rx_state = GrabLength;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	80 93 53 21 	sts	0x2153, r24
					start_char_count = 0;
    196c:	10 92 56 21 	sts	0x2156, r1
    1970:	31 c0       	rjmp	.+98     	; 0x19d4 <__vector_25+0xc2>
				}
			}
		break;

		case GrabLength:
			rx_message_len = byte;
    1972:	90 93 55 21 	sts	0x2155, r25
			uart_data_usb.buffer[0] = rx_message_len; // Grab the message length and put it into the first position in teh buffer
    1976:	90 93 11 21 	sts	0x2111, r25
			uart_data_usb.buf_pos = 1;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	80 93 51 21 	sts	0x2151, r24
			rx_state = ReceivingMessage;
    1980:	82 e0       	ldi	r24, 0x02	; 2
    1982:	80 93 53 21 	sts	0x2153, r24
    1986:	26 c0       	rjmp	.+76     	; 0x19d4 <__vector_25+0xc2>
			//CRCInit();
		break;
		
		case ReceivingMessage:
			if(waiting_for_msg_ACK == true){
    1988:	80 91 57 21 	lds	r24, 0x2157
    198c:	88 23       	and	r24, r24
    198e:	39 f0       	breq	.+14     	; 0x199e <__vector_25+0x8c>
				if(byte == ACKValid){
    1990:	91 11       	cpse	r25, r1
    1992:	20 c0       	rjmp	.+64     	; 0x19d4 <__vector_25+0xc2>
					waiting_for_msg_ACK = false;
    1994:	10 92 57 21 	sts	0x2157, r1
					rx_state = WaitingForStart;
    1998:	10 92 53 21 	sts	0x2153, r1
    199c:	1b c0       	rjmp	.+54     	; 0x19d4 <__vector_25+0xc2>
					break;
				}	
			}
			
			
			else if(rx_message_len-- > 0){
    199e:	80 91 55 21 	lds	r24, 0x2155
    19a2:	2f ef       	ldi	r18, 0xFF	; 255
    19a4:	28 0f       	add	r18, r24
    19a6:	20 93 55 21 	sts	0x2155, r18
    19aa:	88 23       	and	r24, r24
    19ac:	61 f0       	breq	.+24     	; 0x19c6 <__vector_25+0xb4>
				uart_data_usb.buffer[uart_data_usb.buf_pos++] = byte;
    19ae:	e1 e5       	ldi	r30, 0x51	; 81
    19b0:	f1 e2       	ldi	r31, 0x21	; 33
    19b2:	80 81       	ld	r24, Z
    19b4:	21 e0       	ldi	r18, 0x01	; 1
    19b6:	28 0f       	add	r18, r24
    19b8:	20 83       	st	Z, r18
    19ba:	e8 2f       	mov	r30, r24
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	ef 5e       	subi	r30, 0xEF	; 239
    19c0:	fe 4d       	sbci	r31, 0xDE	; 222
    19c2:	90 83       	st	Z, r25
    19c4:	07 c0       	rjmp	.+14     	; 0x19d4 <__vector_25+0xc2>
			}else {
				message_to_be_handled = true;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	80 93 52 21 	sts	0x2152, r24
				rx_state = WaitingForStart;
    19cc:	10 92 53 21 	sts	0x2153, r1
				uart_data_usb.buf_pos = 0;
    19d0:	10 92 51 21 	sts	0x2151, r1
		default:
		break;
	
	}
	
	sei();
    19d4:	78 94       	sei
	transmit();
}

ISR(RXVEC_USB) {
	receive();
}
    19d6:	ff 91       	pop	r31
    19d8:	ef 91       	pop	r30
    19da:	9f 91       	pop	r25
    19dc:	8f 91       	pop	r24
    19de:	2f 91       	pop	r18
    19e0:	0f 90       	pop	r0
    19e2:	0b be       	out	0x3b, r0	; 59
    19e4:	0f 90       	pop	r0
    19e6:	08 be       	out	0x38, r0	; 56
    19e8:	0f 90       	pop	r0
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	0f 90       	pop	r0
    19ee:	1f 90       	pop	r1
    19f0:	18 95       	reti

000019f2 <__subsf3>:
    19f2:	50 58       	subi	r21, 0x80	; 128

000019f4 <__addsf3>:
    19f4:	bb 27       	eor	r27, r27
    19f6:	aa 27       	eor	r26, r26
    19f8:	0e d0       	rcall	.+28     	; 0x1a16 <__addsf3x>
    19fa:	75 c1       	rjmp	.+746    	; 0x1ce6 <__fp_round>
    19fc:	66 d1       	rcall	.+716    	; 0x1cca <__fp_pscA>
    19fe:	30 f0       	brcs	.+12     	; 0x1a0c <__addsf3+0x18>
    1a00:	6b d1       	rcall	.+726    	; 0x1cd8 <__fp_pscB>
    1a02:	20 f0       	brcs	.+8      	; 0x1a0c <__addsf3+0x18>
    1a04:	31 f4       	brne	.+12     	; 0x1a12 <__addsf3+0x1e>
    1a06:	9f 3f       	cpi	r25, 0xFF	; 255
    1a08:	11 f4       	brne	.+4      	; 0x1a0e <__addsf3+0x1a>
    1a0a:	1e f4       	brtc	.+6      	; 0x1a12 <__addsf3+0x1e>
    1a0c:	5b c1       	rjmp	.+694    	; 0x1cc4 <__fp_nan>
    1a0e:	0e f4       	brtc	.+2      	; 0x1a12 <__addsf3+0x1e>
    1a10:	e0 95       	com	r30
    1a12:	e7 fb       	bst	r30, 7
    1a14:	51 c1       	rjmp	.+674    	; 0x1cb8 <__fp_inf>

00001a16 <__addsf3x>:
    1a16:	e9 2f       	mov	r30, r25
    1a18:	77 d1       	rcall	.+750    	; 0x1d08 <__fp_split3>
    1a1a:	80 f3       	brcs	.-32     	; 0x19fc <__addsf3+0x8>
    1a1c:	ba 17       	cp	r27, r26
    1a1e:	62 07       	cpc	r22, r18
    1a20:	73 07       	cpc	r23, r19
    1a22:	84 07       	cpc	r24, r20
    1a24:	95 07       	cpc	r25, r21
    1a26:	18 f0       	brcs	.+6      	; 0x1a2e <__addsf3x+0x18>
    1a28:	71 f4       	brne	.+28     	; 0x1a46 <__addsf3x+0x30>
    1a2a:	9e f5       	brtc	.+102    	; 0x1a92 <__addsf3x+0x7c>
    1a2c:	8f c1       	rjmp	.+798    	; 0x1d4c <__fp_zero>
    1a2e:	0e f4       	brtc	.+2      	; 0x1a32 <__addsf3x+0x1c>
    1a30:	e0 95       	com	r30
    1a32:	0b 2e       	mov	r0, r27
    1a34:	ba 2f       	mov	r27, r26
    1a36:	a0 2d       	mov	r26, r0
    1a38:	0b 01       	movw	r0, r22
    1a3a:	b9 01       	movw	r22, r18
    1a3c:	90 01       	movw	r18, r0
    1a3e:	0c 01       	movw	r0, r24
    1a40:	ca 01       	movw	r24, r20
    1a42:	a0 01       	movw	r20, r0
    1a44:	11 24       	eor	r1, r1
    1a46:	ff 27       	eor	r31, r31
    1a48:	59 1b       	sub	r21, r25
    1a4a:	99 f0       	breq	.+38     	; 0x1a72 <__addsf3x+0x5c>
    1a4c:	59 3f       	cpi	r21, 0xF9	; 249
    1a4e:	50 f4       	brcc	.+20     	; 0x1a64 <__addsf3x+0x4e>
    1a50:	50 3e       	cpi	r21, 0xE0	; 224
    1a52:	68 f1       	brcs	.+90     	; 0x1aae <__addsf3x+0x98>
    1a54:	1a 16       	cp	r1, r26
    1a56:	f0 40       	sbci	r31, 0x00	; 0
    1a58:	a2 2f       	mov	r26, r18
    1a5a:	23 2f       	mov	r18, r19
    1a5c:	34 2f       	mov	r19, r20
    1a5e:	44 27       	eor	r20, r20
    1a60:	58 5f       	subi	r21, 0xF8	; 248
    1a62:	f3 cf       	rjmp	.-26     	; 0x1a4a <__addsf3x+0x34>
    1a64:	46 95       	lsr	r20
    1a66:	37 95       	ror	r19
    1a68:	27 95       	ror	r18
    1a6a:	a7 95       	ror	r26
    1a6c:	f0 40       	sbci	r31, 0x00	; 0
    1a6e:	53 95       	inc	r21
    1a70:	c9 f7       	brne	.-14     	; 0x1a64 <__addsf3x+0x4e>
    1a72:	7e f4       	brtc	.+30     	; 0x1a92 <__addsf3x+0x7c>
    1a74:	1f 16       	cp	r1, r31
    1a76:	ba 0b       	sbc	r27, r26
    1a78:	62 0b       	sbc	r22, r18
    1a7a:	73 0b       	sbc	r23, r19
    1a7c:	84 0b       	sbc	r24, r20
    1a7e:	ba f0       	brmi	.+46     	; 0x1aae <__addsf3x+0x98>
    1a80:	91 50       	subi	r25, 0x01	; 1
    1a82:	a1 f0       	breq	.+40     	; 0x1aac <__addsf3x+0x96>
    1a84:	ff 0f       	add	r31, r31
    1a86:	bb 1f       	adc	r27, r27
    1a88:	66 1f       	adc	r22, r22
    1a8a:	77 1f       	adc	r23, r23
    1a8c:	88 1f       	adc	r24, r24
    1a8e:	c2 f7       	brpl	.-16     	; 0x1a80 <__addsf3x+0x6a>
    1a90:	0e c0       	rjmp	.+28     	; 0x1aae <__addsf3x+0x98>
    1a92:	ba 0f       	add	r27, r26
    1a94:	62 1f       	adc	r22, r18
    1a96:	73 1f       	adc	r23, r19
    1a98:	84 1f       	adc	r24, r20
    1a9a:	48 f4       	brcc	.+18     	; 0x1aae <__addsf3x+0x98>
    1a9c:	87 95       	ror	r24
    1a9e:	77 95       	ror	r23
    1aa0:	67 95       	ror	r22
    1aa2:	b7 95       	ror	r27
    1aa4:	f7 95       	ror	r31
    1aa6:	9e 3f       	cpi	r25, 0xFE	; 254
    1aa8:	08 f0       	brcs	.+2      	; 0x1aac <__addsf3x+0x96>
    1aaa:	b3 cf       	rjmp	.-154    	; 0x1a12 <__addsf3+0x1e>
    1aac:	93 95       	inc	r25
    1aae:	88 0f       	add	r24, r24
    1ab0:	08 f0       	brcs	.+2      	; 0x1ab4 <__addsf3x+0x9e>
    1ab2:	99 27       	eor	r25, r25
    1ab4:	ee 0f       	add	r30, r30
    1ab6:	97 95       	ror	r25
    1ab8:	87 95       	ror	r24
    1aba:	08 95       	ret

00001abc <__cmpsf2>:
    1abc:	d9 d0       	rcall	.+434    	; 0x1c70 <__fp_cmp>
    1abe:	08 f4       	brcc	.+2      	; 0x1ac2 <__cmpsf2+0x6>
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	08 95       	ret

00001ac4 <__divsf3>:
    1ac4:	0c d0       	rcall	.+24     	; 0x1ade <__divsf3x>
    1ac6:	0f c1       	rjmp	.+542    	; 0x1ce6 <__fp_round>
    1ac8:	07 d1       	rcall	.+526    	; 0x1cd8 <__fp_pscB>
    1aca:	40 f0       	brcs	.+16     	; 0x1adc <__divsf3+0x18>
    1acc:	fe d0       	rcall	.+508    	; 0x1cca <__fp_pscA>
    1ace:	30 f0       	brcs	.+12     	; 0x1adc <__divsf3+0x18>
    1ad0:	21 f4       	brne	.+8      	; 0x1ada <__divsf3+0x16>
    1ad2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ad4:	19 f0       	breq	.+6      	; 0x1adc <__divsf3+0x18>
    1ad6:	f0 c0       	rjmp	.+480    	; 0x1cb8 <__fp_inf>
    1ad8:	51 11       	cpse	r21, r1
    1ada:	39 c1       	rjmp	.+626    	; 0x1d4e <__fp_szero>
    1adc:	f3 c0       	rjmp	.+486    	; 0x1cc4 <__fp_nan>

00001ade <__divsf3x>:
    1ade:	14 d1       	rcall	.+552    	; 0x1d08 <__fp_split3>
    1ae0:	98 f3       	brcs	.-26     	; 0x1ac8 <__divsf3+0x4>

00001ae2 <__divsf3_pse>:
    1ae2:	99 23       	and	r25, r25
    1ae4:	c9 f3       	breq	.-14     	; 0x1ad8 <__divsf3+0x14>
    1ae6:	55 23       	and	r21, r21
    1ae8:	b1 f3       	breq	.-20     	; 0x1ad6 <__divsf3+0x12>
    1aea:	95 1b       	sub	r25, r21
    1aec:	55 0b       	sbc	r21, r21
    1aee:	bb 27       	eor	r27, r27
    1af0:	aa 27       	eor	r26, r26
    1af2:	62 17       	cp	r22, r18
    1af4:	73 07       	cpc	r23, r19
    1af6:	84 07       	cpc	r24, r20
    1af8:	38 f0       	brcs	.+14     	; 0x1b08 <__divsf3_pse+0x26>
    1afa:	9f 5f       	subi	r25, 0xFF	; 255
    1afc:	5f 4f       	sbci	r21, 0xFF	; 255
    1afe:	22 0f       	add	r18, r18
    1b00:	33 1f       	adc	r19, r19
    1b02:	44 1f       	adc	r20, r20
    1b04:	aa 1f       	adc	r26, r26
    1b06:	a9 f3       	breq	.-22     	; 0x1af2 <__divsf3_pse+0x10>
    1b08:	33 d0       	rcall	.+102    	; 0x1b70 <__divsf3_pse+0x8e>
    1b0a:	0e 2e       	mov	r0, r30
    1b0c:	3a f0       	brmi	.+14     	; 0x1b1c <__divsf3_pse+0x3a>
    1b0e:	e0 e8       	ldi	r30, 0x80	; 128
    1b10:	30 d0       	rcall	.+96     	; 0x1b72 <__divsf3_pse+0x90>
    1b12:	91 50       	subi	r25, 0x01	; 1
    1b14:	50 40       	sbci	r21, 0x00	; 0
    1b16:	e6 95       	lsr	r30
    1b18:	00 1c       	adc	r0, r0
    1b1a:	ca f7       	brpl	.-14     	; 0x1b0e <__divsf3_pse+0x2c>
    1b1c:	29 d0       	rcall	.+82     	; 0x1b70 <__divsf3_pse+0x8e>
    1b1e:	fe 2f       	mov	r31, r30
    1b20:	27 d0       	rcall	.+78     	; 0x1b70 <__divsf3_pse+0x8e>
    1b22:	66 0f       	add	r22, r22
    1b24:	77 1f       	adc	r23, r23
    1b26:	88 1f       	adc	r24, r24
    1b28:	bb 1f       	adc	r27, r27
    1b2a:	26 17       	cp	r18, r22
    1b2c:	37 07       	cpc	r19, r23
    1b2e:	48 07       	cpc	r20, r24
    1b30:	ab 07       	cpc	r26, r27
    1b32:	b0 e8       	ldi	r27, 0x80	; 128
    1b34:	09 f0       	breq	.+2      	; 0x1b38 <__divsf3_pse+0x56>
    1b36:	bb 0b       	sbc	r27, r27
    1b38:	80 2d       	mov	r24, r0
    1b3a:	bf 01       	movw	r22, r30
    1b3c:	ff 27       	eor	r31, r31
    1b3e:	93 58       	subi	r25, 0x83	; 131
    1b40:	5f 4f       	sbci	r21, 0xFF	; 255
    1b42:	2a f0       	brmi	.+10     	; 0x1b4e <__divsf3_pse+0x6c>
    1b44:	9e 3f       	cpi	r25, 0xFE	; 254
    1b46:	51 05       	cpc	r21, r1
    1b48:	68 f0       	brcs	.+26     	; 0x1b64 <__divsf3_pse+0x82>
    1b4a:	b6 c0       	rjmp	.+364    	; 0x1cb8 <__fp_inf>
    1b4c:	00 c1       	rjmp	.+512    	; 0x1d4e <__fp_szero>
    1b4e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b50:	ec f3       	brlt	.-6      	; 0x1b4c <__divsf3_pse+0x6a>
    1b52:	98 3e       	cpi	r25, 0xE8	; 232
    1b54:	dc f3       	brlt	.-10     	; 0x1b4c <__divsf3_pse+0x6a>
    1b56:	86 95       	lsr	r24
    1b58:	77 95       	ror	r23
    1b5a:	67 95       	ror	r22
    1b5c:	b7 95       	ror	r27
    1b5e:	f7 95       	ror	r31
    1b60:	9f 5f       	subi	r25, 0xFF	; 255
    1b62:	c9 f7       	brne	.-14     	; 0x1b56 <__divsf3_pse+0x74>
    1b64:	88 0f       	add	r24, r24
    1b66:	91 1d       	adc	r25, r1
    1b68:	96 95       	lsr	r25
    1b6a:	87 95       	ror	r24
    1b6c:	97 f9       	bld	r25, 7
    1b6e:	08 95       	ret
    1b70:	e1 e0       	ldi	r30, 0x01	; 1
    1b72:	66 0f       	add	r22, r22
    1b74:	77 1f       	adc	r23, r23
    1b76:	88 1f       	adc	r24, r24
    1b78:	bb 1f       	adc	r27, r27
    1b7a:	62 17       	cp	r22, r18
    1b7c:	73 07       	cpc	r23, r19
    1b7e:	84 07       	cpc	r24, r20
    1b80:	ba 07       	cpc	r27, r26
    1b82:	20 f0       	brcs	.+8      	; 0x1b8c <__divsf3_pse+0xaa>
    1b84:	62 1b       	sub	r22, r18
    1b86:	73 0b       	sbc	r23, r19
    1b88:	84 0b       	sbc	r24, r20
    1b8a:	ba 0b       	sbc	r27, r26
    1b8c:	ee 1f       	adc	r30, r30
    1b8e:	88 f7       	brcc	.-30     	; 0x1b72 <__divsf3_pse+0x90>
    1b90:	e0 95       	com	r30
    1b92:	08 95       	ret

00001b94 <__fixsfsi>:
    1b94:	04 d0       	rcall	.+8      	; 0x1b9e <__fixunssfsi>
    1b96:	68 94       	set
    1b98:	b1 11       	cpse	r27, r1
    1b9a:	d9 c0       	rjmp	.+434    	; 0x1d4e <__fp_szero>
    1b9c:	08 95       	ret

00001b9e <__fixunssfsi>:
    1b9e:	bc d0       	rcall	.+376    	; 0x1d18 <__fp_splitA>
    1ba0:	88 f0       	brcs	.+34     	; 0x1bc4 <__fixunssfsi+0x26>
    1ba2:	9f 57       	subi	r25, 0x7F	; 127
    1ba4:	90 f0       	brcs	.+36     	; 0x1bca <__fixunssfsi+0x2c>
    1ba6:	b9 2f       	mov	r27, r25
    1ba8:	99 27       	eor	r25, r25
    1baa:	b7 51       	subi	r27, 0x17	; 23
    1bac:	a0 f0       	brcs	.+40     	; 0x1bd6 <__fixunssfsi+0x38>
    1bae:	d1 f0       	breq	.+52     	; 0x1be4 <__fixunssfsi+0x46>
    1bb0:	66 0f       	add	r22, r22
    1bb2:	77 1f       	adc	r23, r23
    1bb4:	88 1f       	adc	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	1a f0       	brmi	.+6      	; 0x1bc0 <__fixunssfsi+0x22>
    1bba:	ba 95       	dec	r27
    1bbc:	c9 f7       	brne	.-14     	; 0x1bb0 <__fixunssfsi+0x12>
    1bbe:	12 c0       	rjmp	.+36     	; 0x1be4 <__fixunssfsi+0x46>
    1bc0:	b1 30       	cpi	r27, 0x01	; 1
    1bc2:	81 f0       	breq	.+32     	; 0x1be4 <__fixunssfsi+0x46>
    1bc4:	c3 d0       	rcall	.+390    	; 0x1d4c <__fp_zero>
    1bc6:	b1 e0       	ldi	r27, 0x01	; 1
    1bc8:	08 95       	ret
    1bca:	c0 c0       	rjmp	.+384    	; 0x1d4c <__fp_zero>
    1bcc:	67 2f       	mov	r22, r23
    1bce:	78 2f       	mov	r23, r24
    1bd0:	88 27       	eor	r24, r24
    1bd2:	b8 5f       	subi	r27, 0xF8	; 248
    1bd4:	39 f0       	breq	.+14     	; 0x1be4 <__fixunssfsi+0x46>
    1bd6:	b9 3f       	cpi	r27, 0xF9	; 249
    1bd8:	cc f3       	brlt	.-14     	; 0x1bcc <__fixunssfsi+0x2e>
    1bda:	86 95       	lsr	r24
    1bdc:	77 95       	ror	r23
    1bde:	67 95       	ror	r22
    1be0:	b3 95       	inc	r27
    1be2:	d9 f7       	brne	.-10     	; 0x1bda <__fixunssfsi+0x3c>
    1be4:	3e f4       	brtc	.+14     	; 0x1bf4 <__fixunssfsi+0x56>
    1be6:	90 95       	com	r25
    1be8:	80 95       	com	r24
    1bea:	70 95       	com	r23
    1bec:	61 95       	neg	r22
    1bee:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf4:	08 95       	ret

00001bf6 <__floatunsisf>:
    1bf6:	e8 94       	clt
    1bf8:	09 c0       	rjmp	.+18     	; 0x1c0c <__floatsisf+0x12>

00001bfa <__floatsisf>:
    1bfa:	97 fb       	bst	r25, 7
    1bfc:	3e f4       	brtc	.+14     	; 0x1c0c <__floatsisf+0x12>
    1bfe:	90 95       	com	r25
    1c00:	80 95       	com	r24
    1c02:	70 95       	com	r23
    1c04:	61 95       	neg	r22
    1c06:	7f 4f       	sbci	r23, 0xFF	; 255
    1c08:	8f 4f       	sbci	r24, 0xFF	; 255
    1c0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0c:	99 23       	and	r25, r25
    1c0e:	a9 f0       	breq	.+42     	; 0x1c3a <__floatsisf+0x40>
    1c10:	f9 2f       	mov	r31, r25
    1c12:	96 e9       	ldi	r25, 0x96	; 150
    1c14:	bb 27       	eor	r27, r27
    1c16:	93 95       	inc	r25
    1c18:	f6 95       	lsr	r31
    1c1a:	87 95       	ror	r24
    1c1c:	77 95       	ror	r23
    1c1e:	67 95       	ror	r22
    1c20:	b7 95       	ror	r27
    1c22:	f1 11       	cpse	r31, r1
    1c24:	f8 cf       	rjmp	.-16     	; 0x1c16 <__floatsisf+0x1c>
    1c26:	fa f4       	brpl	.+62     	; 0x1c66 <__floatsisf+0x6c>
    1c28:	bb 0f       	add	r27, r27
    1c2a:	11 f4       	brne	.+4      	; 0x1c30 <__floatsisf+0x36>
    1c2c:	60 ff       	sbrs	r22, 0
    1c2e:	1b c0       	rjmp	.+54     	; 0x1c66 <__floatsisf+0x6c>
    1c30:	6f 5f       	subi	r22, 0xFF	; 255
    1c32:	7f 4f       	sbci	r23, 0xFF	; 255
    1c34:	8f 4f       	sbci	r24, 0xFF	; 255
    1c36:	9f 4f       	sbci	r25, 0xFF	; 255
    1c38:	16 c0       	rjmp	.+44     	; 0x1c66 <__floatsisf+0x6c>
    1c3a:	88 23       	and	r24, r24
    1c3c:	11 f0       	breq	.+4      	; 0x1c42 <__floatsisf+0x48>
    1c3e:	96 e9       	ldi	r25, 0x96	; 150
    1c40:	11 c0       	rjmp	.+34     	; 0x1c64 <__floatsisf+0x6a>
    1c42:	77 23       	and	r23, r23
    1c44:	21 f0       	breq	.+8      	; 0x1c4e <__floatsisf+0x54>
    1c46:	9e e8       	ldi	r25, 0x8E	; 142
    1c48:	87 2f       	mov	r24, r23
    1c4a:	76 2f       	mov	r23, r22
    1c4c:	05 c0       	rjmp	.+10     	; 0x1c58 <__floatsisf+0x5e>
    1c4e:	66 23       	and	r22, r22
    1c50:	71 f0       	breq	.+28     	; 0x1c6e <__floatsisf+0x74>
    1c52:	96 e8       	ldi	r25, 0x86	; 134
    1c54:	86 2f       	mov	r24, r22
    1c56:	70 e0       	ldi	r23, 0x00	; 0
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	2a f0       	brmi	.+10     	; 0x1c66 <__floatsisf+0x6c>
    1c5c:	9a 95       	dec	r25
    1c5e:	66 0f       	add	r22, r22
    1c60:	77 1f       	adc	r23, r23
    1c62:	88 1f       	adc	r24, r24
    1c64:	da f7       	brpl	.-10     	; 0x1c5c <__floatsisf+0x62>
    1c66:	88 0f       	add	r24, r24
    1c68:	96 95       	lsr	r25
    1c6a:	87 95       	ror	r24
    1c6c:	97 f9       	bld	r25, 7
    1c6e:	08 95       	ret

00001c70 <__fp_cmp>:
    1c70:	99 0f       	add	r25, r25
    1c72:	00 08       	sbc	r0, r0
    1c74:	55 0f       	add	r21, r21
    1c76:	aa 0b       	sbc	r26, r26
    1c78:	e0 e8       	ldi	r30, 0x80	; 128
    1c7a:	fe ef       	ldi	r31, 0xFE	; 254
    1c7c:	16 16       	cp	r1, r22
    1c7e:	17 06       	cpc	r1, r23
    1c80:	e8 07       	cpc	r30, r24
    1c82:	f9 07       	cpc	r31, r25
    1c84:	c0 f0       	brcs	.+48     	; 0x1cb6 <__fp_cmp+0x46>
    1c86:	12 16       	cp	r1, r18
    1c88:	13 06       	cpc	r1, r19
    1c8a:	e4 07       	cpc	r30, r20
    1c8c:	f5 07       	cpc	r31, r21
    1c8e:	98 f0       	brcs	.+38     	; 0x1cb6 <__fp_cmp+0x46>
    1c90:	62 1b       	sub	r22, r18
    1c92:	73 0b       	sbc	r23, r19
    1c94:	84 0b       	sbc	r24, r20
    1c96:	95 0b       	sbc	r25, r21
    1c98:	39 f4       	brne	.+14     	; 0x1ca8 <__fp_cmp+0x38>
    1c9a:	0a 26       	eor	r0, r26
    1c9c:	61 f0       	breq	.+24     	; 0x1cb6 <__fp_cmp+0x46>
    1c9e:	23 2b       	or	r18, r19
    1ca0:	24 2b       	or	r18, r20
    1ca2:	25 2b       	or	r18, r21
    1ca4:	21 f4       	brne	.+8      	; 0x1cae <__fp_cmp+0x3e>
    1ca6:	08 95       	ret
    1ca8:	0a 26       	eor	r0, r26
    1caa:	09 f4       	brne	.+2      	; 0x1cae <__fp_cmp+0x3e>
    1cac:	a1 40       	sbci	r26, 0x01	; 1
    1cae:	a6 95       	lsr	r26
    1cb0:	8f ef       	ldi	r24, 0xFF	; 255
    1cb2:	81 1d       	adc	r24, r1
    1cb4:	81 1d       	adc	r24, r1
    1cb6:	08 95       	ret

00001cb8 <__fp_inf>:
    1cb8:	97 f9       	bld	r25, 7
    1cba:	9f 67       	ori	r25, 0x7F	; 127
    1cbc:	80 e8       	ldi	r24, 0x80	; 128
    1cbe:	70 e0       	ldi	r23, 0x00	; 0
    1cc0:	60 e0       	ldi	r22, 0x00	; 0
    1cc2:	08 95       	ret

00001cc4 <__fp_nan>:
    1cc4:	9f ef       	ldi	r25, 0xFF	; 255
    1cc6:	80 ec       	ldi	r24, 0xC0	; 192
    1cc8:	08 95       	ret

00001cca <__fp_pscA>:
    1cca:	00 24       	eor	r0, r0
    1ccc:	0a 94       	dec	r0
    1cce:	16 16       	cp	r1, r22
    1cd0:	17 06       	cpc	r1, r23
    1cd2:	18 06       	cpc	r1, r24
    1cd4:	09 06       	cpc	r0, r25
    1cd6:	08 95       	ret

00001cd8 <__fp_pscB>:
    1cd8:	00 24       	eor	r0, r0
    1cda:	0a 94       	dec	r0
    1cdc:	12 16       	cp	r1, r18
    1cde:	13 06       	cpc	r1, r19
    1ce0:	14 06       	cpc	r1, r20
    1ce2:	05 06       	cpc	r0, r21
    1ce4:	08 95       	ret

00001ce6 <__fp_round>:
    1ce6:	09 2e       	mov	r0, r25
    1ce8:	03 94       	inc	r0
    1cea:	00 0c       	add	r0, r0
    1cec:	11 f4       	brne	.+4      	; 0x1cf2 <__fp_round+0xc>
    1cee:	88 23       	and	r24, r24
    1cf0:	52 f0       	brmi	.+20     	; 0x1d06 <__fp_round+0x20>
    1cf2:	bb 0f       	add	r27, r27
    1cf4:	40 f4       	brcc	.+16     	; 0x1d06 <__fp_round+0x20>
    1cf6:	bf 2b       	or	r27, r31
    1cf8:	11 f4       	brne	.+4      	; 0x1cfe <__fp_round+0x18>
    1cfa:	60 ff       	sbrs	r22, 0
    1cfc:	04 c0       	rjmp	.+8      	; 0x1d06 <__fp_round+0x20>
    1cfe:	6f 5f       	subi	r22, 0xFF	; 255
    1d00:	7f 4f       	sbci	r23, 0xFF	; 255
    1d02:	8f 4f       	sbci	r24, 0xFF	; 255
    1d04:	9f 4f       	sbci	r25, 0xFF	; 255
    1d06:	08 95       	ret

00001d08 <__fp_split3>:
    1d08:	57 fd       	sbrc	r21, 7
    1d0a:	90 58       	subi	r25, 0x80	; 128
    1d0c:	44 0f       	add	r20, r20
    1d0e:	55 1f       	adc	r21, r21
    1d10:	59 f0       	breq	.+22     	; 0x1d28 <__fp_splitA+0x10>
    1d12:	5f 3f       	cpi	r21, 0xFF	; 255
    1d14:	71 f0       	breq	.+28     	; 0x1d32 <__fp_splitA+0x1a>
    1d16:	47 95       	ror	r20

00001d18 <__fp_splitA>:
    1d18:	88 0f       	add	r24, r24
    1d1a:	97 fb       	bst	r25, 7
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	61 f0       	breq	.+24     	; 0x1d38 <__fp_splitA+0x20>
    1d20:	9f 3f       	cpi	r25, 0xFF	; 255
    1d22:	79 f0       	breq	.+30     	; 0x1d42 <__fp_splitA+0x2a>
    1d24:	87 95       	ror	r24
    1d26:	08 95       	ret
    1d28:	12 16       	cp	r1, r18
    1d2a:	13 06       	cpc	r1, r19
    1d2c:	14 06       	cpc	r1, r20
    1d2e:	55 1f       	adc	r21, r21
    1d30:	f2 cf       	rjmp	.-28     	; 0x1d16 <__fp_split3+0xe>
    1d32:	46 95       	lsr	r20
    1d34:	f1 df       	rcall	.-30     	; 0x1d18 <__fp_splitA>
    1d36:	08 c0       	rjmp	.+16     	; 0x1d48 <__fp_splitA+0x30>
    1d38:	16 16       	cp	r1, r22
    1d3a:	17 06       	cpc	r1, r23
    1d3c:	18 06       	cpc	r1, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	f1 cf       	rjmp	.-30     	; 0x1d24 <__fp_splitA+0xc>
    1d42:	86 95       	lsr	r24
    1d44:	71 05       	cpc	r23, r1
    1d46:	61 05       	cpc	r22, r1
    1d48:	08 94       	sec
    1d4a:	08 95       	ret

00001d4c <__fp_zero>:
    1d4c:	e8 94       	clt

00001d4e <__fp_szero>:
    1d4e:	bb 27       	eor	r27, r27
    1d50:	66 27       	eor	r22, r22
    1d52:	77 27       	eor	r23, r23
    1d54:	cb 01       	movw	r24, r22
    1d56:	97 f9       	bld	r25, 7
    1d58:	08 95       	ret

00001d5a <__gesf2>:
    1d5a:	8a df       	rcall	.-236    	; 0x1c70 <__fp_cmp>
    1d5c:	08 f4       	brcc	.+2      	; 0x1d60 <__gesf2+0x6>
    1d5e:	8f ef       	ldi	r24, 0xFF	; 255
    1d60:	08 95       	ret

00001d62 <__mulsf3>:
    1d62:	0b d0       	rcall	.+22     	; 0x1d7a <__mulsf3x>
    1d64:	c0 cf       	rjmp	.-128    	; 0x1ce6 <__fp_round>
    1d66:	b1 df       	rcall	.-158    	; 0x1cca <__fp_pscA>
    1d68:	28 f0       	brcs	.+10     	; 0x1d74 <__mulsf3+0x12>
    1d6a:	b6 df       	rcall	.-148    	; 0x1cd8 <__fp_pscB>
    1d6c:	18 f0       	brcs	.+6      	; 0x1d74 <__mulsf3+0x12>
    1d6e:	95 23       	and	r25, r21
    1d70:	09 f0       	breq	.+2      	; 0x1d74 <__mulsf3+0x12>
    1d72:	a2 cf       	rjmp	.-188    	; 0x1cb8 <__fp_inf>
    1d74:	a7 cf       	rjmp	.-178    	; 0x1cc4 <__fp_nan>
    1d76:	11 24       	eor	r1, r1
    1d78:	ea cf       	rjmp	.-44     	; 0x1d4e <__fp_szero>

00001d7a <__mulsf3x>:
    1d7a:	c6 df       	rcall	.-116    	; 0x1d08 <__fp_split3>
    1d7c:	a0 f3       	brcs	.-24     	; 0x1d66 <__mulsf3+0x4>

00001d7e <__mulsf3_pse>:
    1d7e:	95 9f       	mul	r25, r21
    1d80:	d1 f3       	breq	.-12     	; 0x1d76 <__mulsf3+0x14>
    1d82:	95 0f       	add	r25, r21
    1d84:	50 e0       	ldi	r21, 0x00	; 0
    1d86:	55 1f       	adc	r21, r21
    1d88:	62 9f       	mul	r22, r18
    1d8a:	f0 01       	movw	r30, r0
    1d8c:	72 9f       	mul	r23, r18
    1d8e:	bb 27       	eor	r27, r27
    1d90:	f0 0d       	add	r31, r0
    1d92:	b1 1d       	adc	r27, r1
    1d94:	63 9f       	mul	r22, r19
    1d96:	aa 27       	eor	r26, r26
    1d98:	f0 0d       	add	r31, r0
    1d9a:	b1 1d       	adc	r27, r1
    1d9c:	aa 1f       	adc	r26, r26
    1d9e:	64 9f       	mul	r22, r20
    1da0:	66 27       	eor	r22, r22
    1da2:	b0 0d       	add	r27, r0
    1da4:	a1 1d       	adc	r26, r1
    1da6:	66 1f       	adc	r22, r22
    1da8:	82 9f       	mul	r24, r18
    1daa:	22 27       	eor	r18, r18
    1dac:	b0 0d       	add	r27, r0
    1dae:	a1 1d       	adc	r26, r1
    1db0:	62 1f       	adc	r22, r18
    1db2:	73 9f       	mul	r23, r19
    1db4:	b0 0d       	add	r27, r0
    1db6:	a1 1d       	adc	r26, r1
    1db8:	62 1f       	adc	r22, r18
    1dba:	83 9f       	mul	r24, r19
    1dbc:	a0 0d       	add	r26, r0
    1dbe:	61 1d       	adc	r22, r1
    1dc0:	22 1f       	adc	r18, r18
    1dc2:	74 9f       	mul	r23, r20
    1dc4:	33 27       	eor	r19, r19
    1dc6:	a0 0d       	add	r26, r0
    1dc8:	61 1d       	adc	r22, r1
    1dca:	23 1f       	adc	r18, r19
    1dcc:	84 9f       	mul	r24, r20
    1dce:	60 0d       	add	r22, r0
    1dd0:	21 1d       	adc	r18, r1
    1dd2:	82 2f       	mov	r24, r18
    1dd4:	76 2f       	mov	r23, r22
    1dd6:	6a 2f       	mov	r22, r26
    1dd8:	11 24       	eor	r1, r1
    1dda:	9f 57       	subi	r25, 0x7F	; 127
    1ddc:	50 40       	sbci	r21, 0x00	; 0
    1dde:	8a f0       	brmi	.+34     	; 0x1e02 <__mulsf3_pse+0x84>
    1de0:	e1 f0       	breq	.+56     	; 0x1e1a <__mulsf3_pse+0x9c>
    1de2:	88 23       	and	r24, r24
    1de4:	4a f0       	brmi	.+18     	; 0x1df8 <__mulsf3_pse+0x7a>
    1de6:	ee 0f       	add	r30, r30
    1de8:	ff 1f       	adc	r31, r31
    1dea:	bb 1f       	adc	r27, r27
    1dec:	66 1f       	adc	r22, r22
    1dee:	77 1f       	adc	r23, r23
    1df0:	88 1f       	adc	r24, r24
    1df2:	91 50       	subi	r25, 0x01	; 1
    1df4:	50 40       	sbci	r21, 0x00	; 0
    1df6:	a9 f7       	brne	.-22     	; 0x1de2 <__mulsf3_pse+0x64>
    1df8:	9e 3f       	cpi	r25, 0xFE	; 254
    1dfa:	51 05       	cpc	r21, r1
    1dfc:	70 f0       	brcs	.+28     	; 0x1e1a <__mulsf3_pse+0x9c>
    1dfe:	5c cf       	rjmp	.-328    	; 0x1cb8 <__fp_inf>
    1e00:	a6 cf       	rjmp	.-180    	; 0x1d4e <__fp_szero>
    1e02:	5f 3f       	cpi	r21, 0xFF	; 255
    1e04:	ec f3       	brlt	.-6      	; 0x1e00 <__mulsf3_pse+0x82>
    1e06:	98 3e       	cpi	r25, 0xE8	; 232
    1e08:	dc f3       	brlt	.-10     	; 0x1e00 <__mulsf3_pse+0x82>
    1e0a:	86 95       	lsr	r24
    1e0c:	77 95       	ror	r23
    1e0e:	67 95       	ror	r22
    1e10:	b7 95       	ror	r27
    1e12:	f7 95       	ror	r31
    1e14:	e7 95       	ror	r30
    1e16:	9f 5f       	subi	r25, 0xFF	; 255
    1e18:	c1 f7       	brne	.-16     	; 0x1e0a <__mulsf3_pse+0x8c>
    1e1a:	fe 2b       	or	r31, r30
    1e1c:	88 0f       	add	r24, r24
    1e1e:	91 1d       	adc	r25, r1
    1e20:	96 95       	lsr	r25
    1e22:	87 95       	ror	r24
    1e24:	97 f9       	bld	r25, 7
    1e26:	08 95       	ret

00001e28 <round>:
    1e28:	77 df       	rcall	.-274    	; 0x1d18 <__fp_splitA>
    1e2a:	e0 f0       	brcs	.+56     	; 0x1e64 <round+0x3c>
    1e2c:	9e 37       	cpi	r25, 0x7E	; 126
    1e2e:	d8 f0       	brcs	.+54     	; 0x1e66 <round+0x3e>
    1e30:	96 39       	cpi	r25, 0x96	; 150
    1e32:	b8 f4       	brcc	.+46     	; 0x1e62 <round+0x3a>
    1e34:	9e 38       	cpi	r25, 0x8E	; 142
    1e36:	48 f4       	brcc	.+18     	; 0x1e4a <round+0x22>
    1e38:	67 2f       	mov	r22, r23
    1e3a:	78 2f       	mov	r23, r24
    1e3c:	88 27       	eor	r24, r24
    1e3e:	98 5f       	subi	r25, 0xF8	; 248
    1e40:	f9 cf       	rjmp	.-14     	; 0x1e34 <round+0xc>
    1e42:	86 95       	lsr	r24
    1e44:	77 95       	ror	r23
    1e46:	67 95       	ror	r22
    1e48:	93 95       	inc	r25
    1e4a:	95 39       	cpi	r25, 0x95	; 149
    1e4c:	d0 f3       	brcs	.-12     	; 0x1e42 <round+0x1a>
    1e4e:	b6 2f       	mov	r27, r22
    1e50:	b1 70       	andi	r27, 0x01	; 1
    1e52:	6b 0f       	add	r22, r27
    1e54:	71 1d       	adc	r23, r1
    1e56:	81 1d       	adc	r24, r1
    1e58:	20 f4       	brcc	.+8      	; 0x1e62 <round+0x3a>
    1e5a:	87 95       	ror	r24
    1e5c:	77 95       	ror	r23
    1e5e:	67 95       	ror	r22
    1e60:	93 95       	inc	r25
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <__fp_mintl>
    1e64:	1c c0       	rjmp	.+56     	; 0x1e9e <__fp_mpack>
    1e66:	73 cf       	rjmp	.-282    	; 0x1d4e <__fp_szero>

00001e68 <__fp_mintl>:
    1e68:	88 23       	and	r24, r24
    1e6a:	71 f4       	brne	.+28     	; 0x1e88 <__fp_mintl+0x20>
    1e6c:	77 23       	and	r23, r23
    1e6e:	21 f0       	breq	.+8      	; 0x1e78 <__fp_mintl+0x10>
    1e70:	98 50       	subi	r25, 0x08	; 8
    1e72:	87 2b       	or	r24, r23
    1e74:	76 2f       	mov	r23, r22
    1e76:	07 c0       	rjmp	.+14     	; 0x1e86 <__fp_mintl+0x1e>
    1e78:	66 23       	and	r22, r22
    1e7a:	11 f4       	brne	.+4      	; 0x1e80 <__fp_mintl+0x18>
    1e7c:	99 27       	eor	r25, r25
    1e7e:	0d c0       	rjmp	.+26     	; 0x1e9a <__fp_mintl+0x32>
    1e80:	90 51       	subi	r25, 0x10	; 16
    1e82:	86 2b       	or	r24, r22
    1e84:	70 e0       	ldi	r23, 0x00	; 0
    1e86:	60 e0       	ldi	r22, 0x00	; 0
    1e88:	2a f0       	brmi	.+10     	; 0x1e94 <__fp_mintl+0x2c>
    1e8a:	9a 95       	dec	r25
    1e8c:	66 0f       	add	r22, r22
    1e8e:	77 1f       	adc	r23, r23
    1e90:	88 1f       	adc	r24, r24
    1e92:	da f7       	brpl	.-10     	; 0x1e8a <__fp_mintl+0x22>
    1e94:	88 0f       	add	r24, r24
    1e96:	96 95       	lsr	r25
    1e98:	87 95       	ror	r24
    1e9a:	97 f9       	bld	r25, 7
    1e9c:	08 95       	ret

00001e9e <__fp_mpack>:
    1e9e:	9f 3f       	cpi	r25, 0xFF	; 255
    1ea0:	31 f0       	breq	.+12     	; 0x1eae <__fp_mpack_finite+0xc>

00001ea2 <__fp_mpack_finite>:
    1ea2:	91 50       	subi	r25, 0x01	; 1
    1ea4:	20 f4       	brcc	.+8      	; 0x1eae <__fp_mpack_finite+0xc>
    1ea6:	87 95       	ror	r24
    1ea8:	77 95       	ror	r23
    1eaa:	67 95       	ror	r22
    1eac:	b7 95       	ror	r27
    1eae:	88 0f       	add	r24, r24
    1eb0:	91 1d       	adc	r25, r1
    1eb2:	96 95       	lsr	r25
    1eb4:	87 95       	ror	r24
    1eb6:	97 f9       	bld	r25, 7
    1eb8:	08 95       	ret

00001eba <__tablejump_elpm__>:
    1eba:	07 90       	elpm	r0, Z+
    1ebc:	f6 91       	elpm	r31, Z
    1ebe:	e0 2d       	mov	r30, r0
    1ec0:	1b be       	out	0x3b, r1	; 59
    1ec2:	19 94       	eijmp

00001ec4 <calloc>:
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	86 9f       	mul	r24, r22
    1ece:	80 01       	movw	r16, r0
    1ed0:	87 9f       	mul	r24, r23
    1ed2:	10 0d       	add	r17, r0
    1ed4:	96 9f       	mul	r25, r22
    1ed6:	10 0d       	add	r17, r0
    1ed8:	11 24       	eor	r1, r1
    1eda:	c8 01       	movw	r24, r16
    1edc:	0d d0       	rcall	.+26     	; 0x1ef8 <malloc>
    1ede:	ec 01       	movw	r28, r24
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	21 f0       	breq	.+8      	; 0x1eec <calloc+0x28>
    1ee4:	a8 01       	movw	r20, r16
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	36 d1       	rcall	.+620    	; 0x2158 <memset>
    1eec:	ce 01       	movw	r24, r28
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	1f 91       	pop	r17
    1ef4:	0f 91       	pop	r16
    1ef6:	08 95       	ret

00001ef8 <malloc>:
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	82 30       	cpi	r24, 0x02	; 2
    1efe:	91 05       	cpc	r25, r1
    1f00:	10 f4       	brcc	.+4      	; 0x1f06 <malloc+0xe>
    1f02:	82 e0       	ldi	r24, 0x02	; 2
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	e0 91 5a 21 	lds	r30, 0x215A
    1f0a:	f0 91 5b 21 	lds	r31, 0x215B
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	a0 e0       	ldi	r26, 0x00	; 0
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	30 97       	sbiw	r30, 0x00	; 0
    1f18:	39 f1       	breq	.+78     	; 0x1f68 <malloc+0x70>
    1f1a:	40 81       	ld	r20, Z
    1f1c:	51 81       	ldd	r21, Z+1	; 0x01
    1f1e:	48 17       	cp	r20, r24
    1f20:	59 07       	cpc	r21, r25
    1f22:	b8 f0       	brcs	.+46     	; 0x1f52 <malloc+0x5a>
    1f24:	48 17       	cp	r20, r24
    1f26:	59 07       	cpc	r21, r25
    1f28:	71 f4       	brne	.+28     	; 0x1f46 <malloc+0x4e>
    1f2a:	82 81       	ldd	r24, Z+2	; 0x02
    1f2c:	93 81       	ldd	r25, Z+3	; 0x03
    1f2e:	10 97       	sbiw	r26, 0x00	; 0
    1f30:	29 f0       	breq	.+10     	; 0x1f3c <malloc+0x44>
    1f32:	12 96       	adiw	r26, 0x02	; 2
    1f34:	8d 93       	st	X+, r24
    1f36:	9c 93       	st	X, r25
    1f38:	13 97       	sbiw	r26, 0x03	; 3
    1f3a:	2c c0       	rjmp	.+88     	; 0x1f94 <malloc+0x9c>
    1f3c:	80 93 5a 21 	sts	0x215A, r24
    1f40:	90 93 5b 21 	sts	0x215B, r25
    1f44:	27 c0       	rjmp	.+78     	; 0x1f94 <malloc+0x9c>
    1f46:	21 15       	cp	r18, r1
    1f48:	31 05       	cpc	r19, r1
    1f4a:	31 f0       	breq	.+12     	; 0x1f58 <malloc+0x60>
    1f4c:	42 17       	cp	r20, r18
    1f4e:	53 07       	cpc	r21, r19
    1f50:	18 f0       	brcs	.+6      	; 0x1f58 <malloc+0x60>
    1f52:	a9 01       	movw	r20, r18
    1f54:	db 01       	movw	r26, r22
    1f56:	01 c0       	rjmp	.+2      	; 0x1f5a <malloc+0x62>
    1f58:	ef 01       	movw	r28, r30
    1f5a:	9a 01       	movw	r18, r20
    1f5c:	bd 01       	movw	r22, r26
    1f5e:	df 01       	movw	r26, r30
    1f60:	02 80       	ldd	r0, Z+2	; 0x02
    1f62:	f3 81       	ldd	r31, Z+3	; 0x03
    1f64:	e0 2d       	mov	r30, r0
    1f66:	d7 cf       	rjmp	.-82     	; 0x1f16 <malloc+0x1e>
    1f68:	21 15       	cp	r18, r1
    1f6a:	31 05       	cpc	r19, r1
    1f6c:	f9 f0       	breq	.+62     	; 0x1fac <malloc+0xb4>
    1f6e:	28 1b       	sub	r18, r24
    1f70:	39 0b       	sbc	r19, r25
    1f72:	24 30       	cpi	r18, 0x04	; 4
    1f74:	31 05       	cpc	r19, r1
    1f76:	80 f4       	brcc	.+32     	; 0x1f98 <malloc+0xa0>
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7c:	61 15       	cp	r22, r1
    1f7e:	71 05       	cpc	r23, r1
    1f80:	21 f0       	breq	.+8      	; 0x1f8a <malloc+0x92>
    1f82:	fb 01       	movw	r30, r22
    1f84:	82 83       	std	Z+2, r24	; 0x02
    1f86:	93 83       	std	Z+3, r25	; 0x03
    1f88:	04 c0       	rjmp	.+8      	; 0x1f92 <malloc+0x9a>
    1f8a:	80 93 5a 21 	sts	0x215A, r24
    1f8e:	90 93 5b 21 	sts	0x215B, r25
    1f92:	fe 01       	movw	r30, r28
    1f94:	32 96       	adiw	r30, 0x02	; 2
    1f96:	44 c0       	rjmp	.+136    	; 0x2020 <malloc+0x128>
    1f98:	fe 01       	movw	r30, r28
    1f9a:	e2 0f       	add	r30, r18
    1f9c:	f3 1f       	adc	r31, r19
    1f9e:	81 93       	st	Z+, r24
    1fa0:	91 93       	st	Z+, r25
    1fa2:	22 50       	subi	r18, 0x02	; 2
    1fa4:	31 09       	sbc	r19, r1
    1fa6:	28 83       	st	Y, r18
    1fa8:	39 83       	std	Y+1, r19	; 0x01
    1faa:	3a c0       	rjmp	.+116    	; 0x2020 <malloc+0x128>
    1fac:	20 91 58 21 	lds	r18, 0x2158
    1fb0:	30 91 59 21 	lds	r19, 0x2159
    1fb4:	23 2b       	or	r18, r19
    1fb6:	41 f4       	brne	.+16     	; 0x1fc8 <malloc+0xd0>
    1fb8:	20 91 02 20 	lds	r18, 0x2002
    1fbc:	30 91 03 20 	lds	r19, 0x2003
    1fc0:	20 93 58 21 	sts	0x2158, r18
    1fc4:	30 93 59 21 	sts	0x2159, r19
    1fc8:	20 91 00 20 	lds	r18, 0x2000
    1fcc:	30 91 01 20 	lds	r19, 0x2001
    1fd0:	21 15       	cp	r18, r1
    1fd2:	31 05       	cpc	r19, r1
    1fd4:	41 f4       	brne	.+16     	; 0x1fe6 <malloc+0xee>
    1fd6:	2d b7       	in	r18, 0x3d	; 61
    1fd8:	3e b7       	in	r19, 0x3e	; 62
    1fda:	40 91 04 20 	lds	r20, 0x2004
    1fde:	50 91 05 20 	lds	r21, 0x2005
    1fe2:	24 1b       	sub	r18, r20
    1fe4:	35 0b       	sbc	r19, r21
    1fe6:	e0 91 58 21 	lds	r30, 0x2158
    1fea:	f0 91 59 21 	lds	r31, 0x2159
    1fee:	e2 17       	cp	r30, r18
    1ff0:	f3 07       	cpc	r31, r19
    1ff2:	a0 f4       	brcc	.+40     	; 0x201c <malloc+0x124>
    1ff4:	2e 1b       	sub	r18, r30
    1ff6:	3f 0b       	sbc	r19, r31
    1ff8:	28 17       	cp	r18, r24
    1ffa:	39 07       	cpc	r19, r25
    1ffc:	78 f0       	brcs	.+30     	; 0x201c <malloc+0x124>
    1ffe:	ac 01       	movw	r20, r24
    2000:	4e 5f       	subi	r20, 0xFE	; 254
    2002:	5f 4f       	sbci	r21, 0xFF	; 255
    2004:	24 17       	cp	r18, r20
    2006:	35 07       	cpc	r19, r21
    2008:	48 f0       	brcs	.+18     	; 0x201c <malloc+0x124>
    200a:	4e 0f       	add	r20, r30
    200c:	5f 1f       	adc	r21, r31
    200e:	40 93 58 21 	sts	0x2158, r20
    2012:	50 93 59 21 	sts	0x2159, r21
    2016:	81 93       	st	Z+, r24
    2018:	91 93       	st	Z+, r25
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <malloc+0x128>
    201c:	e0 e0       	ldi	r30, 0x00	; 0
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	cf 01       	movw	r24, r30
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	08 95       	ret

00002028 <free>:
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	00 97       	sbiw	r24, 0x00	; 0
    202e:	09 f4       	brne	.+2      	; 0x2032 <free+0xa>
    2030:	87 c0       	rjmp	.+270    	; 0x2140 <free+0x118>
    2032:	fc 01       	movw	r30, r24
    2034:	32 97       	sbiw	r30, 0x02	; 2
    2036:	12 82       	std	Z+2, r1	; 0x02
    2038:	13 82       	std	Z+3, r1	; 0x03
    203a:	c0 91 5a 21 	lds	r28, 0x215A
    203e:	d0 91 5b 21 	lds	r29, 0x215B
    2042:	20 97       	sbiw	r28, 0x00	; 0
    2044:	81 f4       	brne	.+32     	; 0x2066 <free+0x3e>
    2046:	20 81       	ld	r18, Z
    2048:	31 81       	ldd	r19, Z+1	; 0x01
    204a:	28 0f       	add	r18, r24
    204c:	39 1f       	adc	r19, r25
    204e:	80 91 58 21 	lds	r24, 0x2158
    2052:	90 91 59 21 	lds	r25, 0x2159
    2056:	82 17       	cp	r24, r18
    2058:	93 07       	cpc	r25, r19
    205a:	79 f5       	brne	.+94     	; 0x20ba <free+0x92>
    205c:	e0 93 58 21 	sts	0x2158, r30
    2060:	f0 93 59 21 	sts	0x2159, r31
    2064:	6d c0       	rjmp	.+218    	; 0x2140 <free+0x118>
    2066:	de 01       	movw	r26, r28
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	ae 17       	cp	r26, r30
    206e:	bf 07       	cpc	r27, r31
    2070:	50 f4       	brcc	.+20     	; 0x2086 <free+0x5e>
    2072:	12 96       	adiw	r26, 0x02	; 2
    2074:	4d 91       	ld	r20, X+
    2076:	5c 91       	ld	r21, X
    2078:	13 97       	sbiw	r26, 0x03	; 3
    207a:	9d 01       	movw	r18, r26
    207c:	41 15       	cp	r20, r1
    207e:	51 05       	cpc	r21, r1
    2080:	09 f1       	breq	.+66     	; 0x20c4 <free+0x9c>
    2082:	da 01       	movw	r26, r20
    2084:	f3 cf       	rjmp	.-26     	; 0x206c <free+0x44>
    2086:	a2 83       	std	Z+2, r26	; 0x02
    2088:	b3 83       	std	Z+3, r27	; 0x03
    208a:	40 81       	ld	r20, Z
    208c:	51 81       	ldd	r21, Z+1	; 0x01
    208e:	84 0f       	add	r24, r20
    2090:	95 1f       	adc	r25, r21
    2092:	8a 17       	cp	r24, r26
    2094:	9b 07       	cpc	r25, r27
    2096:	71 f4       	brne	.+28     	; 0x20b4 <free+0x8c>
    2098:	8d 91       	ld	r24, X+
    209a:	9c 91       	ld	r25, X
    209c:	11 97       	sbiw	r26, 0x01	; 1
    209e:	84 0f       	add	r24, r20
    20a0:	95 1f       	adc	r25, r21
    20a2:	02 96       	adiw	r24, 0x02	; 2
    20a4:	80 83       	st	Z, r24
    20a6:	91 83       	std	Z+1, r25	; 0x01
    20a8:	12 96       	adiw	r26, 0x02	; 2
    20aa:	8d 91       	ld	r24, X+
    20ac:	9c 91       	ld	r25, X
    20ae:	13 97       	sbiw	r26, 0x03	; 3
    20b0:	82 83       	std	Z+2, r24	; 0x02
    20b2:	93 83       	std	Z+3, r25	; 0x03
    20b4:	21 15       	cp	r18, r1
    20b6:	31 05       	cpc	r19, r1
    20b8:	29 f4       	brne	.+10     	; 0x20c4 <free+0x9c>
    20ba:	e0 93 5a 21 	sts	0x215A, r30
    20be:	f0 93 5b 21 	sts	0x215B, r31
    20c2:	3e c0       	rjmp	.+124    	; 0x2140 <free+0x118>
    20c4:	d9 01       	movw	r26, r18
    20c6:	12 96       	adiw	r26, 0x02	; 2
    20c8:	ed 93       	st	X+, r30
    20ca:	fc 93       	st	X, r31
    20cc:	13 97       	sbiw	r26, 0x03	; 3
    20ce:	4d 91       	ld	r20, X+
    20d0:	5d 91       	ld	r21, X+
    20d2:	a4 0f       	add	r26, r20
    20d4:	b5 1f       	adc	r27, r21
    20d6:	ea 17       	cp	r30, r26
    20d8:	fb 07       	cpc	r31, r27
    20da:	79 f4       	brne	.+30     	; 0x20fa <free+0xd2>
    20dc:	80 81       	ld	r24, Z
    20de:	91 81       	ldd	r25, Z+1	; 0x01
    20e0:	84 0f       	add	r24, r20
    20e2:	95 1f       	adc	r25, r21
    20e4:	02 96       	adiw	r24, 0x02	; 2
    20e6:	d9 01       	movw	r26, r18
    20e8:	8d 93       	st	X+, r24
    20ea:	9c 93       	st	X, r25
    20ec:	11 97       	sbiw	r26, 0x01	; 1
    20ee:	82 81       	ldd	r24, Z+2	; 0x02
    20f0:	93 81       	ldd	r25, Z+3	; 0x03
    20f2:	12 96       	adiw	r26, 0x02	; 2
    20f4:	8d 93       	st	X+, r24
    20f6:	9c 93       	st	X, r25
    20f8:	13 97       	sbiw	r26, 0x03	; 3
    20fa:	e0 e0       	ldi	r30, 0x00	; 0
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	9b 81       	ldd	r25, Y+3	; 0x03
    2102:	00 97       	sbiw	r24, 0x00	; 0
    2104:	19 f0       	breq	.+6      	; 0x210c <free+0xe4>
    2106:	fe 01       	movw	r30, r28
    2108:	ec 01       	movw	r28, r24
    210a:	f9 cf       	rjmp	.-14     	; 0x20fe <free+0xd6>
    210c:	ce 01       	movw	r24, r28
    210e:	02 96       	adiw	r24, 0x02	; 2
    2110:	28 81       	ld	r18, Y
    2112:	39 81       	ldd	r19, Y+1	; 0x01
    2114:	82 0f       	add	r24, r18
    2116:	93 1f       	adc	r25, r19
    2118:	20 91 58 21 	lds	r18, 0x2158
    211c:	30 91 59 21 	lds	r19, 0x2159
    2120:	28 17       	cp	r18, r24
    2122:	39 07       	cpc	r19, r25
    2124:	69 f4       	brne	.+26     	; 0x2140 <free+0x118>
    2126:	30 97       	sbiw	r30, 0x00	; 0
    2128:	29 f4       	brne	.+10     	; 0x2134 <free+0x10c>
    212a:	10 92 5a 21 	sts	0x215A, r1
    212e:	10 92 5b 21 	sts	0x215B, r1
    2132:	02 c0       	rjmp	.+4      	; 0x2138 <free+0x110>
    2134:	12 82       	std	Z+2, r1	; 0x02
    2136:	13 82       	std	Z+3, r1	; 0x03
    2138:	c0 93 58 21 	sts	0x2158, r28
    213c:	d0 93 59 21 	sts	0x2159, r29
    2140:	df 91       	pop	r29
    2142:	cf 91       	pop	r28
    2144:	08 95       	ret

00002146 <memcpy>:
    2146:	fb 01       	movw	r30, r22
    2148:	dc 01       	movw	r26, r24
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <memcpy+0xa>
    214c:	01 90       	ld	r0, Z+
    214e:	0d 92       	st	X+, r0
    2150:	41 50       	subi	r20, 0x01	; 1
    2152:	50 40       	sbci	r21, 0x00	; 0
    2154:	d8 f7       	brcc	.-10     	; 0x214c <memcpy+0x6>
    2156:	08 95       	ret

00002158 <memset>:
    2158:	dc 01       	movw	r26, r24
    215a:	01 c0       	rjmp	.+2      	; 0x215e <memset+0x6>
    215c:	6d 93       	st	X+, r22
    215e:	41 50       	subi	r20, 0x01	; 1
    2160:	50 40       	sbci	r21, 0x00	; 0
    2162:	e0 f7       	brcc	.-8      	; 0x215c <memset+0x4>
    2164:	08 95       	ret

00002166 <_exit>:
    2166:	f8 94       	cli

00002168 <__stop_program>:
    2168:	ff cf       	rjmp	.-2      	; 0x2168 <__stop_program>
