#!/usr/bin/env python
import rospy
from sensor_msgs.msg import LaserScan
import std_msgs.msg

import math
import numpy as np
from scipy import stats
import random

inf = 1e500

def return_range(min_deg, max_deg, l):
    # Returns a portion of LaserScan range data. 
    # 0 deg is straight forward, negative is CCW, positive is CW.
    data = l.ranges
    angle_increment = l.angle_increment

    mid_point = len(data)/2.0

    min_rads = math.radians(min_deg)
    max_rads = math.radians(max_deg)

    min_index = int(mid_point + min_rads/angle_increment)
    max_index = int(mid_point + max_rads/angle_increment)

    partial_scan = data[min_index:max_index]
    full_scan = np.zeros(len(data))
    full_scan[min_index:max_index] = data[min_index:max_index]

    # partial_scan contains only the trimmed indicies
    # full_scan has the same number of indicies as the incoming scan 
    return full_scan

def align_with_wall(pub,l):
    # Takes forward laserscan and produces twist messages to make the robot parallel to the wall
    l.ranges = [0.050999999046325684, 0.05400000140070915, 0.05400000140070915, 0.054999999701976776, 0.054999999701976776, 0.054999999701976776, 0.054999999701976776, 0.0560000017285347, 0.057999998331069946, 0.0560000017285347, 0.04899999871850014, 0.0430000014603138, 0.041999999433755875, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.039000000804662704, 0.041999999433755875, 0.0430000014603138, 0.0430000014603138, 0.041999999433755875, 0.039000000804662704, 0.039000000804662704, 0.039000000804662704, 0.04100000113248825, 0.04100000113248825, 0.04100000113248825, 0.04500000178813934, 0.04899999871850014, 0.04899999871850014, 0.0860000029206276, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 0.10999999940395355, 0.10999999940395355, 0.10999999940395355, 0.10999999940395355, 1.1990000009536743, 1.2480000257492065, 1.253000020980835, 1.253000020980835, 1.253000020980835, 1.2730000019073486, 1.2730000019073486, 1.215999960899353, 0.17399999499320984, 0.09799999743700027, 0.09700000286102295, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09600000083446503, 0.10599999874830246, 0.10700000077486038, 0.1889999955892563, 1.2209999561309814, 1.2239999771118164, 1.2239999771118164, 1.2239999771118164, 1.2209999561309814, 1.2170000076293945, 1.2050000429153442, 1.2050000429153442, 1.2050000429153442, 2.9230000972747803, 2.9230000972747803, 2.9230000972747803, 2.9000000953674316, 2.86299991607666, 2.8350000381469727, 2.8350000381469727, 2.8350000381469727, inf, inf, inf, 2.5899999141693115, 2.5899999141693115, 2.5899999141693115, inf, inf, inf, inf, inf, 2.4210000038146973, 2.4070000648498535, 2.3459999561309814, 2.3459999561309814, 2.3429999351501465, 2.3420000076293945, 2.309999942779541, 2.296999931335449, 2.2739999294281006, 2.259999990463257, 2.243000030517578, 2.2230000495910645, 2.2019999027252197, 2.180999994277954, 2.1740000247955322, 2.1570000648498535, 2.134999990463257, 2.117000102996826, 2.109999895095825, 2.0880000591278076, 2.0799999237060547, 2.069999933242798, 2.055000066757202, 2.0339999198913574, 2.0199999809265137, 2.0169999599456787, 1.99399995803833, 1.9850000143051147, 1.968000054359436, 1.9570000171661377, 1.944000005722046, 1.9279999732971191, 1.9279999732971191, 1.9140000343322754, 1.9140000343322754, 1.8949999809265137, 1.805999994277954, 1.6749999523162842, 1.6690000295639038, 1.6360000371932983, 1.6230000257492065, 1.593999981880188, 1.5789999961853027, 1.5609999895095825, 1.5290000438690186, 1.5269999504089355, 1.5199999809265137, 1.5180000066757202, 1.5099999904632568, 1.5080000162124634, 1.4950000047683716, 1.4900000095367432, 1.4900000095367432, 1.4900000095367432, 1.4869999885559082, 1.4819999933242798, 1.4800000190734863, 1.4609999656677246, 1.4609999656677246, 1.4600000381469727, 1.4579999446868896, 1.4600000381469727, 1.4570000171661377, 1.437999963760376, 1.437999963760376, 1.434999942779541, 1.434000015258789, 1.434999942779541, 1.4359999895095825, 1.4359999895095825, 1.4579999446868896, 1.6089999675750732, 1.6089999675750732, 1.6089999675750732, 1.6069999933242798, 1.6030000448226929, 1.597000002861023, 1.5959999561309814, 1.5859999656677246, 1.5670000314712524, 1.562999963760376, 1.5579999685287476, 1.5520000457763672, 1.5509999990463257, 1.5509999990463257, 1.5479999780654907, 1.5429999828338623, 1.5390000343322754, 1.5360000133514404, 1.5290000438690186, 1.5240000486373901, 1.5240000486373901, 1.5190000534057617, 1.5169999599456787, 1.5, 1.4819999933242798, 1.4609999656677246, 1.4500000476837158, 1.4500000476837158, 1.4500000476837158, 1.4500000476837158, 1.4910000562667847, 2.0490000247955322, 2.0759999752044678, 2.0789999961853027, 2.0869998931884766, 2.0880000591278076, 2.0910000801086426, 2.0910000801086426, 2.0910000801086426, 1.5440000295639038, 1.5360000133514404, 1.534999966621399, 1.5329999923706055, 1.5199999809265137, 1.5199999809265137, 1.5199999809265137, 1.5199999809265137, 1.5199999809265137, 1.5180000066757202, 1.5160000324249268, 1.5160000324249268, 1.5119999647140503, 1.5119999647140503, 1.5119999647140503, 1.5119999647140503, 1.5110000371932983, 1.5089999437332153, 1.5089999437332153, 1.5069999694824219, 1.50600004196167, 1.503999948501587, 1.503999948501587, 1.503999948501587, 1.496999979019165, 1.49399995803833, 1.4880000352859497, 1.4880000352859497, 1.4869999885559082, 1.4859999418258667, 1.4839999675750732, 1.4839999675750732, 1.4839999675750732, 1.4850000143051147, 1.4900000095367432, 1.4919999837875366, 1.49399995803833, 1.496000051498413, 1.4980000257492065, 1.496000051498413, 1.496000051498413, 1.496000051498413, 1.496000051498413, 1.4950000047683716, 1.496000051498413, 1.50600004196167, 1.50600004196167, 1.5080000162124634, 1.5089999437332153, 1.5089999437332153, 1.5089999437332153, 1.5099999904632568, 1.5089999437332153, 1.50600004196167, 1.5069999694824219, 1.5069999694824219, 1.503999948501587, 1.503999948501587, 1.503999948501587, 1.503999948501587, 1.503999948501587, 1.5019999742507935, 1.5019999742507935, 1.5080000162124634, 1.503000020980835, 1.503000020980835, 1.503000020980835, 1.5069999694824219, 1.5069999694824219, 1.5069999694824219, 1.503999948501587, 1.5069999694824219, 1.503999948501587, 1.503999948501587, 1.5099999904632568, 1.5099999904632568, 1.5119999647140503, 1.5160000324249268, 1.5149999856948853, 1.5149999856948853, 1.5149999856948853, 1.5149999856948853, 1.5149999856948853, 1.5180000066757202, 1.5260000228881836, 1.5299999713897705, 1.5299999713897705, 1.5329999923706055, 1.5379999876022339, 1.5379999876022339, 1.5379999876022339, 1.5379999876022339, 1.5379999876022339, 1.5410000085830688, 1.5410000085830688, 1.5440000295639038, 1.5440000295639038, 1.5440000295639038, 1.5509999990463257, 1.5540000200271606, 1.555999994277954, 1.5609999895095825, 1.562000036239624, 1.565000057220459, 1.5750000476837158, 1.5750000476837158, 1.5759999752044678, 1.5820000171661377, 1.5839999914169312, 1.590000033378601, 1.590000033378601, 1.590000033378601, 1.600000023841858, 1.6039999723434448, 1.6039999723434448, 1.6109999418258667, 1.6180000305175781, 1.6180000305175781, 1.6200000047683716, 1.6200000047683716, 1.621999979019165, 1.6339999437332153, 1.6339999437332153, 1.6410000324249268, 1.6449999809265137, 1.6460000276565552, 1.6519999504089355, 1.652999997138977, 1.6610000133514404, 1.6670000553131104, 1.6690000295639038, 1.6710000038146973, 1.6720000505447388, 1.684999942779541, 1.687000036239624, 1.690999984741211, 1.7009999752044678, 1.7050000429153442, 1.715999960899353, 1.718000054359436, 1.7269999980926514, 1.7350000143051147, 1.7419999837875366, 1.74399995803833, 1.75, 1.7599999904632568, 1.7610000371932983, 1.7680000066757202, 1.7740000486373901, 1.7760000228881836, 1.7860000133514404, 2.053999900817871, 2.0820000171661377, inf, inf, 2.0820000171661377, 2.0820000171661377, 0.9610000252723694, 0.9359999895095825, 0.9309999942779541, 0.921999990940094, 0.9190000295639038, 0.9190000295639038, 0.921999990940094, 0.9350000023841858, 0.9409999847412109, 0.953000009059906, 0.9670000076293945, 0.9850000143051147, 0.9919999837875366, 1.0149999856948853, 1.0290000438690186, 1.0299999713897705, 1.059999942779541, 1.0670000314712524, 1.0740000009536743, 1.100000023841858, 1.1150000095367432, 1.128999948501587, 1.1369999647140503, 1.1549999713897705, 1.159000039100647, 1.1640000343322754, 1.187999963760376, 1.2109999656677246, 1.2109999656677246, 1.2289999723434448, 1.2489999532699585, 1.2630000114440918, 1.2719999551773071, 1.2740000486373901, 1.281999945640564, 1.2929999828338623, 1.309999942779541, inf, inf, inf, inf, inf, inf, inf, 0.9300000071525574, 0.9290000200271606, 0.9259999990463257, 0.800000011920929, 0.7979999780654907, 0.7889999747276306, 0.7889999747276306, 0.7889999747276306, 0.7919999957084656, 0.7990000247955322, 0.8009999990463257, 0.8009999990463257, 0.7990000247955322, 0.7979999780654907, 0.7979999780654907, 0.7979999780654907, 0.7979999780654907, 0.7979999780654907, 0.7929999828338623, 0.7929999828338623, 0.7919999957084656, 0.7879999876022339, 0.7870000004768372, 0.7850000262260437, 0.7730000019073486, 0.7689999938011169, 0.7680000066757202, 0.7689999938011169, 0.7730000019073486, 0.7770000100135803, 0.7829999923706055, 0.8019999861717224, 0.7829999923706055, 0.7770000100135803, 0.1469999998807907, 0.09099999815225601, 0.09099999815225601, 0.08799999952316284, 0.08399999886751175, 0.08100000023841858, 0.07999999821186066, 0.07999999821186066, 0.08100000023841858, 0.08299999684095383, 0.08399999886751175, 0.08500000089406967, 0.08500000089406967, 0.08500000089406967, 0.08500000089406967, 0.08500000089406967, 0.08399999886751175, 0.0820000022649765, 0.07800000160932541, 0.07800000160932541, 0.07800000160932541, 0.08399999886751175, inf, inf, inf, inf, 0.0560000017285347, 0.05299999937415123, 0.0430000014603138, 0.0430000014603138, 0.0430000014603138, 0.04800000041723251, 0.04800000041723251, 0.04800000041723251, 0.039000000804662704, 0.039000000804662704, 0.039000000804662704, 0.039000000804662704, 0.04100000113248825, 0.04100000113248825, 0.04100000113248825, 0.04100000113248825, 0.039000000804662704, 0.039000000804662704, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164, 0.019999999552965164]
    l.ranges = return_range(-10, 10, l)
    cart_scan = scan_to_cartesian(l)

    # Run through a few random points and add slopes to list for calculations
    if len(cart_scan[0]) < 10:
        rospy.logwarn("Not enough data points in scan to align with wall.")
    else:
        slope, intercept, r_value, p_value, std_err = stats.linregress(
            np.trim_zeros(cart_scan[1]),np.trim_zeros(cart_scan[0])) 
        print math.degrees(np.arctan(slope))

    pub.publish(l)

def scan_to_cartesian(l):
    # Take laserscan ranges and convert them to a list of x,y points

    angle_increment = l.angle_increment
    angle_min = l.angle_min
    ranges = l.ranges

    dataPoints = len(ranges)
    if dataPoints == 0:
        return

    # Create a temporary array to hold transformed points
    temp = np.zeros(shape=(2,dataPoints))

    #print "Starting conversion"
    for i in range(dataPoints):
        #convert polar to angle and distance
        angle = angle_min + i*angle_increment 
        dist = ranges[i]*100.0 #convert to cm
        #sometimes dist values are too far and it'll return inf or nan but we don't want that
        if dist > .00001 and dist != float('inf'): 
            #add converted values to temp arrays and flip the y values since the LIDARS are upsidedown
            temp[0,i] = math.cos(angle)*dist
            temp[1,i] = -math.sin(angle)*dist
        else:
            #so the angles stay right, fill with zero
            temp[0,i] = 0
            temp[1,i] = 0

    return temp

pub = rospy.Publisher('scan_trim', LaserScan, queue_size=5)
pub1 = rospy.Publisher('scan_trim', LaserScan, queue_size=5)

rospy.init_node('laser_trimmer')

l = LaserScan()
l.header = std_msgs.msg.Header()
l.header.stamp = rospy.get_rostime()
l.header.frame_id = "map"

l.angle_min = -1.57079637051
l.angle_max = 1.56466042995
l.angle_increment = 0.00613592332229
l.time_increment = 9.76562514552e-05
l.scan_time = 0.10000000149
l.range_min = 0.019999999553
l.range_max = 5.59999990463

r = rospy.Rate(10) # 10hz

while not rospy.is_shutdown():
    align_with_wall(pub,l)
    r.sleep()
