#!/usr/bin/python
'''Author: Khaled Hassan, Forrest Voight'''
from __future__ import division

# import roslib
# roslib.load_manifest('joystick_command

import rospy

from sensor_msgs.msg import Joy
from geometry_msgs.msg import Twist, TwistStamped, Vector3
from std_msgs.msg import String, Int8, Bool
from ieee2016_msgs.srv import StopMecanum, StopController
from dynamixel_movement import DynamixelControl
from arm_controller import ArmController

import time

rospy.init_node('joystick_command')

pub = rospy.Publisher('/robot/twist', TwistStamped, queue_size=3)
start = rospy.Publisher('/settings/start_command', Bool, queue_size=3)
map_version = rospy.Publisher('/settings/map_version', Int8, queue_size=3)
dynamixel = rospy.Publisher('/joy', )
elevator = rospy.Publisher('/robot/arm/elevator_target', Bool, queue_size=3)
rail = rospy.Publisher('/robot/arm/rail_target', Bool, queue_size=3)

stop_proxy = rospy.ServiceProxy('/robot/mecanum/stop', StopMecanum)
speed = .1
def got_joy_msg(joy_msg):
    global twist_stamped_msg, active, pub, speed
    #no button
    if joy_msg.buttons[0]:
       active = not active

    #x button
    if joy_msg.buttons[2]:
       map_version.publish(Int8(data=1))
       time.sleep(.2)
       start.publish(Bool(data=True))
       elevator.publish(Bool(data=True))
    #b button
    if joy_msg.buttons[1]:
       map_version.publish(Int8(data=2))
       time.sleep(.2)
       start.publish(Bool(data=True))
       rail.publish(Bool(data=True))
    #right click
    if joy_msg.buttons[5]:
        stop_proxy(False)
    #left click
    if joy_msg.buttons[4]:
        stop_proxy(True)

    if joy_msg.buttons[13]:
        speed += .02
    if joy_msg.buttons[14]:
        speed -= .02


    linear_x = joy_msg.axes[1] * max_linear_velocity
    linear_y = joy_msg.axes[0] * max_linear_velocity
    angular_z = joy_msg.axes[3] * max_angular_velocity
    seq = joy_msg.header.seq


    twist_stamped_msg.twist = Twist()
    twist_stamped_msg.twist.linear = Vector3()
    twist_stamped_msg.twist.angular = Vector3()

    twist_stamped_msg.twist.linear.x = 0
    twist_stamped_msg.twist.linear.y = 0
    twist_stamped_msg.twist.angular.z = 0

    dead_zone = .5
    if abs(linear_x) > dead_zone:
      twist_stamped_msg.twist.linear.x = linear_x * speed
    if abs(linear_y) > dead_zone:
      twist_stamped_msg.twist.linear.y = linear_y * speed
    twist_stamped_msg.twist.linear.z = 0
    
    twist_stamped_msg.twist.angular.x = 0
    twist_stamped_msg.twist.angular.y = 0
    
    #print angular_z,dead_zone*100
    if abs(angular_z) > dead_zone:
      twist_stamped_msg.twist.angular.z = angular_z * speed

    twist_stamped_msg.header.seq = seq
    twist_stamped_msg.header.frame_id = '/robot'
    twist_stamped_msg.header.stamp = joy_msg.header.stamp

    pub.publish(twist_stamped_msg)

# These values are hardcoded for now.
max_linear_velocity = 1 # rospy.get_param('max_linear_velocity')
max_angular_velocity = 4 # rospy.get_param('max_angular_velocity')

twist_stamped_msg = TwistStamped()
active = False

rospy.Subscriber('/joy', Joy, got_joy_msg)

rospy.spin()    

