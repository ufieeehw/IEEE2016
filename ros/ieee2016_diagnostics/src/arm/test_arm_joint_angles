#!/usr/bin/python
import numpy as np
## Display
import matplotlib.pyplot as plt
import pygame
import time
## Math
import numpy as np
## Ros
import rospy
from tf import transformations as tf_trans
## Ros Msgs
from std_msgs.msg import Header, Float64
from geometry_msgs.msg import Point, PointStamped, PoseStamped, Pose, Quaternion
from dynamixel_msgs.msg import JointState

class Arm_Drawer(object):
    def __init__(self):
        self.base = center

        shoulder_local_pos = self.joint1.norm * np.array([np.cos(self.angle1), np.sin(self.angle1)])
        self.new_end_1 = shoulder_local_pos + self.base

        # Update endpoint as sum of base angle and elbow angle
        total_elbow_angle = self.angle1 + self.angle2

        # Superimpose positions
        elbow_local_pos = self.joint2.norm * np.array([np.cos(total_elbow_angle), np.sin(total_elbow_angle)])
        self.new_end_2 = self.new_end_1 + elbow_local_pos

        self.joint1.update(self.base, self.new_end_1)
        self.joint2.update(self.joint1.end, self.new_end_2)


    def draw(self):
        # np.random.seed(5)
        # x = np.arange(1, 101)
        # y = 20 + 3 * x + np.random.normal(0, 60, 100)
        # plt.plot(x, y, "o")

        # Draw shoulder-elbow

        # Draw elbow-wrist

        # Draw wrist? 


        # draw vertical line from (70,100) to (70, 250)
        plt.plot([70, 70], [100, 250], 'k-', lw=2)  # lw is line width

        # draw diagonal line from (70, 90) to (90, 200)
        plt.plot([70, 90], [90, 200], 'k-')

        plt.show()


class Arm_Tester(object):
    def __init__(self):
        '''Arm_Tester
        Purpose:
            Let's you input string angle commands in the console
        Todo:
            Add matplotlib plot drawing for cool-awesomes!
        '''
        rospy.init_node('arm_tester')
        self.elbow_state_sub = rospy.Subscriber('/elbow_controller/state', JointState, self.elbow_state_cb)
        self.shoulder_state_sub = rospy.Subscriber('/shoulder_controller/state', JointState, self.shoulder_state_cb) 

        self.elbow_cmd_pub = rospy.Publisher('/elbow_controller/command', Float64, queue_size=1)
        self.shoulder_cmd_pub = rospy.Publisher('/shoulder_controller/command', Float64, queue_size=1)

    def elbow_state_cb(self, msg):
        # print msg
        return

    def shoulder_state_cb(self, msg):
        # print msg
        return

    def send_angles(self, shoulder=None, elbow=None):
        if shoulder is not None:
            self.shoulder_cmd_pub.publish(Float64(shoulder))
        if elbow is not None:
            self.elbow_cmd_pub.publish(Float64(elbow))


if __name__ == '__main__':
    arm_tester = Arm_Tester()
    while(not rospy.is_shutdown()):

        # elbow = float(input('Elbow Angle: '))
        shoulder = float(input('Shoulder Angle: '))
        elbow=None
        arm_tester.send_angles(shoulder=shoulder, elbow=elbow)